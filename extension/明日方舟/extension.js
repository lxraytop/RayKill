/// <reference path="../../typings/index.d.ts" />
'use strict';
game.import("extension", function (lib, game, ui, get, ai, _status) {
    //----------版本检测---------//
    get.compareVersion = function (a, b) {
        var aParts = a.split('.');
        var bParts = b.split('.');
        for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {
            var aPart = i < aParts.length ? parseInt(aParts[i], 10) : 0;
            var bPart = i < bParts.length ? parseInt(bParts[i], 10) : 0;
            if (aPart !== bPart) {
                return false;
            }
        }
        return true;
    }
    lib.config.noname_version_mrfzcheck = "3.0.0";
    if (lib.version && !lib.config.mrfzNometionVersion) {
        if (get.compareVersion(lib.version, lib.config.noname_version_mrfzcheck) == false) {
            var ret = confirm("当前角完杀版本" + lib.version + "与【明日方舟】的游戏版本(" + lib.config.noname_version_mrfzcheck + ")不符，选择‘确定’以关闭本扩展，若游戏版本低于本扩展，请尽快更新游戏版本！");
            if (!ret) {
                alert('请注意，因此可能导致一些未知的bug或后果!');
                game.saveConfig('mrfzNometionVersion', true);
            }
            else game.saveConfig('extension_明日方舟_enable', false);
        }
    }
    return {
        name: "明日方舟",
        content: function (config, pack) {
            if (config.mrfz) {
                for (var i in lib.characterPack['mrfz']) {
                    if (lib.character[i][4].indexOf("forbidai") < 0) lib.character[i][4].push("forbidai");
                };
            };

            //加载css
            lib.init.css(lib.assetURL + 'extension/明日方舟/css', 'extension');

            //千幻设置//
            if (lib.config.extension_时装回廊_enable) {
                lib.qhly_groupimage['mrfzgroup'] = 'extension/时装回廊/image/name_mrfzgroup.png';
            }

            //背景设置
            mrfzfuc.setBgI();

            //禁用其他武将//
            if (config.isBanOther) {
                var SaveF = lib.filter.characterDisabled;
                lib.filter.characterDisabled = function (i, libCharacter) {
                    if (i && !lib.config.mrfz_allCharacter.contains(i)) {
                        return true;
                    }
                    return SaveF(i, libCharacter);
                }
            }

            //异格武将设置//
            if (config.isBanSp) {
                var repChar = {
                    sikadimrfz: ['sikadimrfz', 'spsikadimrfz'],
                    chenmrfz: ['spzzxpmrfz', 'chenmrfz'],
                    amiyamrfz: ['amiyamrfz', 'spamiyamrfz'],
                    shuiyuemrfz: ['shuiyuemrfz', 'yizumikemrfz'],
                    xiaoyangmrfz: ['spxiaoyanmrfz', 'xiaoyangmrfz'],
                };
                for (var key in repChar) {
                    if (repChar.hasOwnProperty(key)) {
                        lib.characterReplace[key] = repChar[key];
                    }
                }
            }

            //势力设置//
            if (config.isOneGroup) {
                let keys = Object.keys(lib.character);
                let result = keys.filter(key => key.endsWith('mrfz'));
                result.forEach(key => {
                    lib.character[key][1] = 'mrfzgroup';
                });
            }
            else {
                var data = [
                    // { name: 'luomrfz', translation: '罗' },
                    // { name: 'xiemrfz', translation: '谢' },
                    // { name: 'bamrfz', translation: '巴' },
                    // { name: 'yimrfz', translation: '伊' },
                    // { name: 'laimrfz', translation: '莱' },
                    // { name: 'xumrfz', translation: '叙' },
                    // { name: 'haimrfz', translation: '海' },
                    // { name: 'liemrfz', translation: '深' },
                    // { name: 'qimrfz', translation: '企' },
                    // { name: 'kamrfz', translation: '卡' },
                    // { name: 'gemrfz', translation: '哥' },
                    // { name: 'longmrfz', translation: '龙' },
                    // { name: 'weimrfz', translation: '维' },
                    // { name: 'lamrfz', translation: '拉' },
                    // { name: 'shimrfz', translation: '使' },
                    // { name: 'wumrfz', translation: '乌' },
                    // { name: 'samrfz', translation: '萨' },
                    // { name: 'orthermrfz', translation: '联' },
                    // { name: 'yanmrfz', translation: '炎' },
                    // { name: 'limrfz', translation: '鲤' },
                    // { name: 'ximrfz', translation: '汐' },
                    // { name: 'hongmrfz', translation: '红' },
                    // { name: 'dongmrfz', translation: '东' },
                    // { name: 'lymrfz', translation: '茵' },
                    // { name: 'shenmrfz', translation: '深' },
                    // { name: 'qianmrfz', translation: '前' },
                    // { name: 'mimrfz', translation: '诺' },
                    // { name: 'samimrfz', translation: '米' }
                ];

                for (var i = 0; i < data.length; i++) {
                    lib.group.push(data[i].name);
                    lib.translate[data[i].name] = data[i].translation;
                    lib.translate[data[i].key + "2"] = data[i].name;
                    lib.groupnature[data[i].name] = data[i].name;
                }

            }
            //红蒂禁将设置//
            if (config.isNoLimted) {
                lib.config.isNoLimted_mrfz = true;
                lib.translate['qianximrfz_ban'] = '禁止复制武将（当前无限制）';
                lib.translate['qianximrfz_ban_info'] = '可在设置中开启或关闭禁用武将</br>无';
            }
            else {
                lib.config.isNoLimted_mrfz = false;
            }

            //配音设置//
            if (typeof config.audiochoose !== undefined) {
                if (typeof config.audiochoose === 'string') {
                    lib.config.dieAudio = config.audiochoose;
                    mrfzfuc.setAudio(config.audiochoose);
                }
                else mrfzfuc.setAudio('CN');
            }
            else mrfzfuc.setAudio('CN');

            //武将前缀设置//
            let list = ['缄默', '浊心', '耀骑士', '归溟', '百炼', '淬羽', '琳琅', '圣约', '假日威龙', '涤火', '纯烬'];
            for (i of list) {
                if (typeof i === 'string') {
                    lib.namePrefix.set(i, {
                        color: '#00FFFF',
                        nature: 'woodmm',
                    });
                }
            }
            lib.namePrefix.set('近卫', {
                color: '#191970',
                nature: 'woodmm',
            });

            //---成就模式---//
            //创建成就列表
            if (!lib.config.AchList_mrfz) lib.config.AchList_mrfz = {};
            for (var key in mrfzfuc.AchList) {
                var name = mrfzfuc.AchList[key].name2;
                if (!lib.config.AchList_mrfz.hasOwnProperty(name)) {
                    lib.config.AchList_mrfz[name] = lib.config[name] == undefined ? false : lib.config[name];
                }
            }
            //成就检测
            if (config.isAchMode) {
                //游戏结束成就检测
                var mrfz_over = game.over;
                game.over = function (result) {
                    mrfz_over(result);
                    if (lib.config.mode == 'identity') {
                        //---胜利成就---//
                        //获得身份局一百局胜利
                        if (mrfzfuc.GameDataTotal('win', 'identity') && lib.config.AchList_mrfz.win100mrfz == false) mrfzfuc.ShowGetAch('win100mrfz');
                        //身份局失败120场
                        if (mrfzfuc.GameDataTotal('lose', 'identity') && lib.config.AchList_mrfz.lose120mrfz == false) mrfzfuc.ShowGetAch('lose120mrfz');


                        //---干员专属成就---//
                        //缪尔赛思 无根之雨 内奸获胜
                        if (game.me.name == 'miumiumrfz' && result == true && game.me.identity == 'nei' && lib.config.AchList_mrfz.wugenzhiyumrfz == false) {
                            //game.saveConfig('wugenzhiyumrfz',true);
                            //lib.config.AchList_mrfz.wugenzhiyumrfz=true;
                            mrfzfuc.ShowGetAch('wugenzhiyumrfz');
                        }
                        //涤火杰西卡 徽章：没有队友阵亡 获胜 内奸除外
                        if (game.me.name == 'spjiexikamrfz' && result == true && game.me.identity != 'nei' && lib.config.AchList_mrfz.huizhangmrfz == false) {
                            var tmp_bool = true;
                            for (var i = 0; i < game.dead.length; i++) {
                                if (game.dead[i].identity == game.me.identity) {
                                    tmp_bool = false;
                                    break;
                                }
                            }
                            if (tmp_bool) {
                                //game.saveConfig('huizhangmrfz',true);
                                //lib.config.AchList_mrfz.huizhangmrfz=true;
                                mrfzfuc.ShowGetAch('huizhangmrfz');
                            }
                        }
                        //号角 胜利时本阵营只有自己存活
                        if (game.me.name == 'haojiaomrfz' && result == true && lib.config.AchList_mrfz.duzouqumrfz == false && game.me.identity != 'nei') {
                            var tmp_bool = true;
                            for (var i = 0; i < game.players.length; i++) {
                                if (game.dead[i].identity == game.me.identity) {
                                    tmp_bool = false;
                                    break;
                                }
                            }
                            if (tmp_bool) {
                                mrfzfuc.ShowGetAch('duzouqumrfz');
                            }
                        }
                        //克丽斯腾 主公开局，死亡后获胜
                        if (game.me.name == 'kelisitengmrfz' && lib.config.AchList_mrfz.zongxiazhiyuanmrfz == false && result == true) {
                            var tmp_bool = false;
                            for (var i = 0; i < game.dead.length; i++) {
                                if (game.dead[i] == game.me) {
                                    tmp_bool = true;
                                    break;
                                }
                            }
                            if (mrfzfuc.AchData_tmp['_sjzxAch_zongxiazhiyuanmrfz'] == true && tmp_bool == true) mrfzfuc.ShowGetAch('zongxiazhiyuanmrfz');
                        }
                    }
                };

                //全局技能成就检测
                let keys = Object.keys(lib.skill);
                let result = keys.filter(key => key.endsWith('mrfz'));
                result.forEach(key => {
                    if (lib.skill[key].Ach_mrfz != undefined && lib.skill[key].Ach_mrfz == true) {
                        lib.skill[key].forced = true;
                        lib.skill[key].charlotte = true;
                        lib.skill[key].lastDo = true;
                        lib.skill[key].popup = false;
                    }
                });
            }


            //设置武将、成就信息
            let count_char = 0, count_Ach = 0;
            Object.keys(lib.character).forEach(function (key) {
                if (key.endsWith('mrfz')) {
                    count_char++;
                }
            });
            Object.values(lib.config.AchList_mrfz).forEach(function (value) {
                if (value === true) {
                    count_Ach++;
                }
            });
            let sugVersion;
            if (get.compareVersion(lib.config.noname_version_mrfzcheck, lib.version) == false) {
                sugVersion = lib.config.noname_version_mrfzcheck + '<a style="cursor: pointer;font-weight: bold;"><font color=#FF0000>（您当前本体版本与推荐版本不符）</font></a>';
            }
            else sugVersion = lib.config.noname_version_mrfzcheck;
            let str = '版本号:' + lib.extensionPack["明日方舟"].version
                + '</br>推荐本体版本号：' + sugVersion
                + '</br>已实装干员数：' + count_char
                + '</br>已完成的成就数/总成就数：' + count_Ach + '/' + Object.keys(lib.config.AchList_mrfz).length;
            lib.extensionPack["明日方舟"].code.config.charAndAch.name = str;

        },
        precontent: function (mrfz) {
            //————覆写本体函数————//
            //用于实现无视装备牌
            get.distance = (from, to, method) => {
                if (from == to) return 0;
                if (!game.players.contains(from) && !game.dead.contains(from)) return Infinity;
                if (!game.players.contains(to) && !game.dead.contains(to)) return Infinity;
                let n = 1;
                if (game.chess) {
                    let fxy = from.getXY(), txy = to.getXY();
                    n = Math.abs(fxy[0] - txy[0]) + Math.abs(fxy[1] - txy[1]);
                    if (method == 'raw' || method == 'pure' || method == 'absolute') return n;
                }
                else if (to.isMin(true) || from.isMin(true)) {
                    if (method == 'raw' || method == 'pure' || method == 'absolute') return n;
                }
                else {
                    let player = from, length = game.players.length;
                    const totalPopulation = game.players.length + game.dead.length + 1;
                    for (let iwhile = 0; iwhile < totalPopulation; iwhile++) {
                        if (player.nextSeat != to) {
                            player = player.nextSeat;
                            if (player.isAlive() && !player.isOut() && !player.hasSkill('undist') && !player.isMin(true)) n++;
                        }
                        else {
                            break;
                        }
                    }
                    for (let i = 0; i < game.players.length; i++) {
                        if (game.players[i].isOut() || game.players[i].hasSkill('undist') || game.players[i].isMin(true)) length--;
                    }
                    if (method == 'absolute') return n;
                    if (from.isDead()) length++;
                    if (to.isDead()) length++;
                    const left = from.hasSkillTag('left_hand'), right = from.hasSkillTag('right_hand');
                    if (left === right) n = Math.min(n, length - n);
                    else if (left == true) n = length - n;
                    if (method == 'raw' || method == 'pure') return n;
                }
                n = game.checkMod(from, to, n, 'globalFrom', from);
                n = game.checkMod(from, to, n, 'globalTo', to);
                const equips1 = from.getCards('e', function (card) {
                    return !ui.selected.cards || !ui.selected.cards.contains(card);
                }), equips2 = to.getCards('e', function (card) {
                    return !ui.selected.cards || !ui.selected.cards.contains(card);
                });
                for (let i = 0; i < equips1.length; i++) {
                    let info = get.info(equips1[i]).distance;
                    let info2 = get.info(equips1[i]).subtype;
                    if (!info2) continue;
                    if (mrfzfuc.isBanEquips(info2, from)) continue;
                    if (!info) continue;
                    if (info.globalFrom) {
                        n += info.globalFrom;
                    }
                }
                for (let i = 0; i < equips2.length; i++) {
                    let info = get.info(equips2[i]).distance;
                    let info2 = get.info(equips2[i]).subtype;
                    if (!info2) continue;
                    if (mrfzfuc.isBanEquips(info2, to)) continue;
                    if (!info) continue;
                    if (info.globalTo) {
                        n += info.globalTo;
                    }
                    if (info.attaclTo) {
                        m += info.attaclTo;
                    }
                }
                if (method == 'attack') {
                    let m = n;
                    m = game.checkMod(from, to, m, 'attackFrom', from);
                    m = game.checkMod(from, to, m, 'attackTo', to);
                    return m;
                }
                else if (method == 'unchecked') return n;
                return Math.max(1, n);
            }
            lib.element.player.inRange = function (to) {
                var from = this;
                if (from == to || from.hasSkill('undist') || to.hasSkill('undist')) return false;
                if (!game.players.contains(from) && !game.dead.contains(from)) return false;
                if (!game.players.contains(to) && !game.dead.contains(to)) return false;
                var mod1 = game.checkMod(from, to, 'unchanged', 'inRange', from);
                if (mod1 != 'unchanged') return mod1;
                var mod2 = game.checkMod(from, to, 'unchanged', 'inRangeOf', to);
                if (mod2 != 'unchanged') return mod2;
                //修改
                var rangeq = from.getCards('e', function (card) {
                    return !ui.selected.cards || !ui.selected.cards.contains(card);
                });
                var range = false;
                for (var i = 0; i < rangeq.length; i++) {
                    var info = get.info(rangeq[i]);
                    if (!info) continue;
                    if (info.subtype != 'equip1') continue;
                    if (!mrfzfuc.isBanEquips('1', from)) continue;
                    range = from.getEquipRange() - from.getAttackRange() + 1;
                }
                if (range == false) range = from.getAttackRange();
                if (range < 1) return false;
                var player = from, m, n = 1, i;
                var fxy, txy;
                if (game.chess) {
                    fxy = from.getXY();
                    txy = to.getXY();
                    n = Math.abs(fxy[0] - txy[0]) + Math.abs(fxy[1] - txy[1]);
                }
                else if (to.isMin(true) || from.isMin(true)) { }
                else {
                    var length = game.players.length;
                    var totalPopulation = game.players.length + game.dead.length + 1;
                    for (var iwhile = 0; iwhile < totalPopulation; iwhile++) {
                        if (player.nextSeat != to) {
                            player = player.nextSeat;
                            if (player.isAlive() && !player.isOut() && !player.hasSkill('undist') && !player.isMin(true)) n++;
                        }
                        else {
                            break;
                        }
                    }
                    for (i = 0; i < game.players.length; i++) {
                        if (game.players[i].isOut() || game.players[i].hasSkill('undist') || game.players[i].isMin(true)) length--;
                    }
                    if (from.isDead()) length++;
                    if (to.isDead()) length++;
                    var left = from.hasSkillTag('left_hand');
                    var right = from.hasSkillTag('right_hand');
                    if (left === right) n = Math.min(n, length - n);
                    else if (left == true) n = length - n;
                }
                n = game.checkMod(from, to, n, 'globalFrom', from);
                n = game.checkMod(from, to, n, 'globalTo', to);
                m = n;
                m = game.checkMod(from, to, m, 'attackFrom', from);
                m = game.checkMod(from, to, m, 'attackTo', to);
                var equips1 = from.getCards('e', function (card) {
                    return !ui.selected.cards || !ui.selected.cards.contains(card);
                }), equips2 = to.getCards('e', function (card) {
                    return !ui.selected.cards || !ui.selected.cards.contains(card);
                });
                for (i = 0; i < equips1.length; i++) {
                    var info = get.info(equips1[i]).distance;
                    var info2 = get.info(equips1[i]).subtype;
                    if (!info2) continue;
                    if (mrfzfuc.isBanEquips(info2, from)) continue;
                    if (!info) continue;
                    if (info.globalFrom) {
                        m += info.globalFrom;
                        n += info.globalFrom;
                    }
                }
                for (i = 0; i < equips2.length; i++) {
                    var info = get.info(equips2[i]).distance;
                    var info2 = get.info(equips2[i]).subtype;
                    if (!info2) continue;
                    if (mrfzfuc.isBanEquips(info2, to)) continue;
                    if (!info) continue;
                    if (info.globalTo) {
                        m += info.globalTo;
                        n += info.globalTo;
                    }
                    if (info.attaclTo) {
                        m += info.attaclTo;
                    }
                }
                return m <= range;
            }

            //——函数——//
            let player_mrfzfuc = {
                changeMarkImage: function (mark, path, bool = false) {
                    if (bool) path = 'url("' + path + '")';
                    else path = 'url("extension/明日方舟/image/orther/' + path + '.png")';
                    return this.marks[mark].text.style.backgroundImage = path;
                },

                recastCount: function () {
                    if (!this.storage._recastGain || typeof this.storage._recastGain != 'number') return 0;
                    return this.storage._recastGain;
                },

                isAction: function () {
                    var history = this.actionHistory;
                    for (var i = history.length - 1; i >= 0; i--) {
                        if (history[i].isMe) return true;
                        if (history[i].isRound) break;
                    }
                    return false;
                },

                removeAllmark: function (str, bool = true) {
                    if (bool == false) {
                        return this.removeMark(str, this.countMark(str), false);
                    }
                    else return this.removeMark(str, this.countMark(str));
                },

                isTypeExpansions: function (str, type) {
                    if (this.getExpansions(str).filter(function (magic) {
                        return get.type2(magic) == type;
                    }).length) return true;
                    return false;
                },

                isPhase: function (phase, isme = true) {
                    if (isme == true && _status.currentPhase != this) return false;
                    return _status.event.name == phase || _status.event.getParent(phase).name == phase;
                },

                recoverTo: function (num) {
                    if (typeof num != 'number') num = this.maxHp;
                    return this.recover(num - this.hp);
                },

                canUseToAnyone: function (card, distance = true, includeme = true) {
                    if (typeof card == 'string') card = { name: card, isCard: true };
                    for (var i = 0; i < game.players.length; i++) {
                        if (includeme == false && game.players[i] == this) continue;
                        if (distance != false) {
                            if (this.canUse(card, game.players[i], false)) {
                                return true;
                            }
                        }
                        else {
                            if (this.canUse(card, game.players[i])) {
                                return true;
                            }
                        }
                    }
                    return false;
                },

                isMaxHandCardLimit: function (equal) {
                    var nh = this.getHandcardLimit();
                    for (var i = 0; i < game.players.length; i++) {
                        if (game.players[i].isOut() || game.players[i] == this) continue;
                        if (equal) {
                            if (game.players[i].getHandcardLimit() >= nh) return false;
                        }
                        else {
                            if (game.players[i].getHandcardLimit() > nh) return false;
                        }
                    }
                    return true;
                },

                isMinHandCardLimit: function (equal) {
                    var nh = this.getHandcardLimit();
                    for (var i = 0; i < game.players.length; i++) {
                        if (game.players[i].isOut() || game.players[i] == this) continue;
                        if (equal) {
                            if (game.players[i].getHandcardLimit() <= nh) return false;
                        }
                        else {
                            if (game.players[i].getHandcardLimit() < nh) return false;
                        }
                    }
                    return true;
                },
            }
            Object.assign(lib.element.player, player_mrfzfuc);

            get.tranPhase = function (str) {
                let phase = ['phaseZhunbei', 'phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard', 'phaseJieshu'];
                let cn = ['准备阶段', '判定阶段', '摸牌阶段', '出牌阶段', '弃牌阶段', '结束阶段'];
                for (let i = 0; i < phase.length; i++) {
                    if (str == phase[i]) {
                        return cn[i];
                    }
                }
            }

            game.totalmark = function (str) {
                let num = 0;
                for (let i = 0; i < game.players.length; i++) {
                    if (game.players[i].hasMark(str)) num += game.players[i].countMark(str);
                }
                return num;
            }

            game.shushuRDbet = function (min, max) {
                let mid = (min + max) / 2;
                let prob = Math.random();
                if (prob < 0.8) {
                    return Math.floor(Math.random() * (max - mid + 1)) + mid;
                } else {
                    return Math.floor(Math.random() * (mid - min + 1)) + min;
                }
            }

            game.RDNbet = function (min, max) {
                let rand = 0;
                for (let i = 0; i < 6; i += 1) {
                    rand += Math.random();
                }
                rand = rand / 6;
                return Math.floor(rand * (max - min + 1) + min);
            }

            game.RDbet = function (min, max) {
                return Math.floor(Math.random() * (max - min + 1) + min);
            }

            game.mostStr = function (arr) {
                let sortedArr = arr.slice().sort();
                let maxCount = 0;
                let maxStrings = [];
                let currentCount = 1;
                let currentString = sortedArr[0];
                for (let i = 1; i <= sortedArr.length; i++) {
                    if (i < sortedArr.length && sortedArr[i] === currentString) {
                        currentCount++;
                    } else {
                        if (currentCount >= maxCount) {
                            if (currentCount > maxCount) {
                                maxStrings = [];
                            }
                            maxCount = currentCount;
                            maxStrings.push(currentString);
                        }
                        if (i < sortedArr.length) {
                            currentString = sortedArr[i];
                            currentCount = 1;
                        }
                    }
                }
                return maxStrings;
            }

            game.getGlobalmark = function (str) {
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                    var players = game.players[i];
                    if (players.hasMark(str)) num += players.countMark(str);
                }
                return num;
            }

            Array.prototype.add2 = function () {
                for (var i = 0; i < arguments.length; i++) {
                    this.push(arguments[i]);
                }
                return this;
            };

            Array.prototype.randomGet2 = function (n) {
                var arr = this.slice(0);
                for (var i = 1; i < arguments.length; i++) arr.remove(arguments[i]);
                var result = [];
                for (var i = 0; i < n; i++) {
                    var index = Math.floor(Math.random() * arr.length);
                    result.push(arr[index]);
                    arr.splice(index, 1);
                }
                return result;
            };
            var mrfzfuc = {
                AchData_tmp: {},
                //————成就列表————//
                AchList: {
                    //隐藏成就
                    FTLmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/FTL_mrfz.png',
                        name: 'FasterThanLight',
                        name2: 'FTLmrfz',
                        intro: '<b><i>‘无需先祖预示，吾辈自会探索深空’</i></b>',
                        hidden: true,
                    },

                    //胜利成就
                    lose120mrfz: {
                        image: 'extension/明日方舟/image/gloryroad/lose120_mrfz.png',
                        name: '千锤百炼的棋手',
                        name2: 'lose120mrfz',
                        intro: '在身份局以任意身份累计失败120场',
                        char: false,
                    },

                    win100mrfz: {
                        image: 'extension/明日方舟/image/gloryroad/win100_mrfz.png',
                        name: '百日的思索与决策',
                        name2: 'win100mrfz',
                        intro: '在身份局以任意身份累计获得100场胜利',
                        char: false,
                    },

                    //干员专属成就
                    wugenzhiyumrfz: {
                        image: 'extension/明日方舟/image/gloryroad/wugenzhiyu_mrfz.png',
                        name: '无根之雨',
                        name2: 'wugenzhiyumrfz',
                        //color:'#65aa64',
                        intro: '使用缪尔赛思作为内奸获得一局游戏的胜利',
                    },
                    huizhangmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/huizhang_mrfz.png',
                        name: '徽章',
                        name2: 'huizhangmrfz',
                        //color:'#594b72',
                        intro: '使用涤火杰西卡胜利一局（内奸除外）且你和队友均未阵亡',
                    },
                    shengshengbuximrfz: {
                        image: 'extension/明日方舟/image/gloryroad/shengshengbuxi_mrfz.png',
                        name: '生生不息',
                        name2: 'shengshengbuximrfz',
                        intro: '在身份模式使用麦哲伦在一局游戏中发动3次【勘查】且于一回合内造成至少5点伤害',
                    },
                    nancaiderenmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/nancaideren_mrfz.png',
                        name: '难猜的人',
                        name2: 'nancaiderenmrfz',
                        intro: '在身份模式使用银灰在一局游戏中因【雪变】造成两次伤害',
                    },
                    denghuoweimingmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/denghuoweiming_mrfz.png',
                        name: '灯火微明',
                        name2: 'denghuoweimingmrfz',
                        intro: '在身份模式使用艾丽妮在一局游戏中发动过3次【执灯】且每次至少有两名其他角色因此摸牌',
                    },
                    zongxiazhiyuanmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/zongxiazhiyuan_mrfz.png',
                        name: '总辖之愿',
                        name2: 'zongxiazhiyuanmrfz',
                        intro: '使用克丽斯腾作为主公开局，在自己死亡的情况下获得胜利',
                    },
                    huoshanmrfz: {
                        image: 'extension/明日方舟/image/gloryroad/huoshan_mrfz.png',
                        name: '火山',
                        name2: 'huoshanmrfz',
                        intro: '使用艾雅法拉于身份模式在一回合内造成至少5点伤害',
                    },
                    duzouqumrfz: {
                        image: 'extension/明日方舟/image/gloryroad/duzouqu_mrfz.png',
                        name: '独奏曲',
                        name2: 'duzouqumrfz',
                        intro: '使用号角于身份模式胜利（内奸除外）且胜利时队友均死亡',
                    },
                },

                setBgI: function () {
                    if (lib.config.ChangeBgI_mrfz) var bgI = lib.config.ChangeBgI_mrfz
                    if (bgI && bgI != 'noBgI') {
                        ui.background.setBackgroundImage('extension/明日方舟/image/background/background' + bgI + '.jpg');
                    }
                    else {
                        ui.background.setBackgroundImage('image/background/' + lib.config.image_background + '.jpg');
                    }
                },

                GameDataTotal: function (result, mode) {
                    let obj = lib.config.gameRecord;
                    let total = 0;

                    for (let m in obj) {
                        if (mode && m !== mode) continue;
                        if (obj[m].hasOwnProperty('data')) {
                            for (let role in obj[m].data) {
                                if (Array.isArray(obj[m].data[role])) {
                                    if (!result || result === 'win') total += obj[m].data[role][0];
                                    if (!result || result === 'lose') total += obj[m].data[role][1];
                                } else if (typeof obj[m].data[role] === 'object') {
                                    for (let subRole in obj[m].data[role]) {
                                        if (!result || result === 'win') total += obj[m].data[role][subRole][0];
                                        if (!result || result === 'lose') total += obj[m].data[role][subRole][1];
                                    }
                                }
                            }
                        }
                    }

                    return total;
                },

                DeleteOrGetAllAch: function (bool) {
                    if (bool == undefined) bool = false;
                    for (var key in mrfzfuc.AchList) {
                        game.saveConfig(mrfzfuc.AchList[key].name2, bool);
                    }
                },

                ShowGetAch: function (image, str) {
                    if (str == undefined) str = image;
                    image = lib.assetURL + mrfzfuc.AchList[image].image;
                    str = mrfzfuc.AchList[str];

                    var audio = new Audio('extension/明日方舟/image/gloryroad/getSKZ_mrfz.mp3');
                    audio.play();
                    lib.config.AchList_mrfz[str.name2] = true;

                    game.saveConfig(str.name2, true);

                    var div = document.createElement('div');

                    //背景图片设置
                    div.style.backgroundImage = 'url(' + lib.assetURL + 'extension/明日方舟/image/gloryroad/getSKZ2_mrfz.png)';
                    div.style.backgroundSize = 'cover';

                    // 创建图片
                    var img = document.createElement('img');

                    img.src = image;
                    img.style.width = '60px';
                    img.style.height = '60px';
                    img.style.left = '0px';

                    div.appendChild(img);

                    //创建文本
                    var text = document.createElement('div');

                    text.innerHTML = str.name;

                    text.style.textAlign = 'center';
                    text.style.lineHeight = '50px';
                    text.style.bottom = '0px';

                    div.appendChild(text);

                    // 设置div的样式
                    div.id = 'ShowGetAch';
                    div.className = 'ShowGetAch';
                    div.style.zIndex = '25';
                    div.style.position = 'fixed';
                    div.style.right = '0px';
                    //div.style.top = '100px';
                    div.style.width = '200px';
                    div.style.height = '50px';
                    div.style.padding = '10px';
                    div.title = str.intro;

                    var ShowGetAchElements = document.getElementsByClassName('ShowGetAch');
                    if (ShowGetAchElements.length > 0) {
                        var lastElement = ShowGetAchElements[ShowGetAchElements.length - 1];
                        var rect = lastElement.getBoundingClientRect();
                        div.style.top = (rect.bottom + 10) + 'px';
                    } else {
                        div.style.top = '100px';
                    }

                    document.body.appendChild(div);

                    var timer = setTimeout(function () {
                        document.body.removeChild(div);
                    }, 5000);
                    div.addEventListener('mouseover', function () {
                        clearTimeout(timer);
                    });
                    div.addEventListener('mouseout', function () {
                        timer = setTimeout(function () {
                            document.body.removeChild(div);
                        }, 5000);
                    });
                },

                ChangeAchList: function () {
                    let achlist = mrfzfuc.AchList;
                    for (let key in achlist) {
                        if (!achlist[key].name) continue;
                        if (achlist[key].name.indexOf('『') !== 0) {
                            achlist[key].name = '『' + achlist[key].name + '』';
                        }
                    }
                },

                ShowAchievement: function (imagePath, content) {
                    imagePath = lib.assetURL + imagePath;
                    if (typeof content === 'function') {
                        content = content();
                    }

                    if (document.getElementById('ShowAchievement')) {
                        return;
                    }

                    let dialog = mrfzfuc.createDialog(imagePath);

                    let title = document.createElement('h1');
                    title.textContent = '光荣之路';
                    title.style.textAlign = 'center';
                    dialog.appendChild(title);

                    let contentContainer = document.createElement('div');
                    contentContainer.style.display = 'flex';
                    contentContainer.style.flexWrap = 'wrap';

                    mrfzfuc.ChangeAchList();
                    for (var key in content) {
                        let contentItem = mrfzfuc.createContentItem(content[key]);
                        contentItem.style.marginLeft = '40px';
                        contentItem.style.marginTop = '40px';
                        contentItem.style.cssText += ':not(:first-child)';

                        contentContainer.appendChild(contentItem);
                    }

                    dialog.appendChild(contentContainer);

                    let closeButton = mrfzfuc.createCloseButton(dialog);
                    dialog.appendChild(closeButton);

                    let showButton = document.createElement('button');
                    showButton.textContent = '查看成就列表';
                    showButton.style.cssText = 'position: absolute; left: 10px; top: 10px;';

                    showButton.onclick = function () {
                        if (document.getElementById('showlist')) {
                            return;
                        }
                        var achListDialog = document.createElement('div');
                        achListDialog.id = 'showlist';
                        achListDialog.style.cssText = 'width: 50%; height: 50%; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); border: 1px solid black; padding: 10px; boxSizing: border-box; overflow:auto;';
                        achListDialog.style.zIndex = '30';
                        achListDialog.style.background = 'rgba(0, 0, 0, 0.8)';

                        let title2 = document.createElement('h3');
                        title2.textContent = '未解锁成就';
                        title2.style.textAlign = 'center';
                        achListDialog.appendChild(title2);

                        for (var key in mrfzfuc.AchList) {
                            if (mrfzfuc.AchList[key].hidden == true) continue;
                            if (lib.config.AchList_mrfz[key] == false) {
                                var achListItem_no = document.createElement('p');
                                achListItem_no.innerHTML = mrfzfuc.AchList[key].name + ':' + mrfzfuc.AchList[key].intro;
                                achListDialog.appendChild(achListItem_no);
                            }
                        }

                        let title3 = document.createElement('h3');
                        title3.textContent = '已解锁成就';
                        title3.style.textAlign = 'center';
                        achListDialog.appendChild(title3);

                        for (var key in mrfzfuc.AchList) {
                            if (lib.config.AchList_mrfz[key] == true) {
                                var achListItem_yes = document.createElement('p');
                                achListItem_yes.innerHTML = mrfzfuc.AchList[key].name + ':' + mrfzfuc.AchList[key].intro;
                                achListDialog.appendChild(achListItem_yes);
                            }
                        }

                        document.body.appendChild(achListDialog);

                        var closeAchListButton = document.createElement('button');
                        closeAchListButton.textContent = '关闭';
                        closeAchListButton.style.cssText = 'position: absolute; right: 10px; top: 10px;';
                        closeAchListButton.onclick = function () {
                            document.body.removeChild(achListDialog);
                        };

                        achListDialog.appendChild(closeAchListButton);
                    };

                    dialog.appendChild(showButton);

                    document.body.appendChild(dialog);
                    //console.log(dialog);
                },

                createDialog: function (imagePath) {
                    let dialog = document.createElement('div');
                    dialog.id = 'ShowAchievement';
                    dialog.style.cssText = 'width: 75%; height: 75%; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); border: 1px solid black; padding: 10px; boxSizing: border-box; overflow:auto;';
                    dialog.style.zIndex = '20';
                    dialog.style.backgroundImage = 'linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(' + imagePath + ')';
                    dialog.style.backgroundSize = 'cover';
                    return dialog;
                },

                createContentItem: function (contentObj) {
                    let contentItem = document.createElement('div');
                    contentItem.style.cssText = 'width:300px;height:150px;display:flex;flex-direction:row;align-items:center;justify-content:flex-start;position:relative';
                    if (contentObj.hidden == true) contentItem.style.background = 'rgba(255,215,0,0.3)';
                    else contentItem.style.background = 'rgba(249,249,249,0.3)';

                    let imageElement = document.createElement('img');
                    imageElement.src = lib.assetURL + contentObj.image;
                    imageElement.style.cssText = 'width:100px;height:100px;display:flex;align-items:center;justify-content:center;position:absolute;left:10px;top:25px';

                    let textContainer = document.createElement('div');
                    textContainer.style.cssText = 'display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;left:120px';

                    let nameElement = document.createElement('p');
                    nameElement.innerHTML = contentObj.name;
                    nameElement.style.cssText = 'display:flex;align-items:center;justify-content:center';

                    let introElement = document.createElement('p');
                    introElement.innerHTML = contentObj.intro;
                    introElement.style.cssText = 'display:flex;align-items:center;justify-content:center;margin-top:2px';

                    textContainer.appendChild(nameElement);
                    textContainer.appendChild(introElement);

                    contentItem.appendChild(imageElement);
                    contentItem.appendChild(textContainer);

                    return contentItem;
                },

                createCloseButton: function (dialog) {
                    let closeButton = document.createElement('button');
                    closeButton.textContent = 'X';
                    closeButton.style.cssText = 'position: absolute; right: 10px; top: 10px;';

                    closeButton.onclick = function () {
                        document.body.removeChild(dialog);
                    };

                    return closeButton;
                },

                getRandomColor: function () {
                    var r = Math.floor(Math.random() * 256);
                    var g = Math.floor(Math.random() * 256);
                    var b = Math.floor(Math.random() * 256);
                    var color = "rgb(" + r + "," + g + "," + b + ")";
                    return color;
                },

                setAudio: async function (str) {
                    let total = 0, count = 0, noaudio = 0;
                    if (typeof str !== 'string') str = 'CN';

                    let startTime = Date.now();

                    let files = await new Promise((resolve, reject) => {
                        game.getFileList('extension/明日方舟/audio/' + str, function (folders, files) {
                            resolve(files);
                        }, function () {
                            reject();
                        });
                    });

                    for (let key of Object.keys(lib.skill)) {
                        if (key.endsWith('mrfz')) {
                            total++;
                            if (!lib.skill[key].audio) {
                                noaudio++;
                                continue;
                            }
                            let audioValue = lib.skill[key].audio;
                            if (typeof audioValue === 'number') {
                                let newAudioValue = 'ext:明日方舟/audio/' + str + ':' + audioValue;
                                let audioFile = key + audioValue + '.mp3';

                                if (files.includes(audioFile)) {
                                    lib.skill[key].audio = newAudioValue;
                                    count++;
                                }
                                else {
                                    lib.skill[key].audio = 'ext:明日方舟/audio/CN:2';
                                }
                            }
                        }
                    }

                    let endTime = Date.now();
                    let loadTime = endTime - startTime;

                    console.log('load', str, 'audio success, loadTime:', loadTime, 'ms! Correct loading files', count, '(total:', total, ').', noaudio, 'audio is undefined!');
                },

                showAlertWithTimeout: function (str, time) {
                    var modal = document.createElement('div');
                    modal.style.position = 'fixed';
                    modal.style.top = '50%';
                    modal.style.left = '50%';
                    modal.style.transform = 'translate(-50%, -50%)';
                    modal.style.backgroundColor = 'green';
                    modal.style.padding = '20px';
                    modal.style.textAlign = 'center';
                    modal.style.zIndex = '1000';
                    modal.textContent = str;

                    document.body.appendChild(modal);

                    setTimeout(function () {
                        modal.style.display = 'none';
                    }, time);
                },

                showCopyDialog: function (str) {
                    var dialog = document.createElement('div');
                    dialog.setAttribute('id', 'copyDialogmrfz');
                    if (typeof str == undefined) dialog.textContent = '正在复制，请稍后...';
                    else dialog.textContent = str;
                    dialog.style.position = 'fixed';
                    dialog.style.left = '50%';
                    dialog.style.top = '50%';
                    dialog.style.transform = 'translate(-50%, -50%)';
                    dialog.style.padding = '20px';
                    dialog.style.backgroundColor = '#fff';
                    dialog.style.borderRadius = '5px';

                    document.body.appendChild(dialog);
                },

                hideCopyDialog: function () {
                    var dialog = document.getElementById('copyDialogmrfz');
                    if (dialog) {
                        document.body.removeChild(dialog);
                    }
                },

                copyText: function (str) {
                    var textArea = document.createElement("textarea");
                    if (str == 1) textArea.value = "https://prts.wiki/";
                    else if (str == 2) textArea.value = "104537053";
                    else if (str == 3) textArea.value = 'BV1Yh411L72H';
                    else if (str == 4) textArea.value = 'https://www.bilibili.com/bangumi/play/ss43057';
                    else if (str == 5) textArea.value = 'https://pan.baidu.com/s/1ZER0c4qk8oJ4BlMEp_5n3w?pwd=2333';
                    else textArea.value = str;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand("copy");
                    document.body.removeChild(textArea);
                    alert('复制成功！');
                },

                progress: function () {
                    if (document.getElementById('progressCopy')) {
                        return;
                    }
                    var dialog = document.createElement('div');
                    dialog.id = 'progressCopy';
                    dialog.style.position = 'fixed';
                    dialog.style.top = '50%';
                    dialog.style.left = '50%';
                    dialog.style.transform = 'translate(-50%, -50%)';
                    dialog.style.background = '#f8f9fa';
                    dialog.style.padding = '10px';
                    dialog.style.zIndex = '10000';
                    dialog.innerHTML = '复制程序初始化...';
                    document.body.appendChild(dialog);

                    var isMouseDown = false;
                    var offset = { x: 0, y: 0 };
                    dialog.addEventListener('mousedown', function (e) {
                        isMouseDown = true;
                        offset.x = e.clientX - dialog.getBoundingClientRect().left;
                        offset.y = e.clientY - dialog.getBoundingClientRect().top;
                    });
                    window.addEventListener('mousemove', function (e) {
                        if (isMouseDown) {
                            dialog.style.left = (e.clientX - offset.x) + 'px';
                            dialog.style.top = (e.clientY - offset.y) + 'px';
                        }
                    });
                    window.addEventListener('mouseup', function () {
                        isMouseDown = false;
                    });
                },

                copyFiles: function (srcDir, destDir) {
                    var totalFiles = 0;
                    var copiedFiles = 0;
                    mrfzfuc.progress();

                    function copyFile(srcPath, destPath, filename) {
                        game.readFile(srcPath + '/' + filename, function (data) {
                            game.writeFile(data, destPath, filename, function () {
                                copiedFiles++;
                                var dialog = document.getElementById('progressCopy');
                                if (copiedFiles < totalFiles && dialog) dialog.innerHTML = '复制进度：' + copiedFiles + '/' + totalFiles;
                                else if (dialog) dialog.innerHTML = '复制完成！';
                                //console.log(copiedFiles);
                                if (copiedFiles === totalFiles) {
                                    setTimeout(() => {
                                        document.body.removeChild(dialog);
                                        if (confirm('复制完成，是否重启游戏？')) {
                                            game.reload();
                                        }
                                    }, 1000);
                                }
                            });
                        }, function (error) {
                            throw new Error('读取文件失败：' + error);
                        });
                    }

                    function copyDirectory(srcDir, destDir) {
                        game.getFileList(srcDir, function (folders, files) {
                            totalFiles += files.length;
                            game.ensureDirectory(destDir, function () {
                                for (var i = 0; i < files.length; i++) {
                                    copyFile(srcDir, destDir, files[i]);
                                }
                                for (var i = 0; i < folders.length; i++) {
                                    copyDirectory(srcDir + '/' + folders[i], destDir + '/' + folders[i]);
                                }
                            });
                        }, function (error) {
                            throw new Error('获取文件列表失败：' + error);
                        });
                    }

                    try {
                        copyDirectory(srcDir, destDir);
                    } catch (error) {
                        console.error(error);
                    }
                },

                getEvtParent: function (player, event) {
                    var str = '';
                    str += get.translation(event) + '</br>';
                    for (var i = 1; i <= 10; i++) str += get.translation(event.getParent(i)) + '</br>';
                    game.log(str);
                    player.popup(str);
                },

                canRespond: function (card1, card2) {
                    if (typeof card1 === undefined || typeof card2 === undefined) return false;
                    var info1 = get.name(card1);
                    var info2 = get.name(card2);
                    var tmp_bool = false;
                    if ((info1 == 'sha' || info1 == 'wanjian') && info2 == 'shan') tmp_bool = true;
                    if ((info1 == 'juedou' || info1 == 'nanman') && info2 == 'sha') tmp_bool = true;
                    if (get.type(card1) == 'trick' && info2 == 'wuxie') tmp_bool = true;
                    var str = (tmp_bool == true ? '' : '不') + '能响应';
                    info1 = '<font color=rgb(255,255,122)>【' + get.translation(info1) + '】</font>';
                    info2 = '<font color=rgb(255,255,122)>【' + get.translation(info2) + '】</font>';
                    game.log(info2, str, info1);
                    return tmp_bool;
                },

                isBanEquips: function (str, player) {
                    if (typeof str === undefined) return false;
                    if (isNaN(str) && !Array.isArray(str)) {
                        let num = str.match(/\d+/);
                        if (num !== null) {
                            str = num[0];
                        }
                    }
                    var disabledCardSkill = function (player) {
                        var card = player.getCards('e', function (card) {
                            return get.subtype(card) != 'equip5';
                        });
                        if (!card) return;
                        for (var i = 0; i < card.length; i++) {
                            var name = get.translation(card[i]);
                            if (get.info(card[i]).hasOwnProperty('skills')) {
                                var info = get.info(card[i]).skills;
                                for (var j = 0; j < info.length; j++) {
                                    var info2 = get.skillInfoTranslation(info[j]);
                                    if (info2.includes('冰') && name.includes('冰')) return false;
                                }
                            }
                            else {
                                var info = get.translation(card[i]) + '_info';
                                var trans_info = get.translation(info);
                                if (trans_info.includes('冰') && name.includes('冰')) return false;
                            }
                        }
                        return true;
                    };
                    var hasSkillTagArr = function (tag, hidden, arg, globalskill, player) {
                        var skills = player.getSkills(hidden);
                        if (globalskill) {
                            skills.addArray(lib.skill.global);
                        }
                        game.expandSkills(skills);
                        for (var i = 0; i < skills.length; i++) {
                            var info = lib.skill[skills[i]];
                            if (info && info.ai) {
                                if (info.ai.skillTagFilter && info.ai[tag] &&
                                    info.ai.skillTagFilter(player, tag, arg) === false) continue;
                                if (Array.isArray(info.ai[tag])) {
                                    for (var j = 0; j < info.ai[tag].length; j++) {
                                        var arr = info.ai[tag];
                                        if (arr[j] == arg) return true;
                                    }
                                }
                                if (typeof info.ai[tag] == 'string') {
                                    if (info.ai[tag] == arg) return true;
                                }
                            }
                        }
                        return false;
                    };
                    return hasSkillTagArr('igequips', null, str, null, player) && disabledCardSkill(player);
                },

                showDiv: function (str) {
                    if (str == 1) str = '概念解释：</br>『回合轮』：指一名角色上一轮其回合开始（若本轮为第一轮则改为本轮开始时）到其本轮回合开始这一时间段。';

                    var modal = document.createElement("div");
                    var content = document.createElement("div");
                    var closeBtn = document.createElement("span");
                    var text = document.createElement("p");

                    modal.style.display = "block";
                    modal.style.position = "fixed";
                    modal.style.zIndex = "99";
                    modal.style.left = "50%";
                    modal.style.top = "50%";
                    modal.style.transform = "translate(-50%, -50%)";
                    modal.style.width = "100%";
                    modal.style.height = "100%";
                    modal.style.overflow = "auto";
                    modal.style.backgroundColor = "rgba(0,0,0,0.2)";

                    content.style.backgroundColor = "rgba(255,255,255,0.8)";
                    content.style.left = "50%";
                    content.style.top = "50%";
                    content.style.width = (str.length * 10) + "px";
                    content.style.height = "100px";
                    content.style.transform = "translate(-50%, -50%)";
                    content.style.margin = "auto";
                    content.style.padding = "20px";
                    content.style.border = "1px solid #888";

                    closeBtn.innerHTML = "&times;";
                    closeBtn.style.color = "#FFFFFF";
                    closeBtn.style.float = "right";
                    closeBtn.style.fontSize = "28px";
                    closeBtn.style.fontWeight = "bold";
                    closeBtn.style.cursor = "pointer";

                    text.innerHTML = str;
                    text.style.color = 'black';

                    content.appendChild(closeBtn);
                    content.appendChild(text);
                    modal.appendChild(content);
                    document.body.appendChild(modal);

                    closeBtn.onclick = function () {
                        modal.style.display = "none";
                    }

                    window.onclick = function (event) {
                        if (event.target == modal) {
                            modal.style.display = "none";
                        }
                    }

                },
            };
            lib.mrfzfuc = mrfzfuc;
            window.mrfzfuc = mrfzfuc;

            //————更新日志————//
            //来源于官将重修
            if (lib.config.extension_明日方舟_changelog != lib.extensionPack.明日方舟.version) {
                lib.game.showChangeLog = function () {
                    let str = ['好位置！',
                    ];
                    let ul = document.createElement('ul'), players = ['zhisongmrfz', 'cimeimrfz', 'hongmrfz'], cards = [];
                    ul.style.textAlign = 'left';
                    for (let i = 0; i < str.length; i++) {
                        let li = document.createElement('li');
                        li.innerHTML = str[i];
                        ul.appendChild(li);
                    }
                    game.saveExtensionConfig('明日方舟', 'changelog', lib.extensionPack.明日方舟.version);
                    let dialog = ui.create.dialog('明日方舟 ' + lib.extensionPack.明日方舟.version + ' 更新内容：', 'hidden');
                    let lic = ui.create.div(dialog.content);
                    lic.style.display = 'block';
                    ul.style.display = 'inline-block';
                    ul.style.marginLeft = '-40px';
                    lic.appendChild(ul);
                    if (players.length) {
                        dialog.addSmall([players, 'character']);
                        dialog.classList.add('forcebutton');
                        dialog.classList.add('withbg');
                    }
                    if (cards.length) {
                        for (let i = 0; i < cards.length; i++) {
                            cards[i] = [get.translation(get.type(cards[i])), '', cards[i]]
                        }
                        dialog.addSmall([cards, 'vcard']);
                        dialog.classList.add('forcebutton');
                        dialog.classList.add('withbg');
                    }
                    dialog.open();
                    let hidden = false;
                    if (!ui.auto.classList.contains('hidden')) {
                        ui.auto.hide();
                        hidden = true;
                    }
                    game.pause();
                    let control = ui.create.control('确定', function () {
                        dialog.close();
                        control.close();
                        if (hidden) ui.auto.show();
                        game.resume();
                    });
                    lib.init.onfree();
                };
            }
            if (mrfz.enable) {
                //————卡牌————//
                game.import('card', function () {
                    var mrfzcard = {
                        name: 'mrfzcard',
                        connect: true,
                        card: {
                            //战车的DP-27
                            DP27mrfz: {
                                image: 'ext:明日方舟/image/card/DP27mrfz.jpg',
                                type: 'equip',
                                subtype: 'equip1',
                                destroy: true,
                                derivation: 'zhanchemrfz',
                                distance: {
                                    attackFrom: -3,
                                },
                                skills: ["DP27mrfz_skill"],
                                ai: {
                                    basic: {
                                        equipValue: 8,
                                    },
                                },
                            },

                            //鸿雪的打字机
                            dazijimrfz: {
                                image: 'ext:明日方舟/image/card/dazijimrfz.jpg',
                                type: "equip",
                                subtype: "equip1",
                                destroy: true,
                                derivation: 'hongxuemrfz',
                                distance: {
                                    attackFrom: -2,
                                },
                                ai: {
                                    basic: {
                                        equipValue: 5,
                                        order: function (card, player) {
                                            if (player && player.hasSkillTag('reverseEquip')) {
                                                return 8.5 - get.equipValue(card, player) / 20;
                                            }
                                            else {
                                                return 8 + get.equipValue(card, player) / 20;
                                            }
                                        },
                                        useful: 2,
                                        value: function (card, player, index, method) {
                                            if (player.isDisabled(get.subtype(card))) return 0.01;
                                            var value = 0;
                                            var info = get.info(card);
                                            var current = player.getEquip(info.subtype);
                                            if (current && card != current) {
                                                value = get.value(current, player);
                                            }
                                            var equipValue = info.ai.equipValue;
                                            if (equipValue == undefined) {
                                                equipValue = info.ai.basic.equipValue;
                                            }
                                            if (typeof equipValue == 'function') {
                                                if (method == 'raw') return equipValue(card, player);
                                                if (method == 'raw2') return equipValue(card, player) - value;
                                                return Math.max(0.1, equipValue(card, player) - value);
                                            }
                                            if (typeof equipValue != 'number') equipValue = 0;
                                            if (method == 'raw') return equipValue;
                                            if (method == 'raw2') return equipValue - value;
                                            return Math.max(0.1, equipValue - value);
                                        },
                                    },
                                    result: {
                                        target: function (player, target, card) {
                                            return get.equipResult(player, target, card.name);
                                        },
                                    },
                                },
                                skills: ["dazijimrfzskill"],
                                enable: true,
                                selectTarget: -1,
                                filterTarget: function (card, player, target) {
                                    return target == player;
                                },
                                modTarget: true,
                                allowMultiple: false,
                                content: function () {
                                    if (cards.length && get.position(cards[0], true) == 'o') target.equip(cards[0]);
                                },
                                toself: true,
                                fullimage: true,
                            },
                            //大铁老师的支援装备
                            baitiemrfzcard1: {
                                image: 'ext:明日方舟/image/card/baitiemrfzcard1.jpg',
                                type: "equip",
                                subtype: "equip5",
                                skills: ['baitiemrfzcard1_skill'],
                                ai: {
                                    basic: {
                                        equipValue: 7,
                                    }
                                },
                            },
                            baitiemrfzcard2: {
                                image: 'ext:明日方舟/image/card/baitiemrfzcard2.jpg',
                                type: "equip",
                                subtype: "equip5",
                                skills: ['baitiemrfzcard2_skill'],
                                ai: {
                                    basic: {
                                        equipValue: 7.5,
                                    }
                                },
                            },
                            baitiemrfzcard3: {
                                image: 'ext:明日方舟/image/card/baitiemrfzcard3.jpg',
                                type: "equip",
                                subtype: "equip5",
                                skills: ['baitiemrfzcard3_skill'],
                                ai: {
                                    basic: {
                                        equipValue: 7.8,
                                    }
                                },
                            },
                        },

                        skill: {
                            dazijimrfzskill: {
                                trigger: {
                                    player: "useCard",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    if (!player.hasSkill('ruibimrfz')) return false;
                                    if (event.dazijimrfzskill_buff || !event.targets.length || player.hasSkill('dazijimrfz_buff')) return false;
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('dazijimrfzskill_buff', 'phaseUseAfter');
                                    trigger.dazijimrfzskill_buff = player;
                                },
                                subSkill: {
                                    buff: {
                                        trigger: {
                                            global: "useCardToTargeted",
                                        },
                                        charlotte: true,
                                        popup: false,
                                        lastDo: true,
                                        filter: function (event, player) {
                                            return (event.parent.dazijimrfzskill_buff == player && event.targets.length == event.parent.triggeredTargets4.length);
                                        },
                                        content: function () {
                                            trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                            trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                        },
                                        sub: true,
                                    },
                                },
                            },
                            baitiemrfzcardad: { audio: 'ext:明日方舟/audio:4', },
                            baitiemrfzcard1_skill: {
                                trigger: { source: 'damageBegin3' },
                                filter: function (event, player) {
                                    return event.num > 1 && event.player != player;
                                },
                                prompt: '是否令此伤害+1？',
                                content: function () {
                                    trigger.num++;
                                    player.logSkill('baitiemrfzcardad', trigger.player);
                                },
                            },
                            baitiemrfzcard2_skill: {
                                trigger: { player: 'phaseDiscardBefore' },
                                forced: true,
                                content: function () {
                                    var next = player.phaseUse();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                    game.log(player, '额外执行了一个出牌阶段');
                                    player.logSkill('baitiemrfzcardad');
                                    player.draw();
                                },
                            },
                            baitiemrfzcard3_skill: {
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.getCards('h', function (card) {
                                        return get.tag(card, 'damage');
                                    }).length > player.countSkill('baitiemrfzcard3_skill');
                                },
                                filterCard: function (card) {
                                    return get.tag(card, 'damage');
                                },
                                selectCard: function () {
                                    var player = _status.event.player;
                                    return player.countSkill('baitiemrfzcard3_skill') + 1;
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && player.inRange(target);
                                },
                                position: 'h',
                                prompt: function () {
                                    var player = _status.event.player;
                                    return '你可以弃置' + (player.countSkill('baitiemrfzcard3_skill') + 1) + '张带有伤害类标签的牌并对攻击范围内的一名角色造成一点伤害';
                                },
                                content: function () {
                                    target.damage();
                                    player.logSkill('baitiemrfzcardad', target);
                                },
                                ai: {
                                    order: 6,
                                    result: {
                                        target: -1,
                                    },
                                },
                            },
                            //DP27
                            DP27mrfz_skill: {
                                mod: {
                                    cardnature: function (card, player) {
                                        var history = player.getHistory('useCard'), tmp_bool = false;
                                        for (var i = 0; i < history.length; i++) {
                                            if (history[i].card.name == 'sha') {
                                                tmp_bool = true;
                                                break;
                                            }
                                        }
                                        if (!card.nature && card.name == 'sha' && tmp_bool) return 'fire';
                                    },
                                },
                                trigger: { player: 'useCard' },
                                forced: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    if (!event.card) return false;
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    'step 0'
                                    var history = player.getHistory('useCard'), tmp_bool = false;
                                    for (var i = 0; i < history.length; i++) {
                                        if (!history[i - 1]) continue;
                                        if (history[i - 1].card.name == 'sha') {
                                            tmp_bool = true;
                                            break;
                                        }
                                    }
                                    if (tmp_bool == false) event.goto(1);
                                    else if (!trigger.card.nature) {
                                        trigger.card.nature = 'fire';
                                    }
                                    'step 1'
                                    if (game.hasNature(trigger.card)) {
                                        if (!trigger.baseDamage) trigger.baseDamage = 1;
                                        trigger.baseDamage += 1;
                                    }
                                },
                                group: "DP27mrfz_skill_wushi",
                                subSkill: {
                                    wushi: {
                                        audio: true,
                                        trigger: {
                                            player: "useCardToPlayered",
                                        },
                                        filter: function (event) {
                                            return event.card && event.card.name == 'sha' && event.card.nature;
                                        },
                                        forced: true,
                                        logTarget: "target",
                                        content: function () {
                                            trigger.target.addTempSkill('qinggang2');
                                            trigger.target.storage.qinggang2.add(trigger.card);
                                            trigger.target.markSkill('qinggang2');
                                        },
                                        ai: {
                                            "unequip_ai": true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha' && game.hasNature(arg)) return true;
                                                return false;
                                            },
                                        },
                                    },
                                },
                            },
                        },

                        translate: {
                            dazijimrfz: "打字机",
                            "dazijimrfz_info": "当你使用【杀】指定目标时，你可以令此【杀】结算两次。（此装备离开你的装备区时，销毁之）",
                            baitiemrfzcardad: '支援装备',
                            baitiemrfzcard1: "攻击型平台",
                            baitiemrfzcard1_skill: '援备',
                            'baitiemrfzcard1_info': '当你造成至少两点伤害时，你可以令此伤害+1。',
                            baitiemrfzcard2: "支援型平台",
                            baitiemrfzcard2_skill: '援备',
                            'baitiemrfzcard2_info': '锁定技，弃牌阶段开始时，你摸一张牌并额外执行一个出牌阶段。',
                            baitiemrfzcard3: "铁钳号",
                            baitiemrfzcard3_skill: "援备",
                            'baitiemrfzcard3_info': '出牌阶段你可以弃置X张带有伤害类标签的牌，然后选择一名你攻击范围内的其他角色，对其造成一点伤害（X=此技能本回合使用数+1）。',
                            DP27mrfz: 'DP27',
                            DP27mrfz_skill: 'DP27',
                            "DP27mrfz_info": '①锁定技，若你于本回合使用过【杀】，则你的非属性【杀】均视为火【杀】。②锁定技，你的属性杀无视防具且伤害基数+1。',
                        }, list: [],
                    };
                    return mrfzcard;
                });
                lib.translate['mrfzcard_card_config'] = '明日方舟';
                lib.config.all.cards.push('mrfzcard');
                if (!lib.config.cards.contains('mrfzcard')) lib.config.cards.push('mrfzcard');

                //————武将————//

                //势力分类

                //伊比利亚//    
                lib.config.group_mrfz_yibiliyamrfz = ['ailinimrfz', 'liumingmrfz', 'jicimrfz'];
                //罗德岛//
                lib.config.group_mrfz_luodedaomrfz = ['hedeleimrfz', 'shuangxingmrfz', 'spamiyamrfz', 'yineisimrfz', 'semrfz', 'hongxuemrfz', 'amiyamrfz', 'niyanmrfz', 'chengshanmrfz', 'kaierximrfz', 'keebomrfz', 'wendimrfz', 'spzzxpmrfz', 'spjiaweiermrfz'];
                //罗德岛- SWEEP//
                lib.config.group_mrfz_SWEEPmrfz = ['hongmrfz'];
                //罗德岛精英干员//
                lib.config.group_mrfz_luodedaojymrfz = ['acemrfz', 'midiexiangmrfz', 'huangmrfz'];
                //莱塔尼亚//
                lib.config.group_mrfz_laitaniyamrfz = ['zhisongmrfz', 'xiaoyangmrfz', 'kanielianmrfz', 'heijianmrfz', 'weiweiannamrfz', 'spxiaoyanmrfz'];
                //谢拉格//
                lib.config.group_mrfz_xielagemrfz = ['yinhuimrfz', 'lingzhimrfz'];
                //叙拉古//
                lib.config.group_mrfz_xulagumrfz = ['chizuimrfz', 'anjielinamrfz', 'siyemrfz', 'linglanmrfz'];
                //巴别塔//
                lib.config.group_mrfz_babietamrfz = ['wmrfz'];
                //海嗣//
                lib.config.group_mrfz_haisimrfz = ['spsikadimrfz', 'yizumikemrfz'];
                //深海猎人//
                lib.config.group_mrfz_shenhailierenmrfz = ['sikadimrfz', 'geleidiyamrfz', 'spyoulingshamrfz'];
                //企鹅物流//
                lib.config.group_mrfz_qiewuliumrfz = ['spdegoumrfz', 'nengtianshimrfz'];
                //卡西米尔//
                lib.config.group_mrfz_kaximiermrfz = ['maennamrfz', 'splinguangmrfz', 'xiaguangmrfz'];
                //哥伦比亚//
                lib.config.group_mrfz_gelunbiyamrfz = ['shanmrfz', 'huoerhaiyamrfz', 'xingjimrfz'];
                //哥伦比亚-黑钢国际//
                lib.config.group_mrfz_heigangguojimrfz = ['spjiexikamrfz', 'fulankamrfz'];
                //龙门近卫局//
                lib.config.group_mrfz_longmenmrfz = ['chenmrfz', 'xingxiongmrfz', 'spshihuaiyamrfz'];
                //维多利亚//
                lib.config.group_mrfz_weiduoliyamrfz = ['kuiyingmrfz', 'fengdimrfz', 'qinliumrfz', 'haojiaomrfz', 'baitiemrfz', 'weinamrfz','cimeimrfz'];
                //拉特兰//
                lib.config.group_mrfz_latelanmrfz = ['mositimamrfz', 'feiyameitamrfz', 'kongxianmrfz', 'spsongzangrenmrfz', 'suxinmrfz'];
                //（使徒）摩托车三人组//
                lib.config.group_mrfz_shitumrfz = ['yeyingmrfz', 'shanlingmrfz'];
                //乌萨斯//
                lib.config.group_mrfz_wusasimrfz = ['helagemrfz', 'zaolumrfz'];
                //萨尔贡//
                lib.config.group_mrfz_saergongmrfz = ['senranmrfz', 'kamimrfz'];
                //炎-岁兽//
                lib.config.group_mrfz_yansuimrfz = ['nianmrfz', 'ximrfz', 'lingmrfz', 'chongyuemrfz', 'xigymrfz'];
                //炎//
                lib.config.group_mrfz_yanguomrfz = ['qiubaimrfz', 'linmrfz'];
                //鲤氏侦探事务所//
                lib.config.group_mrfz_lishimrfz = ['amrfz', 'laolimrfz'];
                //汐斯塔
                lib.config.group_mrfz_xisitamrfz = ['heimrfz'];
                //红松林//
                lib.config.group_mrfz_hongsongqstmrfz = ['yanweimrfz', 'yuanyamrfz'];
                //东//
                lib.config.group_mrfz_dongguomrfz = ['shuiyuemrfz', 'cuoemrfz'];
                //莱茵生命//
                lib.config.group_mrfz_laiyinmrfz = ['baimianxiaomrfz', 'xingyuanmrfz', 'kelisitengmrfz', 'duoluoximrfz', 'miumiumrfz', 'yifulitemrfz', 'saileiyamrfz', 'maizhelummrfz', 'maizhelunmrfz', 'sphemomrfz'];
                //深池//
                lib.config.group_mrfz_shenchimrfz = ['spweicaomrfz'];
                //米诺斯//
                lib.config.group_mrfz_mimrfz = ['palasimrfz'];
                //萨米//
                lib.config.group_mrfz_samimrfz = ['tifengmrfz', 'bohuimrfz'];
                //前文明//
                lib.config.group_mrfz_qianmrfz = ['baocunzhemrfz'];
                //----联动干员----//
                lib.config.group_mrfz_liandongmrfz = ['ashmrfz', 'spyedaomrfz', 'zhanchemrfz', 'shanjimrfz', 'shuanghuamrfz'];

                game.import('character', function () {
                    var mrfz = {
                        name: 'mrfz',
                        connect: true,
                        characterSort: {
                            mrfz: {
                                //----普通干员----//
                                samigroupmrfz: lib.config.group_mrfz_samimrfz,

                                yibiliyamrfz: lib.config.group_mrfz_yibiliyamrfz,

                                luodedaomrfz: lib.config.group_mrfz_luodedaomrfz,

                                luodedaojymrfz: lib.config.group_mrfz_luodedaojymrfz,

                                laitaniyamrfz: lib.config.group_mrfz_laitaniyamrfz,

                                xielagemrfz: lib.config.group_mrfz_xielagemrfz,

                                xulagumrfz: lib.config.group_mrfz_xulagumrfz,

                                babietamrfz: lib.config.group_mrfz_babietamrfz,

                                haisimrfz: lib.config.group_mrfz_haisimrfz,

                                shenhailierenmrfz: lib.config.group_mrfz_shenhailierenmrfz,

                                qiewuliumrfz: lib.config.group_mrfz_qiewuliumrfz,

                                kaximiermrfz: lib.config.group_mrfz_kaximiermrfz,

                                gelunbiyamrfz: lib.config.group_mrfz_gelunbiyamrfz,

                                heigangguojimrfz: lib.config.group_mrfz_heigangguojimrfz,

                                longmenmrfz: lib.config.group_mrfz_longmenmrfz,

                                weiduoliyamrfz: lib.config.group_mrfz_weiduoliyamrfz,

                                latelanmrfz: lib.config.group_mrfz_latelanmrfz,

                                shitumrfz: lib.config.group_mrfz_shitumrfz,

                                wusasimrfz: lib.config.group_mrfz_wusasimrfz,

                                saergongmrfz: lib.config.group_mrfz_saergongmrfz,

                                yansuimrfz: lib.config.group_mrfz_yansuimrfz,

                                yanguomrfz: lib.config.group_mrfz_yanguomrfz,

                                lishimrfz: lib.config.group_mrfz_lishimrfz,

                                xisitamrfz: lib.config.group_mrfz_xisitamrfz,

                                hongsongqstmrfz: lib.config.group_mrfz_hongsongqstmrfz,

                                dongguomrfz: lib.config.group_mrfz_dongguomrfz,

                                laiyinmrfz: lib.config.group_mrfz_laiyinmrfz,

                                shenchimrfz: lib.config.group_mrfz_shenchimrfz,

                                qianwenmingmrfz: lib.config.group_mrfz_qianmrfz,

                                minuosimrfz: lib.config.group_mrfz_mimrfz,

                                liandongmrfz: lib.config.group_mrfz_liandongmrfz,

                                SWEEPmrfz:lib.config.group_mrfz_SWEEPmrfz,
                            },
                        },
                        characterTitle: {
                            haojiaomrfz: '<font color=#ed7e78>维多利亚的白狼</font>',
                            chongyuemrfz: '<font color=#FFF68F>玉门戍卫</font>',
                            lingmrfz: '<font color=#BFEFFF>千年一梦</font>',
                            nianmrfz: '<font color=#FFA500>地生五金</font>',
                            amiyamrfz: '<font color=#00868B>魔王</font>',
                            xigymrfz: '<font color=#f6b3fa>工笔入画</font>',
                            midiexiangmrfz: '<font color=#f91c01>勿忘我</font>',
                            qiubaimrfz: '<font color=#1885f2>春江逢雪</font>',
                            miumiumrfz: '<font color=#6575f1>孑然水灵</font>',
                            duoluoximrfz: '<font color=#13a022>绿野幻梦</font>',
                            sphemomrfz: '<font color=#4EEE94>伦理坚守者</font>',
                            spamiyamrfz: '<font color=#00868B>争斗在此止歇</font>',
                            kaierximrfz: '<font color=rgb(255,45,62)>旧日残影</font>',
                            geleidiyamrfz: '<font color=rgb(1,255,22)>执政官</font>',
                            spdegoumrfz: '<font color=rgb(255,25,22)>破斩桎梏</font>',
                            spshihuaiyamrfz: '<font color=#e44997>万民安生</font>',
                            spsongzangrenmrfz: '<font color#f1ca13>圣徒</font>',
                            tifengmrfz: '<font color=2942BA>永恒狩猎</font>',
                            kelisitengmrfz: '<font color=#DC143C>先驱者</font>',
                            weiweiannamrfz: '<font color=#efd02a>金盏花</font>',
                            shuangxingmrfz: '<font color=rgb(59,98,115)>理想之焰</font>',
                            spxiaoyanmrfz: '<font color=#DC143C>登山者</font>',
                            suxinmrfz: '<font color=#DC143C>感性与自由</font>',
                        },
                        dynamicTranslate: {
                            chonggoumrfz: function (player) {
                                if (player.storage.chonggoumrfz) return '摸牌阶段开始时，若你的手牌数不小于你的体力值，你可以弃置所有手牌，回复一点体力，然后摸X张牌。（X=弃置牌的数量）';
                                return '摸牌阶段开始时，若你的手牌数不小于你的体力值<span class=thundertext>且已受伤</span>，你可以弃置所有手牌，回复一点体力，然后摸X张牌。（X=弃置牌的数量<span class=thundertext>-已损失体力值</span>）';
                            },
                            kuanmrfz: function (player) {
                                if (!player.storage.kuanmrfz) return '锁定技，游戏开始时，你废除所有装备栏和判定区并摸3张牌<span class=thundertext>；判定阶段，你依次进行【乐不思蜀】和【兵粮寸断】的判定</span>；你可以将装备牌当【杀】、【闪】或【酒】使用或打出，你的装备牌不计入手牌上限。';
                                return '锁定技，游戏开始时，你废除所有装备栏和判定区并摸3张牌）；你可以将装备牌当【杀】、【闪】或【酒】使用或打出，你的装备牌不计入手牌上限。';
                            },
                            zhuguangmrfz: function (player) {
                                if (!player.storage.zhuguangmrfz_change) return '准备阶段，你可以选择一名角色，视为对其使用【决斗】，当你因此牌对其他角色造成伤害时，你可以防止此伤害，然后选择一项：①删除【苦暗】描述中蓝色的文字；②修改【逐光】的描述；③摸一张牌。';
                                return '准备阶段，你可以选择一名角色，视为对其使用【决斗】且此牌不可被其他角色响应，当你因此牌对其他角色造成伤害时，你可以选择一项：①删除【苦暗】描述中蓝色的文字；②摸两张牌。';
                            },
                            shuoguangmrfz: function (player) {
                                if (player.storage.shuoguangmrfz) return '<font color=#696969>锁定技，你跳过你的第一个弃牌阶段。</font>';
                                return '锁定技，你跳过你的第一个弃牌阶段。';
                            },
                            xunlumrfz: function (player) {
                                return '锁定技，摸牌阶段，你改为随机摸<span class=thundertext>' + player.storage.xunlumrfz_draw + '</span>至6张牌；准备阶段，你将本回合出牌阶段使用【杀】的基数随机改为<span class=firetext>' + player.storage.xunlumrfz_sha + '</span>至5次；你的手牌上限随机改为<span class=greentext>' + player.storage.xunlumrfz_h + '</span>至8张。当你造成伤害时，你可以令一个有颜色的数字+1。（有颜色的数字的最大值至多为4，且本技能中的随机生成的随机数均符合正态分布）'
                            },
                            chaoshengmrfz: function (player) {
                                if (player.countMark('jianshumrfz') == 15) return '结束阶段，若你连续<span class=thundertext>1</span>个回合没有造成过伤害，你可以摸两张牌并回复一点体力。'
                                return '结束阶段，若你连续<span class=thundertext>' + player.countMark('jianshumrfz') >= 10 && player.countMark('jianshumrfz') < 15 ? 2 : (3 - Math.floor(player.countMark('jianshumrfz') / 5)) + '</span>个回合没有造成过伤害，你可以选择摸两张牌或回复一点体力。'
                            },
                            heishimrfz: function (player) {
                                if (player.hasSkill('junumrfz_effect')) return '锁定技，你的【杀】无视防具；你对有防具的角色造成的伤害+1，对与你距离小于等于3的角色造成的伤害+1。';
                                return '锁定技，你的使用的【杀】仅能指定与你距离不大于2的角色为目标，你的【杀】无视防具；你对有防具的角色造成的伤害+1，对与你距离为1的角色造成的伤害+1。';
                            },
                            wowumrfz: function (player) {
                                if (player.countMark('wowumrfz_time') < 5) return '<span class=firetext>【劲发江潮落】</span></br>你的回合内，你每使用三张牌可视为使用一张不计入次数的【杀】，若此【杀】造成了伤害，你摸一张牌；锁定技，当你本局游戏累计发动5次【我无】时，修改此技能。';
                                return '<span class=firetext>【气收秋毫平】</span></br>每当你累计使用或打出三张牌时，你可以视为使用一张无距离限制且不计入次数的【杀】，然后你摸一张牌。';
                            },
                            xuezhanmrfz: function (player) {
                                if (!player.storage.xuezhanmrfz) return '锁定技，当你首次即将死亡时，取消之，然后你将体力值和体力上限调整至2，并摸4张牌。';
                                return '<font color=#696969>锁定技，当你首次即将死亡时，取消之，然后你将体力值和体力上限调整至2，并摸4张牌。</font>';
                            },
                            dunpaomrfz: function (player) {
                                if (!player.storage.dunpaomrfz) return '锁定技，你的攻击范围+5，你不能指定与你距离为1的角色为目标；当你使用【杀】对距离你大于1的角色造成伤害时，该角色进行判断，若不为红色，此伤害+1；回合开始时，你可以修改此技能。';
                                return '锁定技，你的手牌上限+2。';
                            },
                            biaohaomrfz: function (player) {
                                return '蓄力技（<font color=#e00500>' + player.countMark('charge') + '</font>/4），出牌阶段限两次，你可以弃置一张带有伤害类标签的牌，然后你增加一点蓄力值；你可以按照下列规则消耗蓄力值：①：消耗1点蓄力值，视为使用一张【杀】；②：出牌阶段，消耗4点蓄力值，视为使用三张【杀】和一张【万箭齐发】，然后失去3点体力。';
                            },
                            dianjingmrfz: function (player) {
                                return !player.storage.dianjingmrfz ? '转化技，当你使用转化牌时，你可以从牌堆中获得与你使用的转化牌的<span class=thundertext>阳:牌名相同</span><font color=#696969>；阴:类型相同</font>的牌。' : '转化技，当你使用转化牌时，你可以从牌堆中获得与你使用的转化牌的<font color=#696969>阳:牌名相同；</font><span class=thundertext>阴:类型相同</span>的牌。';
                            },
                            yongwomrfz: function (player) {
                                if (player.isTurnedOver()) return '①锁定技，<span class=thundertext>当你武将牌背面朝上时，你获得如下效果:1.当你的上家或下家使用牌后，其须弃置一张牌，其每累计因此弃置两张牌，你对其造成一点伤害，然后你可以选择将你的武将牌翻面；2.其他角色计算与你的距离+1；</span><font color=#696969>当你的武将牌正面朝上时，你获得如下效果：1.当你于一轮内首次进入濒死状态时，你将体力值回复至1，然后将你的武将牌翻面；2.任意角色的回合结束阶段，若你本回合受到或造成了伤害，你可以将你的武将牌翻面。</font>②锁定技，当你翻面至正面朝上时，你摸两张牌。';
                                return '①锁定技，<font color=#696969>当你武将牌背面朝上时，你获得如下效果:1.当你的上家或下家使用牌后，其须弃置一张牌，其每累计因此弃置两张牌，你对其造成一点伤害，然后你可以选择将你的武将牌翻面；2.其他角色计算与你的距离+1；</font><span class=thundertext>当你的武将牌正面朝上时，你获得如下效果：1.当你于一轮内首次进入濒死状态时，你将体力值回复至1，然后将你的武将牌翻面；2.任意角色的回合结束阶段，若你本回合受到或造成了伤害，你可以将你的武将牌翻面。</span>②锁定技，当你翻面至正面朝上时，你摸两张牌。';
                            },
                            yuechuimrfz: function (player) {
                                var mark = player.countMark('yuechuimrfz');
                                if (mark > 1) return '①出牌阶段限两次，当你使用【杀】时，你可以摸<span class=thundertext>' + (mark + 1) + '</span>张牌。②当你使用的【杀】造成伤害后，你可以选择对一名与你距离为1且不是受伤角色的其他角色造成一点伤害。';
                                return '①出牌阶段限两次，当你使用【杀】时，你可以摸<span class=thundertext>' + (mark + 1) + '</span>张牌。②当你使用的【杀】造成伤害后，你可以弃置<span class=thundertext>' + Math.min(3, (mark + 2)) + '</span>张类别不同的牌（必须有一张装备牌）令【跃锤】中蓝色数字的数值+1（蓝色数字数值最多为3），无论你是否选择弃牌，你都可以选择对一名与你距离为1且不是受伤角色的其他角色造成一点伤害。';
                            },
                            zhenzamrfz: function (player) {
                                return '①锁定技，游戏开始时你获得一个‘壁’标记；当有角色获得‘壁’标记时，若其没有护甲，其获得一点护甲；每轮各限两次，每名角色的准备阶段(<span class=thundertext>已发动:' + (player.hasMark('zhenzamrfz_time1') ? player.countMark('zhenzamrfz_time1') : 0) + '次</span>)或有其他角色因你造成的伤害而进入濒死状态时(<span class=thundertext>已发动:' + (player.hasMark('zhenzamrfz_time2') ? player.countMark('zhenzamrfz_time2') : 0) + '次</span>)，若你没有‘壁’标记，你获得一个‘壁’标记。②有‘壁’标记的角色受到伤害后，若其因此伤害触发过护甲且没有护甲，其可以随机获得攻击范围内一名其他角色的' + (player.storage.liuliemrfz ? '两' : '一') + '张牌并对其造成一点伤害。';
                            },
                            yiyinmrfz: function (player) {
                                return '①蓄力技（' + player.countMark('charge') + '/3），出牌阶段，你可以弃置一张带有伤害类标签的牌，然后增加一点蓄力值。②当你使用【杀】的时，你可以消耗一点蓄力值并令此【杀】的伤害基数+1。';
                            },
                            kuangyumrfz: function (player) {
                                if (player.storage.kuangyumrfz) return '每回合每名角色限一次，当你使用单一目标的锦囊牌指定其他角色为目标后，若该角色没有‘风起’标志，你可以使其获得一个“风起”标记（持续到其回合结束），且令其下回合随机跳过两个阶段，若该角色在你的攻击范围内，其于此牌结算完成之前，你对有‘风起’标记的角色造成的伤害+1。';
                                return '每回合每名角色限一次，当你使用单一目标的普通锦囊牌或【杀】指定其他角色为目标后，若该角色没有‘风起’标志，你可以使其获得一个“风起”标记（持续到其回合结束），且令其下回合随机跳过两个阶段，若该角色在你的攻击范围内，其于此牌结算完成之前，你对有‘风起’标记的角色造成的伤害+1，然后若对其造成了伤害，你修改【狂语】直到下一轮开始。';
                            },
                            amy_qingyanmrfz: function (player) {
                                var str1 = '①锁定技，';
                                var str2 = '。②出牌阶段结束时，你可以删除【青焱①】中[]、{}或（）的内容直到本轮结束，然后令一名其他角色获得你删除的内容的效果直到其回合结束。';
                                var str = '';
                                var list = [player.storage.amy_qingyanmrfz_damage, player.storage.amy_qingyanmrfz_time, player.storage.amy_qingyanmrfz_direct];
                                var del = ['<span style="text-decoration:line-through">{你每回合使用的第一张【杀】的伤害基数+1},</span>',
                                    '<span style="text-decoration:line-through">[你使用【杀】的次数+1],</span>',
                                    '<span style="text-decoration:line-through">(你使用的【杀】需要两张【闪】才可抵消),</span>'];
                                var text = ['{你每回合使用的第一张【杀】的伤害基数+1},', '[你使用【杀】的次数+1],', '(你使用的【杀】需要两张【闪】才可抵消),'];
                                for (var i = 0; i < list.length; i++) {
                                    if (list[i]) str = str + del[i];
                                    else str = str + text[i];
                                }
                                return str1 + str + str2;
                            },
                            xinyongwomrfz: function (player) {
                                if (player.storage.xinyongwomrfz) return '转化技，<span class=thundertext>阳：当你进入濒死状态时，你可以回复至一点体力；</span><font color=#696969>阴：当你武将牌从正面朝上至背面朝上时，你可以摸两张牌，然后选择一项：1.弃置你攻击范围内一名其他角色区域内各一张牌；2.对你攻击范围内的一名其他角色造成一点伤害。</font>';
                                return '转化技，<font color=#696969>阳：当你进入濒死状态时，你可以回复至一点体力；</font><span class=thundertext>阴：当你武将牌从正面朝上至背面朝上时，你可以摸两张牌，然后选择一项：1.弃置你攻击范围内一名其他角色区域内各一张牌；2.对你攻击范围内的一名其他角色造成一点伤害。</span>';
                            },
                            chongdanmrfz: function (player) {
                                var str2 = '';
                                if (player.storage.chongdanmrfz && player.storage.chongdanmrfz_player) str2 = '<font color=#696969>造成</font>/<font color=#696969>受到</font>';
                                else if (player.storage.chongdanmrfz && !player.storage.chongdanmrfz_player) str2 = '<font color=#696969>造成</font>/受到';
                                else if (player.storage.chongdanmrfz_player && !player.storage.chongdanmrfz) str2 = '造成/<font color=#696969>受到</font>';
                                else str2 = '造成/受到';
                                return '锁定技，每轮你至多能使用2X张牌；每轮每项限一次你第一次[' + str2 + ']伤害后，你摸等同于你体力值张牌或回复等同你手牌数点体力。（X=你的体力上限）';
                            },
                            tianyimrfz: function (player) {
                                if (player.storage.tianyimrfz) return '转换技，一名角色的判定阶段，你可以，<span class=thundertext>阳：观看牌堆顶两张牌，并将其置于牌堆顶或牌堆底；</span><font color=#696969>阴：进行一次判定，并获得判定牌，本回合此牌视为【闪】，若判定结果为♣，你本局游戏使用【杀】的次数+1（至多+3）。</font>';
                                return '转换技，一名角色的判定阶段，你可以，<font color=#696969>阳：观看牌堆顶两张牌，并将其置于牌堆顶或牌堆底；</span><span class=thundertext>阴：进行一次判定，并获得判定牌，本回合此牌视为【闪】，若判定结果为♣，你本局游戏使用【杀】的次数+1（至多+3）。</font>'
                            },
                            yirenmrfz: function (player) {
                                return '蓄力技（<span class=thundertext>' + (player.countMark('charge') != undefined ? player.countMark('charge') : 0) + '</span>/∞）。①锁定技，回合结束时，你增加X点蓄力值。（X=本回合出牌阶段剩余使用【杀】的次数）②出牌阶段，你可以消耗[<span class=thundertext> ' + (player.storage.yirenmrfz_use != undefined ? Math.min(player.storage.yirenmrfz_use, 5) : 1) + ' </span>]点蓄力值，弃置两张手牌并选择至多两名其他角色，视为你对其各使用一张【杀】（目标必须合法且不计入次数限制）且其下个回合使用【杀】的次数-1，然后令[ ]中的数字+1（至多为5）。';
                            },
                        },
                        character: {
                            //——————实装干员——————//
                            ailinimrfz: ["female", "qun", 3, ["zhidengmrfz", "shenpanmrfz", "liechaomrfz"], []],
                            hongxuemrfz: ["female", "qun", 4, ["ruibimrfz", "sujimrfz"], []],
                            xiaoyangmrfz: ["female", "qun", 3, ["qingyanmrfz", "luanhuomrfz"], []],
                            yinhuimrfz: ["male", "qun", 4, ["xuebianmrfz", "tonghemrfz"], []],
                            lingzhimrfz: ["male", "qun", 4, ["siyongmrfz"], []],
                            liumingmrfz: ["male", "qun", 4, ["fanyuanmrfz", "yingjimrfz", 'new_weiguangmrfz'], []],
                            chizuimrfz: ["female", "qun", 4, ["zhidianmrfz", "pijimrfz"], []],
                            amiyamrfz: ["female", "qun", 4, ["tongganmrfz", "qinghemrfz"], ['zhu']],
                            niyanmrfz: ["female", "qun", 4, ["sutumrfz", "wotumrfz"], []],
                            chengshanmrfz: ["female", "qun", 3, ["dianshanmrfz", "shidemrfz"], []],
                            wmrfz: ["female", "qun", 3, ["fukemrfz", "zhumengmrfz3"], []],
                            spsikadimrfz: ["female", "qun", 4, ["qianximrfz"], []],
                            sikadimrfz: ["female", "qun", 4, ["geyaomrfz", "zhangenmrfz"], []],
                            spdegoumrfz: ["female", "qun", 4, ["laoyingmrfz", 'yushimrfz'], []],
                            maennamrfz: ["male", "qun", 4, ["xunlumrfz"], []],
                            splinguangmrfz: ["female", "qun", 4, ["zhuguangmrfz", "kuanmrfz", "shuoguangmrfz"], []],
                            kaierximrfz: ["female", "qun", 3, ["yuanlvemrfz", "chonggoumrfz", "yuanshimrfz", 'm3mrfz'], ['zhu']],
                            shanmrfz: ["male", "qun", "4/6", ["zhuangtimrfz", "julimrfz"], []],
                            geleidiyamrfz: ["female", "qun", 4, ["xunxiangmrfz", 'ronghangmrfz'], []],
                            chenmrfz: ["female", "qun", 4, ["danweimrfz", "hechimrfz", "jueyingmrfz", "newjingsimrfz"], ['zhu']],
                            xingxiongmrfz: ["female", "qun", "4/5", ["xinboremrfz", "xinyizhongmrfz"], []],
                            kanielianmrfz: ["female", "qun", 3, ["shazhenmrfz", "shacanmrfz", "shahuanmrfz"], []],
                            kuiyingmrfz: ["male", "qun", 3, ["xuyingmrfz", "xuegemrfz", "huanxiangmrfz"], []],
                            mositimamrfz: ["female", "qun", 3, ["shishimrfz", "huanshimrfz"], []],
                            keebomrfz: ["female", "qun", 3, ["jiemimrfz", "shihuangmrfz", "baokemrfz"], []],
                            feiyameitamrfz: ["female", "qun", 4, ["shunanmrfz"], []],
                            jicimrfz: ["male", "qun", 4, ["jihumrfz", "re_jianshumrfz"], []],
                            yeyingmrfz: ["female", "qun", '3/3/1', ["qiulongmrfz", "bihumrfz", "shengyumrfz"], []],
                            helagemrfz: ["male", "qun", 4, ['yingkuimrfz', 'cangfengmrfz', 'yuexiangmrfz'], []],
                            wendimrfz: ["female", "qun", 4, ["jiepimrfz", "shuipaomrfz", 'danpaomrfz'], []],
                            senranmrfz: ["female", "qun", "3/5", ["juezhanmrfz", "shanxiemrfz", "tieyimrfz"], []],
                            ashmrfz: ["female", "qun", '3/3/1', ["baigeimrfz", "wusumrfz", "wutoumrfz"], []],
                            kamimrfz: ["male", "qun", 3, ["dianlianmrfz", "shazumrfz", "leibaomrfz"], []],
                            nianmrfz: ["female", "qun", 4, ["zhujimrfz", "tongyinmrfz", "tieyumrfz"], []],
                            lingmrfz: ["female", "qun", 3, ["shixingmrfz", "zuimengmrfz", "haojiumrfz"], []],
                            fengdimrfz: ["female", "qun", 4, ["juntongmrfz", "pochengmrfz"], []],
                            qinliumrfz: ["female", "qun", 3, ["junqimrfz", "butuimrfz", 'zhiqimrfz'], []],
                            laolimrfz: ["male", "qun", 3, ["linhuamrfz", "mingshimrfz", 'jixiongmrfz'], []],
                            amrfz: ["male", "qun", '3/4/1', ['guaijiemrfz', 'guaiyaomrfz', 'qizhenmrfz'], []],
                            heimrfz: ["female", "qun", 4, ['heishimrfz', 'ruitongmrfz', 'junumrfz'], []],
                            chongyuemrfz: ["male", "qun", 3, ['shubianmrfz', 'wubenmrfz', 'wowumrfz'], []],
                            anjielinamrfz: ["female", 'qun', 3, ['xinshimrfz', 'fanzhongmrfz'], []],
                            haojiaomrfz: ['female', 'qun', 4, ['xuezhanmrfz', 'dunpaomrfz', 'biaohaomrfz'], []],
                            xigymrfz: ['female', 'qun', 3, ['huijuanmrfz', 'dianjingmrfz', 'cangjuanmrfz'], []],
                            yanweimrfz: ['female', 'qun', 4, ['fengjianmrfz', 'hongsongmrfz'], []],
                            nengtianshimrfz: ['female', 'qun', '3/3/1', ['lianshemrfz', 'guozaimrfz'], []],
                            yuanyamrfz: ['female', 'qun', 4, ['bingximrfz', 'ningshenmrfz', 'yuanmengmrfz'], []],
                            midiexiangmrfz: ['female', 'qun', 3, ['zhangyimrfz', 'chongjimrfz', 'nianshoumrfz'], []],
                            spzzxpmrfz: ['female', 'qun', 3, ['yuyunmrfz', 'shuiqiangmrfz', 'jianfengmrfz'], []],
                            shuiyuemrfz: ['male', 'qun', 3, ['liqunmrfz', 'chuangshangmrfz', 'jinghuamrfz'], []],
                            spyoulingshamrfz: ['female', 'qun', 3, ['xinyongwomrfz', 'douzhenmrfz', 'shensuimrfz'], []],
                            qiubaimrfz: ['female', 'qun', 4, ['ruximrfz', 'wenxuemrfz'], []],
                            baitiemrfz: ['male', 'qun', 4, ['jigongmrfz', 'jiefeimrfz'], []],
                            weinamrfz: ['female', 'qun', 4, ['fensuimrfz', 'yuechuimrfz'], []],
                            siyemrfz: ['male', 'qun', 1, ['qunxingmrfz', 'langqunmrfz'], []],
                            spjiaweiermrfz: ['female', 'qun', 4, ['yixuemrfz', 'juximrfz', 'conghunmrfz'], []],
                            semrfz: ['female', 'qun', 4, ['mojianmrfz', 'huanghunmrfz', 'yujinmrfz'], []],
                            linmrfz: ['female', 'qun', 3, ['zhenzamrfz', 'liuliemrfz', 'yinbimrfz'], []],
                            duoluoximrfz: ['female', 'qun', 3, ['gongzhenmrfz', 'mengxiangmrfz', 'paizhangmrfz'], []],
                            kongxianmrfz: ['female', 'qun', '3/3/1', ['lieshimrfz', 'tiexianmrfz'], []],
                            spyedaomrfz: ['female', 'qun', '3/4', ['luanwumrfz'], []],
                            yineisimrfz: ['female', 'qun', 3, ['yingzhimrfz', 'yingshaomrfz'], []],
                            miumiumrfz: ['female', 'qun', 3, ['yuanliumrfz', 'shuilingmrfz', 'xinjingshuimrfz'], []],
                            heijianmrfz: ['male', 'qun', 3, ['yiyinmrfz', 'huangxiangmrfz', 'jiyinmrfz'], []],
                            yifulitemrfz: ['female', 'qun', 3, ['yanmomrfz', 'yanbaomrfz', 'huishenmrfz'], []],
                            sphemomrfz: ['female', 'qun', 3, ['renbenmrfz', 'dizhumrfz'], []],
                            saileiyamrfz: ['female', 'qun', '3/4', ['fuyuanmrfz', 'yaopeimrfz', 'gaihuamrfz'], []],
                            spweicaomrfz: ['female', 'qun', 3, ['zhuohenmrfz', 'yingyaomrfz', 'minghuomrfz'], []],
                            huangmrfz: ['female', 'qun', '3/5', ['yanxunmrfz', 'chuchanmrfz', 'feixuemrfz'], []],
                            huoerhaiyamrfz: ['female', 'qun', 3, ['kuangyumrfz', 'chuangzhongmrfz'], []],
                            linglanmrfz: ['female', 'qun', 3, ['hualaomrfz', 'huhuomrfz', 'wuyuemrfz'], []],
                            shanlingmrfz: ['female', 'qun', 4, ['yubimrfz', 'jiushumrfz', 'lichangmrfz'], []],
                            maizhelunmrfz: ['female', 'qun', 3, ['kanchamrfz', 'longtengmrfz'], []],
                            cuoemrfz: ['female', 'qun', 4, ['quanshanmrfz', 'chuemrfz'], []],
                            palasimrfz: ['female', 'qun', 4, ['yingzhumrfz', 'yingdanmrfz', 'yingfenmrfz'], []],
                            xiaguangmrfz: ['female', 'qun', 4, ['rencimrfz', 'huiguangmrfz', 'jiandunmrfz'], []],
                            spamiyamrfz: ['female', 'qun', 5, ['amy_qingyanmrfz', 'yingxiaomrfz'], []],
                            zaolumrfz: ['female', 'qun', 4, ['zhongxiemrfz', 'rusuimrfz'], []],
                            spshihuaiyamrfz: ['female', 'qun', 3, ['mianzaimrfz', 'zhijinmrfz'], []],
                            spsongzangrenmrfz: ['male', 'qun', 3, ['chongdanmrfz', 'tianxuanmrfz', 'shengcaimrfz'], []],
                            spjiexikamrfz: ['female', 'qun', 4, ['yijiemrfz', 'fuhuangmrfz'], []],
                            tifengmrfz: ['female', 'qun', 4, ['ruiyamrfz', 'shouliemrfz'], []],
                            fulankamrfz: ['female', 'qun', 3, ['jifengmrfz', 'xiqiaomrfz'], []],
                            xingjimrfz: ['female', 'qun', 4, ['tianyimrfz', 'huijianmrfz', 'bingmingmrfz'], []],
                            xingyuanmrfz: ['female', 'qun', 4, ['daoliumrfz', 'gewumrfz'], []],
                            weiweiannamrfz: ['female', 'qun', 4, ['zhanjumrfz', 'zhuhuomrfz', 'yunjiaomrfz'], []],
                            zhanchemrfz: ['male', 'qun', '4/4/2', ['jiqiangmrfz', 'qingxiemrfz'], []],
                            shanjimrfz: ['male', 'qun', 4, ['shandunmrfz', 'xuanmumrfz', 'chuandunmrfz'], []],
                            shuanghuamrfz: ['female', 'qun', 3, ['tadianmrfz', 'xinjimrfz'], []],
                            spxiaoyanmrfz: ['female', 'qun', 3, ['lvmengmrfz', 'rechenmrfz'], []],
                            suxinmrfz: ['female', 'qun', 3, ['qinmingmrfz', 'kongwomrfz'], []],
                            bohuimrfz: ['female', 'qun', 4, ['shehunmrfz', 'yirenmrfz'], []],
                            baimianxiaomrfz: ['female', 'qun', 3, ['jinaomrfz', 'wutaimrfz'], []],
                            hedeleimrfz: ['male', 'qun', '4/6', ['zhengrongmrfz', 'siyanmrfz'], []],
                            zhisongmrfz: ['male', 'qun', 4, ['kuxiumrfz', 'lirenmrfz'], []],
                            cimeimrfz:['female','qun',3,['huabumrfz','shixinmrfz'],[]],
                            hongmrfz:['female','qun',4,['qunlangmrfz','cigumrfz','qingchumrfz'],['hiddenSkill']],
                            //——————剧情角色——————//
                            acemrfz: ["male", "qun", 4, ["guanyongmrfz", "sizhanmrfz"], []],
                            baocunzhemrfz: ['male', 'qun', 10, ['shouwangmrfz', 'jingmomrfz', 'xijimrfz'], []],
                            yizumikemrfz: ['male', 'qun', 3, ['chanshimrfz'], []],
                            kelisitengmrfz: ['female', 'qun', 4, ['xingtumrfz', 'poqiongmrfz'], []],
                            shuangxingmrfz: ['female', 'qun', 4, ['xuexingmrfz', 'newchegumrfz', 'donghenmrfz'], []],
                            
                        },
                        characterIntro: {
                            ailinimrfz: '艾丽妮，前伊比利亚审判官，大审判官达里奥的学生。对伊比利亚历史、律法、人文地理等知识十分了解。在“愚人号”事件后，辞去审判官职务，经凯尔希亲自推荐，现以审判庭信使的身份与罗德岛签订合作协议，为应对来自海洋的威胁而做准备。',
                            hongxuemrfz: '鸿雪，自称阿芙朵嘉·锐笔。可确认阿芙朵嘉为其本名，但本人不愿透露真实姓氏。在风险研判后，人事部决定不进行进一步的询问。',
                            xiaoyangmrfz: "艾雅法拉，火山学家，天灾信使。于高等源石技艺、高能量法术释放等领域展现出了卓越的天赋。现于罗德岛接受治疗，同时为罗德岛提供天灾研究、环境观察与评估、危险地形航行保障等相关服务。",
                            yinhuimrfz: "银灰，谢拉格军阀，喀兰贸易公司董事长，希瓦艾什家族现任族长。在经济贸易、国际政治、外交手腕与战术策划上有独到见解。于罗德岛的部分行动中提供战略支援。鉴于其实际目的不明、合作态度暧昧等理由，建议在交流中持保守态度以杜绝额外风险。",
                            lingzhimrfz: "灵知，前喀兰贸易首席技术执行官。通过喀兰贸易与罗德岛的特别协议，作为干员加入罗德岛。主导了喀兰贸易众多核心技术的开发以及工业设施的设计，同时在喀兰贸易时期就已对源石有相当深入的研究。现作为罗德岛主要研究室的一员，活跃于科研一线。",
                            liumingmrfz: "流明，经由极境以及凯尔希引荐，现作为罗德岛驻伊比利亚干员，协助罗德岛执行伊比利亚地区感染者的医疗救护工作。同时，流明也会列席罗德岛、阿戈尔、审判庭三方的一系列会议，基于自己的视角提出建议，与各方一起寻找一种协同合作、面对未来的可能。",
                            chizuimrfz: "斥罪，原为叙拉古城邦法官，通过干员德克萨斯与罗德岛建立联系。于后勤部工作，担任罗德岛法律顾问一职。",
                            amiyamrfz: "阿米娅，罗德岛的公开领袖，在内部拥有最高执行权。虽然，从外表上看起来仅仅是个不成熟的少女，实际上，她却是深受大家信任的合格的领袖。现在，阿米娅正带领着罗德岛，为了感染者的未来，为了让这片大地挣脱矿石病的阴霾而不懈努力。",
                            niyanmrfz: "萨卡兹雇佣兵泥岩，随军加入整合运动后，由于意见不合而带领小队成员远离了乌萨斯。完全没有参与整合运动在切尔诺伯格及龙门的行动。为了寻找落脚点，泥岩带队前往莱塔尼亚，在当地吸纳了大量莱塔尼亚的感染者后，泥岩被众人推崇为领袖，开始以“泥岩小队”的名号被人所知。尽管泥岩多次试图避免与其他势力发生冲突，但她们依旧一次又一次地被卷入纷争，为了避免更多无意义的牺牲，泥岩选择逃往卡兹戴尔。在卡兹戴尔境内与精英干员Logos接触，随后者前往罗德岛。",
                            chengshanmrfz: "澄闪，罗德岛后勤干员，主要工作地点为罗德岛理发室，一般情况下不作为外勤干员派遣。使用特殊形制的法杖，操控“浮标”对敌人进行打击。",
                            wmrfz: "萨卡兹佣兵头目，W。曾参与卡兹戴尔漫长的内战，其小队以残暴而高效的作战手段闻名。在切尔诺伯格事件中与罗德岛发生冲突，后因为某些原因叛出整合运动，在凯尔希医生亲自进行了充分交涉后，与罗德岛签订战略合作条款。",
                            spsikadimrfz: "照这个方向发展下去，就不会有人关心她究竟是什么了。不是斯卡蒂的问题，一个人也不能改变什么。我说的是，这种生理状态，以及该类生物性物质表现出的最终状态，可能会摧毁我们社会、历史与科学的所有度量衡。希望我们简陋的医疗科研条件现在还够使上点劲......",
                            sikadimrfz: "斯卡蒂，赏金猎人，现为罗德岛所雇佣。在过去完成的赏金任务中，于对抗大型生物，破坏硬目标，攻坚战，歼灭战等多类行动中展现出强劲实力，推测与其过往战斗经验相关。成为赏金猎人之前的履历缺失。现于罗德岛某攻坚小队供职，同时身兼单兵任务预备执行干员一职。......",
                            spdegoumrfz: "缄默德克萨斯，企鹅物流员工，最后的德克萨斯家族成员，单兵作战能力出类拔萃。罗德岛的老朋友。当德克萨斯带着后来成为伺夜与斥罪的两人踏入罗德岛时，许多人都是震惊的。毕竟，从着装上就能判断，不必说伺夜与斥罪，光是她的身上，就散发着浓厚的叙拉古气息。她回叙拉古了。对她有所了解的干员，对于这个结论都有些惊疑不定，毕竟，关于德克萨斯的一个共识是——她和叙拉古有关，但没有人知道她的过去是怎样的。所幸，紧跟其后的企鹅物流众人打消了这种疑虑。毕竟，有关德克萨斯的另一个共识是——只要和企鹅物流在一起，她就始终是那个德克萨斯。当然，等到众人得知，德克萨斯在叙拉古经历了什么，并且又为罗德岛带来了怎样的两位人物后，一个新的共识诞生了——德克萨斯真可怕。",
                            maennamrfz: "玛恩纳·临光，临光家前家主，干员临光与瑕光的叔叔，迄今并未获得过任何形式的骑士封号。于特锦赛后约两个月，接受罗德岛的合作邀请，协助罗德岛处理卡西米尔地区的各项事务。",
                            splinguangmrfz: "耀骑士临光，卡西米尔耀骑士。在掩护己方队员、机动作战、歼灭战与开阔地带作战中体现出极高的战斗技巧和个人军事素养。</br>在重返卡西米尔并夺得第二十四届骑士特别锦标赛决斗赛冠军之后，留在卡西米尔处理后续事务。作为合作干员为罗德岛驻卡瓦莱利亚基办事处提供战术支援，必要时也会去往其他地区协助本舰展开各项行动。",
                            kaierximrfz: "凯尔希，罗德岛高层管理人员之一，罗德岛医疗项目领头人。在冶金工业、社会学、源石技艺、考古学、历史系谱学、经济学、植物学、地质学等领域皆拥有渊博学识。于罗德岛部分行动中作为医务人员提供医学理论协助与应急医疗器械，同时也作为罗德岛战略指挥系统的重要组成人员活跃在各项目中。",
                            shanmrfz: "山，哥伦比亚某建筑业龙头公司CEO之子，举家被竞争对手陷害而入狱，离开监狱后，加入罗德岛。</br>拥有几乎天生为战斗而生的体魄，现作为近卫干员活跃于各种任务的第一线。",
                            geleidiyamrfz: "歌蕾蒂娅，阿戈尔人，阿戈尔技术执政官、荣誉军团长，阿戈尔军事团体“深海猎人”总战争设计师之一。登陆时间地点俱不明。于对抗大型生物，破坏硬目标，攻坚战，歼灭战，机动战与谍报战等多类行动中展现出非凡实力。现以合作姿态协助罗德岛、辅助罗德岛部分工作，在保留阿戈尔国家职能身份的同时，兼任罗德岛的阿戈尔事务负责人。",
                            chenmrfz: "陈，龙门高级警司，龙门近卫局特别督察组组长，毕业于维多利亚皇家近卫学校，成绩优异，表现突出。在龙门近卫局供职期间，力主取缔龙门境内非法活动，对抗暴力犯罪和有组织犯罪，追缉武装逃犯与国际重犯等行动，并取得多项重大成果。</br>现作为特别人员协助罗德岛行动，并为现场提供战术指挥支援。",
                            xingxiongmrfz: "星熊，龙门近卫局特别任务组精英干员。</br>存在数项指控记录。</br>经龙门总督魏彦吾交涉，龙门近卫局依星熊的优异能力与良好表现，破格将其吸纳进近卫局特别督察组。在处理高危险性犯罪事件、要员保护、灾害紧急救援等领域表现出较高专业性。</br>现作为重装干员协助罗德岛行动，并为现场提供战术执行与指挥支援。</br>现作为特别人员协助罗德岛行动，并为现场提供战术指挥支援。",
                            kanielianmrfz: "卡涅利安，出身萨尔贡深处不受王酋管辖的某个古老部族，目前外出游学中。因接受莱塔尼亚霍恩洛厄伯爵的雇佣，作为其侍从长期停留于莱塔尼亚地区。现与罗德岛达成合作关系，作为干员为罗德岛执行莱塔尼亚境内的相关任务。",
                            kuiyingmrfz: "独自行动于维多利亚及周边地区的刺客傀影，过去行踪难以查定，背景履历尚未完全实证。</br>现作为特种干员加入罗德岛，作战能力优秀，但仍需谨慎对待。",
                            mositimamrfz: "莫斯提马，企鹅物流员工，总是单独行动，此前履历不详。",
                            keebomrfz: "刻俄柏，流浪者，从有意识开始就在四处流浪，在流浪途中被野外恶劣环境感染，凭着常人所不具备的直觉和意志一直撑到了现在。</br>现已被罗德岛救助并顺利通过干员测试，成为罗德岛的一员。",
                            feiyameitamrfz: "菲亚梅塔，拉特兰公证所高级特派员，职务名经本人强烈要求，不予记录。现依据罗德岛与拉特兰教廷的合作协议，从罗德岛获得补给，并提供相关服务。</br>天启惩罚者？每个月还会更新？让我把这些玩意输进终端归档不如直接杀了我。",
                            jicimrfz: "精通剑术与药剂制作的罗德岛前线作战干员，棘刺。出身于伊比利亚腹地，于当地宗教局势动荡中离开家乡，在脱离伊比利亚地区后，受邀来到罗德岛。</br>以上关于伊比利亚境内局势的部分为棘刺自述，尚未完全经过考证。",
                            yeyingmrfz: "夜莺，萨卡兹人，感染者援助团体“使徒”的一员，其它履历缺失。于源石技艺、战场急救、临床医学等领域具备高超天赋。</br>现于罗德岛接受治疗，同时为罗德岛提供战场医疗救护、源石技艺援护等服务。",
                            helagemrfz: "赫拉格，曾隶属于乌萨斯帝国近卫军，切尔诺伯格感染者地下诊所“阿撒兹勒”的现任管理者，其他相关履历缺失。拥有成熟的军事理论体系知识，战斗技巧几乎能满足绝大部分类型作战的需求。现正依合作协议长驻罗德岛，为罗德岛提供战术指挥支援。",
                            wendimrfz: "温蒂，生物工程学专家，伊比利亚科研世家出身，罗德岛成立之初就加入的研究者。</br>经过本人长期调整与测试，最终完成了为自己量身定做的武器。并根据自身意愿成为干员，在战场上为同僚提供远程支援。",
                            senranmrfz: "森蚺，嘉维尔的故乡——阿卡胡拉中某部族的族长，经过干员测试后加入罗德岛，同时接受治疗。</br>拥有不输于嘉维尔的身体素质，目前和她的伙伴“暴躁铁皮”共同活跃在战场上。",
                            ashmrfz: "<span class=firetext>联动：彩虹六号:围攻</span></br>灰烬，彩虹小队成员之一，暂时担当小队队长职务，严于律己，恪尽职守，为整个小队谋划行动方针。</br>灰烬使用一把M120CREM爆破弹发射器，可以对重装目标造成伤害，也可破开障碍物，为小队行动增加战术选择。",
                            kamimrfz: "<span class=firetext>客门，我以最谦卑的姿态恳求您借我一点点力量</span></br>哥伦比亚出身的干员异客，曾在十三岁时就以极其优异的成绩跳级毕业，随后被源石工程与应用学专家索恩教授相中提拔为研究助手，进入布莱恩创生科技的研究所学习。于近二十余年前随某项目深入萨尔贡，之后销声匿迹。之后以伊巴特地区黑市主要成员的身份与罗德岛接触，并在脱离黑市后，单纯以感染者身份来到罗德岛接受治疗，并以工程部干员的身份活跃在各项行动中。",
                            nianmrfz: "年，无业游民，熟习各类金属工艺，拥有与身份不符的渊博冶金知识。现凭访客身份逗留于罗德岛，偶尔为罗德岛的金属加工项目提供建议。声称自己擅长音像娱乐工作，经常提供一些罗德岛干员普遍不太喜爱的音像产品。",
                            lingmrfz: "令，寓居尚蜀的诗人，与炎国司岁台等政府部门均有联系，在尚蜀事件中接触罗德岛，现通过审核，以访客身份驻留本舰。",
                            fengdimrfz: "风笛，维多利亚皇家近卫学校毕业，在维多利亚军队中服役满3年后，退役并经由陈警司介绍加入罗德岛。</br>接受过系统训练的职业军人，经过一段时间的磨合，在罗德岛的各类任务中体现出了专业的战斗技巧与战术素养。",
                            qinliumrfz: "琴柳，前维多利亚仪仗队执旗手，服役于维多利亚小丘郡地方部队，经历战乱后，由小丘郡办事处负责人引荐，成为罗德岛合作干员。接受过维多利亚军的基础训练，体能优异，在各类任务中展现出了强大的支援能力。",
                            laolimrfz: "老鲤，私家侦探，龙门鲤氏侦探事务所的创办者。在罗德岛于龙门发展业务的过程中与罗德岛相识，随后建立合作关系。为罗德岛提供关于龙门本地信息的咨询服务，也向罗德岛引荐过一些人才。",
                            amrfz: "阿，经龙门鲤氏侦探事务所所长老鲤推荐而来的医疗人员，曾是活跃于龙门灰色地带的知名黑医生。</br>在加入后，展现出了惊人的医疗理论知识储备以及临床经验，但也表现出让人担忧的医疗风格。</br>不过根据凯尔希医生的综合评估，被暂时推荐到医疗装备科和技术开发组。",
                            heimrfz: '黑，前汐斯塔市市长SP兼城市治安局局长，随干员锡兰共同加入罗德岛。</br>在隐秘行动、侦察与反侦察、野外求生、弩使用等技能上拥有卓越的造诣。在担任博士护卫的同时，负责一部分罗德岛基层干员的训练工作。',
                            chongyuemrfz: '重岳，留舰人员年、夕、令的兄长，与炎国兵部、司岁台等政府部门往来密切，此前担任移动城市玉门的武术教官，已卸任。因探视亲属来到罗德岛，经过审核，暂时凭访客身份驻留本舰。重岳具有丰富的战场经验，为罗德岛提供过独特的作战建议，但应凯尔希医生要求，重岳本人较少直接参加任务。',
                            anjielinamrfz: '安洁莉娜，本名安心院安洁莉娜。于叙拉古从事情报递送、货物运输等公开活动，推测身份：信使。</br>现作为实习术师干员，为罗德岛提供后勤保障、战场辅助与战术协同等服务。',
                            haojiaomrfz: '号角，毕业于维多利亚皇家近卫学校，现为维多利亚风暴突击队第二分队指挥官。于伦蒂尼姆事件中与罗德岛协同作战，经精英干员Misery介绍，与罗德岛签订战略合作条款。',
                            yanweimrfz: '焰尾，卡西米尔的感染者骑士，同时也是自发组建的感染者骑士团“红松”的实际领袖。于卡西米尔合作期间与罗德岛接触，并主动寻求罗德岛的治疗。',
                            xigymrfz: '夕，炎国画家，待业。在留舰人员年的积极行动下，被以访客身份挟持至罗德岛。擅长绘画，尤其是炎国传统绘画。现寓居罗德岛某偏僻走道的墙内。',
                            nengtianshimrfz: '能天使，拉特兰公民，适用拉特兰一至十三项公民权益。企鹅物流公司成员。从事秘密联络，武装押运等非公开活动，推测身份：信使。于合约期内任企鹅物流驻罗德岛联络人员，同时为罗德岛多项行动提供协助。',
                            yuanyamrfz: '“远牙”骑士查丝汀娜，于特锦赛上打响名气，目前隶属于由感染者骑士组建的红松骑士团，是一名在卡西米尔拥有相当程度知名度的感染者骑士。在卡西米尔本届特锦赛及一系列风波之后，红松骑士团与罗德岛达成合作关系，远牙骑士也作为合作者来到罗德岛，接受矿石病相关治疗，并为罗德岛提供战斗支援。',
                            midiexiangmrfz: '迷迭香，罗德岛精英干员，熟练掌握极稀有的源石技艺，于对抗大型生物，破坏硬目标，设施紧急制动与中断小规模冲突等任务中表现出色，并于攻坚战、阵地战与歼灭战中体现出极强的战场掌控力与显著的战术价值。现由凯尔希指派，作为歼灭战的核心发起人之一发挥作用。</br><span class=firetext>迷迭香的所有其他档案皆移入高权限资料库。</span>',
                            spzzxpmrfz: '陈，前龙门高级警司，前龙门近卫局特别督察组组长，毕业于维多利亚皇家近卫学校，成绩优异，表现突出。在龙门近卫局供职期间，力主取缔龙门境内非法活动，对抗暴力犯罪和有组织犯罪，追缉武装逃犯与国际重犯等行动，并取得多项重大成果。</br>现辞去职务，正式成为罗德岛的一员。依本人意愿，任务多以外派为主，为各地外派干员提供有力支援以及现场指导。',
                            shuiyuemrfz: '水月于玻利瓦尔的多索雷斯城与我们的部分干员有所接触，并随行至本舰，经相关干员初步问询考察后批准其暂时留舰。</br>其学习能力较为优秀，现阶段已经能协助完成相当一部分的文职工作内容，或可考虑往干员的方向培养。经调查与评估后批准其长期留舰。',
                            qiubaimrfz: '仇白，剑客，出生于炎国姜齐城附近的水寨，后因家庭变故离开故乡，常年行走于炎国各地，并无固定居所与工作。</br>经调查，仇白曾在不同事件中与多位干员有过接触，后接受罗德岛的合作邀请，为罗德岛在炎国境内的各项事务提供支持。',
                            spyoulingshamrfz: '幽灵鲨，本名劳伦缇娜，阿戈尔军事团体“深海猎人”成员，在对抗大型生物与破坏硬目标等行动中展现出极强的技巧。</br>“愚人号”事件后，其精神状态趋于稳定，记忆恢复，情绪趋于稳定。',
                            baitiemrfz: '白铁，机械工程师，伦蒂尼姆市民自救军十一小队队长。于伦蒂尼姆事件中与罗德岛协同作战，后与罗德岛签订长期合作条款，作为工程干员与行动队成员活跃在维多利亚地区的各项任务中。',
                            weinamrfz: '推进之王，本名维纳，维多利亚公民，大部分履历缺失。存在数项未被证实的指控记录。在歼灭战、攻坚战、对抗硬目标等任务中表现出色。于多个测试中皆获得优异成绩，遂获准加入罗德岛。现作为先锋人员，于罗德岛某作战小队担任队长。',
                            siyemrfz: '伺夜，叙拉古贝洛内家族最后一任领袖，叙拉古特别行政城市新沃尔西尼市长候补之一，通过干员德克萨斯，代表所属城市与罗德岛建立合作关系。</br>擅长中距离战斗，并且在种种任务上展现出了相当的谋略与领导力。',
                            spjiaweiermrfz: '嘉维尔，现在仍是罗德岛医疗部的一员，但在罗德岛需要她发挥自己的战斗力而非医学素养的时候，她也会拿起战斧，冲锋陷阵。',
                            semrfz: '史尔特尔，神秘的萨卡兹少女，或因矿石病影响导致缺失性记忆障碍，其情况在矿石病病理中也极其少见，现于罗德岛接受治疗中。</br>在测试过程中展现出了原因不详的强大战斗能力，很快成为了作战干员。',
                            linmrfz: '林，本名林雨霞，龙门人。本职工作不明，本人提供的档案资料信息十分有限，同样存疑。</br>于“玉门事件”后，主动提出与罗德岛正式建立合作。为罗德岛在龙门收治感染者的工作提供帮助。',
                            duoluoximrfz: '多萝西，莱茵生命源石技艺应用科主任，在罗德岛选择使用自己的本名作为代号。</br>多萝西·弗兰克斯小姐以“莱茵生命与罗德岛的合作项目负责人”这一身份加入我们，将会在许多研究项目上为罗德岛提供帮助。身为源石技艺应用科的主任，她对源石技艺本身的理解毋庸置疑，而在源石技艺的应用上更是炉火纯青。',
                            kongxianmrfz: '空弦，来自兰登修道院的修士，本名席德佳。出于某些商业合作目的暂留罗德岛，并积极提出各项合作条款，敦促双方展开友好商业来往。同时在各项行动中均展现出极优秀的作战技巧，经本人要求，现作为罗德岛狙击干员活跃于各项任务中。',
                            spyedaomrfz: '<span class=firetext>联动：怪物猎人</span></br>夜刀，经过短暂的治疗后，从东国回到岗位，继续履行罗德岛A4行动组组长的职责。换上了由艾露猫打造的全新装备，她将会承担更多高难度的攻坚行动，而她的意志也比以往都要强大。',
                            yineisimrfz: '伊内丝，前萨卡兹佣兵头目。曾短暂参与卡兹戴尔的混乱内战，直到切尔诺伯格事件时，她借助假死彻底消失在所有人的视野中。此后，伊内丝隐藏了自己的踪迹，但通过最近的伦蒂尼姆事件，她正式与罗德岛恢复了联系。期间她经历了什么无从查验，最后在阿斯卡纶的担保下与罗德岛签订了战略合作条款。',
                            miumiumrfz: '缪尔赛思，莱茵生命生态科主任，哥伦比亚生命科学与环境科学领域专家，在特里蒙事件中与罗德岛取得联系，后与罗德岛签订长期合作条款，与生物工程研究室开展多项联合科研项目，并作为先锋干员参与相关作战任务。',
                            heijianmrfz: '黑键，莱塔尼亚平民，于维谢海姆事件中感染矿石病，经干员芙蓉介绍来罗德岛治疗，在源石技艺方面展现出不凡天赋。经考核后，作为外勤干员加入罗德岛。',
                            yifulitemrfz: '伊芙利特，前莱茵生命医疗对象，重度感染者。拥有极高的源石适应性，伴随有多发性点火现象。进入莱茵生命前的履历缺失。</br>现于罗德岛接受治疗，由医疗干员赫默担任监护与担保人。',
                            sphemomrfz: '赫默，《特里蒙科学伦理联合宣言》发起人，莱茵生命总辖构件科执行顾问，在医疗事务方面与罗德岛展开了深度合作。</br>本人拥有丰富的医学临床经验，在罗德岛接受矿石病相关治疗的同时，为罗德岛提供医学支持。',
                            saileiyamrfz: '塞雷娅，前莱茵生命防卫科主任。于生命科学、微生物学、源石技艺等领域皆有建树，同时于歼灭战、要员保全、异常事态处理等任务中表现出强大实力。</br>目前与罗德岛在科研等多个领域皆有合作，同时，正与罗德岛针对深入合作计划进行磋商。',
                            spweicaomrfz: '苇草，驻留罗德岛的维多利亚南部办事处期间，曾提出撤离申请，近期再次成功与罗德岛建立联络。目前正以深池名义带领小股部队在维多利亚境内活动，以救助被暴力胁迫的塔拉人为主要行动目标。',
                            huoerhaiyamrfz: '霍尔海雅，前梅兰德基金会所属特工，在凯尔希医生与博士的引荐下加入罗德岛。</br>擅长单兵作战，并且能够应对各种极端环境，在各类隐秘行动中发挥了重大价值。',
                            huangmrfz: '煌，罗德岛精英干员，在机动作战、歼灭战与突袭作战中体现出了专业的战斗技巧与战术素养。现由阿米娅带领，作为攻坚战的战术核心之一发挥作用。',
                            linglanmrfz: '铃兰，本名丽萨，姓氏应监护人要求隐去。铃兰小姐年纪尚小，但血统使她拥有了优秀的源石技艺天赋。在罗德岛接受治疗的同时，也在接受凯尔希医生的指导。在铃兰小姐主动提出申请后，被批准在有其他干员随行的情况下参与一些低难度任务。',
                            shanlingmrfz: '闪灵，萨卡兹医师，前萨卡兹医疗组织“赦罪师”成员，感染者援助团体“使徒”的一员。于源石技艺、战场急救、医学理论、临床医学等领域拥有渊博知识。</br>现作为医疗干员为罗德岛医疗部门提供源石技艺理论，并为多项行动提供战场医疗救护服务。',
                            maizhelunmrfz: '麦哲伦，莱茵生命实验室外勤专员，在合作协议的作用下，暂计划以罗德岛为据点，开始新一轮的探索活动。擅长操控高度模块化无人机，因地制宜进行攻击或支援友军。',
                            cuoemrfz: '嵯峨，东国出身的云游僧人。部分经历不明。原本只是因迷路而误入罗德岛办事处，经询问本人也有求职意向，于是随后通过测试加入罗德岛。在此之前似乎已与罗德岛干员炎熔建立关系。</br>十分善用随身的薙刀，身手矫健，作为先锋干员活跃在前线。',
                            palasimrfz: '帕拉斯，曾在米诺斯担任祭司职务。在离开雅赛努斯城邦去往阿克罗蒂村任职期间，带领当地民众进行了对萨尔贡周边部落长年侵扰的反抗，并在当地推行旅游及文化产业的发展。后因矿石病病况恶化，来到罗德岛进行秘密治疗。',
                            xiaguangmrfz: '瑕光，本名玛莉娅·临光，来自卡西米尔的年轻骑士，干员临光的妹妹，曾有骑士竞技经验，在各项测试中均展露出优秀的作战素质。应本人期望，与干员临光共同作为重装干员行动。',
                            spamiyamrfz: '阿米娅，罗德岛的公开领袖，在内部拥有最高执行权。虽然，从外表上看起来仅仅是个不成熟的少女，实际上，她却是深受大家信任的合格的领袖。</br>现在，阿米娅正带领着罗德岛，为了感染者的未来，为了让这片大地挣脱矿石病的阴霾而不懈努力。</br>史载，萨卡兹君王奎隆的佩剑，长度约在0.9到1.2米之间，宽约5厘米，材质不明，通体呈黑色，剑身铭刻萨卡兹传统文字，释作“争斗在此止歇”。',
                            zaolumrfz: '早露，切尔诺伯格事变前于切城某中学就读，并担任学生会长。</br>事变后加入罗德岛，隶属后勤部门，工作期间风评极佳。现经本人申请，作为狙击干员转入前线。',
                            spshihuaiyamrfz: '诗怀雅，龙门近卫局局长。</br>于汐斯塔度假归来，目前仅以私人身份视情况为罗德岛工作提供协助。</br>龙门近卫局委任状</br>经会议决定，兹任命碧翠克斯·施怀雅为近卫局局长。</br>望日后长定龙门，护一方平安，万民安生。</br>此状</br>龙门总督魏彦吾</br></br>诗怀雅捏着这张薄薄的委任状，郑重地收进抽屉里。纸张之轻、之薄，字之简约，在她手中却仿佛重若千钧。',
                            spsongzangrenmrfz: '送葬人，拉特兰公证所法定专业执行者，适用于拉特兰一至十三项公民权益，由现任拉特兰教宗伊万杰利斯塔十一世亲自授予“圣徒”封号。</br>拉特兰并未限制这位特殊的“圣徒”与我们的接触，公证所与罗德岛的合作关系正日趋紧密。干员送葬人现仍旧依合约为罗德岛提供服务，执行拉特兰公民权益相关任务。',
                            spjiexikamrfz: '杰西卡·布林雷，因私人原因离开黑钢基地后，选择去往拓荒地，成为了一名治安官。现作为当地办事处的合作干员为罗德岛提供帮助与支持。',
                            tifengmrfz: '提丰，活跃于萨米的萨卡兹，以猎人自居，对萨米的自然环境和潜在威胁有着充足的知识储备和应对技巧。现应干员麦哲伦邀请与罗德岛进行合作，协助罗德岛在萨米及无尽冰原地区的事务。',
                            fulankamrfz: '芙兰卡，黑钢国际生化防护相应人员安全保障专员，在行动护卫、战术突击、战术协同方面拥有丰富经验与强悍战力。</br>现于罗德岛接受矿石病治疗，并作为黑钢行动干员为罗德岛提供专业安保服务。',
                            xingjimrfz: '星极，哥伦比亚某神秘学组织的会员，经由合作协议被派驻至莱茵生命，职位为文献学顾问。由于共发性矿石病与妹妹一起来到罗德岛，在进行矿石病治疗期间通过测试成为干员。可使用独特的剑技，对近战目标造成类似法术的攻击效果。',
                            xingyuanmrfz: '星源，本名埃琳娜·乌比卡，莱茵生命能量科研究员。在罗德岛驻留期间则使用其原名作为代号以示区分。</br>使用自制法杖以极具特色的源石技艺制衡敌人，但比起前线作战，本人更希望在后方承接专业研究及器械维护方面的工作。',
                            weiweiannamrfz: '薇薇安娜·德罗斯特，莱塔尼亚施彤领选帝侯霍赫贝格家族后裔，前卡西米尔人气竞技骑士。经耀骑士临光举荐，在罗德岛登记为合作干员。</br>擅长使用光影类源石技艺，配以华丽的剑术技巧，能在战场上灵活御敌。驻留本舰期间将为罗德岛提供战术与外勤任务支援。',
                            zhanchemrfz: '战车，彩虹小队成员之一，强韧、爽朗且冷静，极为擅长阵地战。</br>主要武器为DP-28轻机枪以及SHUMIKHALAUNCHER“喧闹”发射器，他是整个小队的火力中心，毋庸置疑的战场主宰。',
                            shanjimrfz: '闪击，彩虹小队的成员之一，为人幽默和蔼，擅长在室内与街巷环境作战。</br>以手枪为主要武器，同时携带经G52型闪光战术护盾，一旦在近战中开启，将能致盲几米内的作战目标，为整个小队提供战术优势。',
                            shuanghuamrfz: '霜华，彩虹小队成员之一，坚定、专注、充满活力，擅长在野外环境作战。</br>除了自身携带的枪械外，霜华携带了SterlingMK2机械夹板“迎宾踏垫”，通过精妙布设，对敌方造成阻碍，为整个小队提供战术支持。',
                            spxiaoyanmrfz: '艾雅法拉，火山学家，天灾信使。近年参与拍摄多部火山纪录片，并参与撰写出版火山相关书籍。现于罗德岛继续接受治疗，并视需求参与包括天灾研究在内的多项活动。',
                            suxinmrfz: '塑心，本名阿尔图罗·吉亚洛，出身于拉特兰、活跃于泰拉大地的著名音乐家。受莱塔尼亚帝国宫廷、拉特兰教皇厅委托，罗德岛与两方签署协议确认，在受相应人员的严格监管下，允许其以干员“塑心”身份暂留罗德岛。',
                            bohuimrfz: '柏喙，雷神工业装备设计师之女，遭遇工厂工人暴动而不幸感染矿石病。</br>现作为医疗救助对象加入罗德岛，依照本人的意愿，允许调入作战部门，她的剑术如同她纺线一般优雅而有韵律。',
                            baimianxiaomrfz: '......</br>已在20593个搜索结果中，为您选择了相对精准的答案。</br>白面鸮，前莱茵生命公司，数据维护专员。在医疗类源石技艺领域取得不菲成就，于医疗数据维护，常规医疗方案应用，多项目医疗行为等相关领域，拥有丰富经验。</br>现于罗德岛担任医疗干员，亦就职于医疗部门，某临床实验小组，项目领头人：赫默医生。同时，为罗德岛提供若干项医疗项目的相关辅助工作。</br>......',
                            hedeleimrfz: '赫德雷，前萨卡兹佣兵头目。早期履历不详，曾作为护卫部队的一员参与了巴别塔的转移，在巴别塔解体后离开。此后曾以整合运动所属萨卡兹雇佣兵的身份与伊内丝、W一起出现在切尔诺伯格，并在切尔诺伯格事件后消失。再次出现时，赫德雷已在伦蒂尼姆的军事委员会中任职。在取得重要情报后，赫德雷离开军事委员会，同罗德岛重新取得联系。在与阿米娅沟通后，赫德雷再次和罗德岛签订了战略合作条款。',
                            zhisongmrfz: '止颂，本名莱辛·梅耶尔，莱塔尼亚路德维格大学旁听生，随干员黑键一同来到罗德岛。经过充分沟通，莱辛与罗德岛签订了合作协议，为罗德岛在莱塔尼亚境内的行动提供协助。',
                            cimeimrfz:'刺玫，本名玛格达尔·肖，布伦特伍德镇上血魔大君仪式的幸存者，小镇近乎大半被夷为废墟，她所珍爱的家传温室也被彻底摧毁。</br>受伦蒂尼姆市民自救军成员洛洛与费斯特的邀请，玛格达尔加入自救军，以后勤人员的身份提供帮助，后加入罗德岛。伦蒂尼姆事件结束之后，玛格达尔主动申请回到维多利亚重建家乡，并担任当地罗德岛办事处的联络员。',
                            hongmrfz:'红，身份不明，履历缺失，由凯尔希医生接收、监护并担保。于机动作战，特种作战与隐秘作战中表现出极高天赋，成绩斐然。</br>现于凯尔希医生的指导下，作为特种干员为罗德岛提供服务。',
                            
                            //剧情角色
                            acemrfz: "罗德岛精英干员Ace，参与切尔诺伯格行动，因掩护博士救援小队撤退而阵亡。</br></br><span class=firetext>罗德岛会铭记您的贡献。</span>",
                            baocunzhemrfz: '摘自PRTS的梗概</br>‘保存者’，前人类文明休眠计划的人格模拟，也是特雷弗·弗里斯顿。在4,765,403天的时光中践行着前文明的计划守望者庞大的石棺群，但在漫长的等待与空寂中失去了希望，直到克丽斯腾来访后的对谈让他对泰拉重新燃起了信心，决定以石棺中所有人永远沉睡的代价将最后的前文明能源供给为克丽斯腾突破天空屏障的巨炮。知晓凯尔希的本质，通过“辩论”的方式了解了博士与凯尔希的决心，最后请求凯尔希删去他这万年来的记忆，但在最后一刻被误入的霍尔海雅当作“神明”，被其存储记忆的源石技艺抢救下来，在保存了弗里斯顿最基础记忆的情况下被转制成为罗德岛“自研作业平台”Friston-3。',
                            yizumikemrfz: '临近进化奇点的完美生物，大群的建言者与引领者，“后生的初生”，海嗣。',
                            kelisitengmrfz: '摘自PRTS的梗概</br>克里斯滕·莱特，莱茵生命总辖构件科主任兼联合创始人，特里蒙理工大学高能物理博士，出身于著名的莱特家族。塞雷娅称呼其为“总辖”。</br>与塞雷娅是大学同学，又是最要好的朋友，心有灵犀，互相认为对方是唯一理解自己的人。两人一拍即合，一同创建了莱茵生命。但在炎魔事件后，克丽斯腾被塞雷娅指出其行为越过了她的底线，导致塞雷娅与克丽斯腾决裂，离开莱茵生命。</br>359号基地事件期间，斐尔迪南企图架空克丽斯腾的权力，但在塞雷娅与克丽斯腾的磋商下，斐尔迪南的图谋最终失败。',
                            shuangxingmrfz: '摘自PRTS的梗概</br>霜星，本名叶莲娜，卡特斯族，整合运动法术部队干部，雪怪小队领袖。小时候在源石矿场目睹了家人被乌萨斯军官处死，后被爱国者的游击小队救下，被爱国者收为养女并与爱国者一同加入整合运动。拥有特殊体质，体温极低，并能释放出强力的寒冰系源石技艺，但矿石病感染已经进入晚期。在切尔诺伯格分城与罗德岛战斗时与博士结识，在交战中逐渐认同了罗德岛的理念。昏迷后被幻影弩手带走打算撤回切尔诺伯格，醒来时得知了雪怪小队阵亡的消息，返回龙门与罗德岛战斗，决定用自己最后的生命坚定罗德岛的决心。最终击溃了罗德岛的防线，却耗尽了自己的全部精力。临死前源石病病症消失，体温回归正常并表示愿意加入罗德岛，最后死在博士的怀里。遗体被博士带回罗德岛，由迷迭香进行处理。',
                        },
                        skill: {
                            //获得蓄力点
                            _sjzx_chargeGet: {
                                charlotte: true,
                                direct: true,
                                silent: true,
                                popup: false,
                                lastDo: true,
                                trigger: {
                                    global: "phaseBefore",
                                    player: "enterGame",
                                },
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    var skills = player.getSkills(null, false, false);
                                    for (i of skills) {
                                        if (lib.skill[i].chargeGet) {
                                            player.addMark('charge', lib.skill[i].chargeGet);
                                        }
                                    }
                                },
                            },
                            //用于统计每个角色因重铸而获取的牌
                            _sjzx_recastGain: {
                                //Ach_mrfz:true,
                                charlotte: true,
                                global: '_sjzx_recastGain_total_mrfz',
                                subSkill: {
                                    total_mrfz: {
                                        charlotte: true,
                                        forced: true,
                                        lastDo: true,
                                        popup: false,
                                        silent: true,
                                        trigger: { player: 'gainAfter' },
                                        filter: function (event, player) {
                                            return event.getParent(2).name == 'recast';
                                        },
                                        content: function () {
                                            if (!player.storage._recastGain) player.storage._recastGain = 0;
                                            player.storage._recastGain++;
                                        },
                                    },
                                },
                            },

                            //----成就获取----//

                            //麦哲伦 生生不息 一局内发动过至少3次【勘查】且一回合内至少造成5点伤害
                            _sjzxAch_shengshengbuximrfz: {
                                Ach_mrfz: true,
                                trigger: {
                                    player: 'phaseEnd',
                                },
                                filter: function (event, player) {
                                    if (lib.config.isAchMode == false) return false;
                                    if (game.me.name != 'maizhelunmrfz' || lib.config.mode != 'identity' || lib.config.AchList_mrfz.shengshengbuximrfz == true) return false;
                                    return player.countMark('kanchamrfz') == 3 && player.getStat().damage >= 5;
                                },
                                content: function () {
                                    mrfzfuc.ShowGetAch('shengshengbuximrfz');
                                },
                            },

                            //银灰 难猜的人 一局游戏因雪变造成至少两次伤害
                            _sjzxAch_nancaiderenmrfz: {
                                Ach_mrfz: true,
                                trigger: {
                                    player: 'xuebianmrfzAfter',
                                },
                                filter: function (event, player) {
                                    if (lib.config.isAchMode == false) return false;
                                    if (game.me.name != 'yinhuimrfz' || lib.config.mode != 'identity' || lib.config.AchList_mrfz.nancaiderenmrfz == true) return false;
                                    return player.countMark('xuebianmrfz') >= 2;
                                },
                                content: function () {
                                    mrfzfuc.ShowGetAch('nancaiderenmrfz');
                                },
                            },

                            //艾丽妮 灯火微明 一局游戏发动过至少3次执灯且每次均有至少两名其他角色因此摸牌
                            _sjzxAch_denghuoweimingmrfz: {
                                Ach_mrfz: true,
                                trigger: {
                                    player: 'zhidengmrfzAfter',
                                },
                                filter: function (event, player) {
                                    if (lib.config.isAchMode == false) return false;
                                    if (game.me.name != 'ailinimrfz' || lib.config.mode != 'identity' || lib.config.AchList_mrfz.denghuoweimingmrfz == true) return false;
                                    return player.storage._sjzxAch_denghuoweimingmrfz >= 3;
                                },
                                content: function () {
                                    mrfzfuc.ShowGetAch('denghuoweimingmrfz');
                                },
                            },

                            //克丽斯腾 总辖之愿 作为主公开局，在死亡的情况下获胜
                            _sjzxAch_zongxiazhiyuanmrfz: {
                                Ach_mrfz: true,
                                trigger: {
                                    player: 'phaseBegin',
                                },
                                filter: function (event, player) {
                                    if (lib.config.isAchMode == false) return false;
                                    if (game.me.name != 'kelisitengmrfz' || lib.config.mode != 'identity' || lib.config.AchList_mrfz.zongxiazhiyuanmrfz == true) return false;
                                    return game.me.identity == 'zhu' && mrfzfuc.AchData_tmp['_sjzxAch_zongxiazhiyuanmrfz'] != true;
                                },
                                content: function () {
                                    mrfzfuc.AchData_tmp['_sjzxAch_zongxiazhiyuanmrfz'] = true;
                                },
                            },

                            //艾雅法拉 火山 一回合内至少造成5点伤害
                            _sjzxAch_huoshanmrfz: {
                                Ach_mrfz: true,
                                trigger: {
                                    player: 'phaseEnd',
                                },
                                filter: function (event, player) {
                                    if (lib.config.isAchMode == false) return false;
                                    if (game.me.name != 'xiaoyangmrfz' || lib.config.mode != 'identity' || lib.config.AchList_mrfz.huoshanmrfz == true) return false;
                                    return player.getStat().damage >= 6;
                                },
                                content: function () {
                                    mrfzfuc.ShowGetAch('huoshanmrfz');
                                },
                            },


                            //死亡配音
                            _sjzx_dieaudio: {
                                forced: true,
                                charlotte: true,
                                popup: false,
                                lastDo: true,
                                trigger: {
                                    player: 'dieBegin',
                                },
                                unique: true,
                                forceDie: true,
                                content: function () {
                                    if (typeof lib.config.dieAudio === undefined) lib.config.dieAudio = 'CN';
                                    game.playAudio('..', 'extension', '明日方舟/audio/' + lib.config.dieAudio + '/die', trigger.player.name != 'unknown' ? trigger.player.name : trigger.player.name1);
                                },
                            },
                            //艾丽妮
                            zhidengmrfz: {
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                audio: 2,
                                content: function () {
                                    "step 0"
                                    var num = player.hp;
                                    player.chooseTarget(get.prompt2('zhidengmrfz'), [0, num], function (card, player, target) {
                                        return target.hp <= player.hp;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets;
                                        if (event.versus) {
                                            targets = game.filterPlayer(function (current) {
                                                return current != player && current.side == player.side;
                                            });
                                        }
                                        else {
                                            targets = result.targets;
                                            player.draw();
                                        }

                                        player.logSkill('zhidengmrfz', targets);
                                        game.asyncDraw(targets);
                                        if (!player.storage._sjzxAch_denghuoweimingmrfz) player.storage._sjzxAch_denghuoweimingmrfz = 0;
                                        if (targets.length >= 2) player.storage._sjzxAch_denghuoweimingmrfz++;

                                    }
                                },
                            },
                            shenpanmrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return player.canCompare(target);
                                },
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                content: function () {
                                    "step 0"
                                    player.chooseToCompare(target);
                                    "step 1"
                                    if (result.bool) {
                                        target.addTempSkill('shenpanmrfz2');
                                        player.addTempSkill('shenpanmrfz3');
                                        player.storage.shenpanmrfz3 = target;
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                                ai: {
                                    order: 10,
                                    result: {
                                        player: function (player) {
                                            if (player.countCards('h', 'sha') > 0) return 0.6;
                                            var num = player.countCards('h');
                                            if (num > player.hp) return 0;
                                            if (num == 1) return -2;
                                            if (num == 2) return -1;
                                            return -0.7;
                                        },
                                        target: function (player, target) {
                                            var num = target.countCards('h');
                                            if (num == 1) return -1;
                                            if (num == 2) return -0.7;
                                            return -0.5
                                        },
                                    },
                                    threaten: 1.3,
                                },
                            },
                            "shenpanmrfz2": {
                                charlotte: true,
                                mark: true,
                                intro: {
                                    content: "伊比利亚审判庭裁决你为异端",
                                },
                            },
                            "shenpanmrfz3": {
                                mod: {
                                    globalFrom: function (from, to) {
                                        if (to == from.storage.shenpanmrfz3) {
                                            return -Infinity;
                                        }
                                    },
                                },
                                trigger: {
                                    player: "useCardToPlayered",
                                },
                                forced: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    return event.target.hasSkill('shenpanmrfz2') && event.target.countCards('he') > 0;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.target.chooseToDiscard('he', true, 1);
                                    'step 1'
                                    if (result.cards.length == 1) {
                                        event._result = { bool: true, links: result.cards.slice(0) };
                                    }
                                    'step 2'
                                    if (result.links) player.gain(result.links, 'gain2');
                                },
                            },
                            liechaomrfz: {
                                audio: 2,
                                trigger: {
                                    source: "damageBegin1",
                                },
                                filter: function (event) {
                                    if (event.parent.name == '_lianhuan' || event.parent.name == '_lianhuan2') return false;
                                    if (event.card) {
                                        if (event.player.countCards('he') == 0) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    trigger.num++;
                                },
                                ai: {
                                    effect: {
                                        player: function (card, player, target, current) {
                                            if (card.name == 'sha' && target.countCards('h') == 0 && !target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                            })) return [1, 0, 1, -3];
                                        },
                                    },
                                },
                            },
                            //鸿雪
                            ruibimrfz: {
                                audio: 3,
                                enable: "phaseUse",
                                derivation: ['dazijimrfzskill'],
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0 && !player.isDisabled(1) && !player.hasCard(function (card) {
                                        return card.name == 'dazijimrfz';
                                    }, 'e');
                                },
                                filterCard: true,
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                content: function () {
                                    var card = game.createCard('dazijimrfz', 'heart', 2);
                                    player.$gain2(card);
                                    game.delayx();
                                    player.equip(card);
                                },
                                group: "ruibimrfz2",
                                ai: {
                                    order: 12,
                                    result: {
                                        player: 1,
                                    },
                                },
                            },
                            "ruibimrfz2": {
                                trigger: {
                                    global: "phaseBefore",
                                    player: 'enterGame',
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.isDisabled(1) && (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    var card = game.createCard('dazijimrfz', 'heart', 2);
                                    player.$gain2(card);
                                    game.delayx();
                                    player.equip(card);
                                    player.removeSkill('ruibimrfz2');
                                    player.logSkill('ruibimrfz');
                                },
                            },
                            sujimrfz: {
                                audio: 2,
                                trigger: {
                                    source: "damageSource",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (event.player == player) return false;
                                    if (event.card.name != 'sha' || !player.isPhaseUsing()) return false;
                                    return event.player.isAlive();
                                },
                                content: function () {
                                    trigger.player.addSkill('sujimrfz2');
                                },
                                group: ["sujimrfz_damage"],
                            },
                            "sujimrfz2": {
                                charlotte: true,
                                mark: true,
                                intro: {
                                    content: "鸿雪记住了你的弱点",
                                },
                            },
                            sujimrfz_damage: {
                                direct: true,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!event.card || event.card.name != 'sha' || player.hasSkill('sujimrfz_damage_ban')) return false;
                                    for (var i = 0; i < event.targets.length; i++) {
                                        var target = event.targets[i];
                                        if (target.hasSkill('sujimrfz2')) return true;
                                    }
                                },
                                content: function () {
                                    for (var i = 0; i < trigger.targets.length; i++) {
                                        var target = trigger.targets[i];
                                        if (target.hasSkill('sujimrfz2')) {
                                            target.addTempSkill('qinggang2');
                                            target.storage.qinggang2.add(trigger.card);
                                            target.markSkill('qinggang2');
                                            target.addTempSkill('sujimrfz_damage_add');
                                            target.storage.sujimrfz_damage = {
                                                card: trigger.card,
                                            }
                                        }
                                    }
                                    player.addTempSkill('sujimrfz_damage_ban', 'phaseEnd');
                                },
                                subSkill: {
                                    add: {
                                        onremove: function (player) {
                                            delete player.storage.sujimrfz_damage;
                                        },
                                        trigger: {
                                            player: "damageBegin3",
                                        },
                                        filter: function (event, player) {
                                            var info = player.storage.sujimrfz_damage;
                                            return event.card && event.card == info.card;
                                        },
                                        silent: true,
                                        popup: false,
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            trigger.num++;
                                            player.logSkill('sujimrfz');
                                        },
                                    },
                                    ban: {
                                        charlotte: true,
                                    },
                                },
                            },
                            //艾雅法拉
                            cuofengmrfz: {
                                group: ["cuofengmrfz_mark1", "cuofengmrfz_mark2"],
                                audio: 2,
                                preHidden: true,
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function (event, player) {
                                    var num = player.countMark('cuofengmrfz_mark1') + player.countMark('cuofengmrfz_mark2');
                                    if (num >= player.maxHp - 1) return false;
                                    return player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    var list = ['摸牌阶段', '结束阶段'];
                                    player.chooseControl(list, function () {
                                    });
                                    'step 1'
                                    if (result.control == '摸牌阶段') {
                                        player.addMark('cuofengmrfz_mark1', 1, false)
                                    }
                                    else {
                                        player.addMark('cuofengmrfz_mark2', 1, false);
                                    }
                                    'step 2'
                                    player.chooseToDiscard('he', true, 1);
                                },
                                ai: {
                                    maixie: true,
                                    "maixie_hp": true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                            if (get.tag(card, 'damage')) return [1, 0.55];
                                        },
                                    },
                                },
                            },
                            "cuofengmrfz_mark1": {
                                intro: {
                                    content: "摸牌阶段额外摸#张牌",
                                },
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                filter: function (event, player) {
                                    return player.countMark('cuofengmrfz_mark1') > 0;
                                },
                                forced: true,
                                content: function () {
                                    var num = player.countMark('cuofengmrfz_mark1');
                                    trigger.num += num;
                                },
                            },
                            "cuofengmrfz_mark2": {
                                intro: {
                                    content: "结束阶段摸#张牌",
                                },
                                trigger: {
                                    player: "phaseJieshuBegin",
                                },
                                filter: function (event, player) {
                                    return player.countMark('cuofengmrfz_mark2') > 0;
                                },
                                forced: true,
                                content: function () {
                                    var num = player.countMark('cuofengmrfz_mark2');
                                    player.draw(num);
                                },
                            },
                            chengzhimrfz: {
                                skillAnimation: true,
                                animationColor: "wood",
                                audio: 2,
                                juexingji: true,
                                unique: true,
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                filter: function (event, player) {
                                    var num = player.countMark('cuofengmrfz_mark1') + player.countMark('cuofengmrfz_mark2');
                                    if (num != player.maxHp - 1) return false;
                                    return !player.storage.chengzhimrfz;
                                },
                                forced: true,
                                content: function () {
                                    player.loseMaxHp();
                                    player.addSkill('zhuzhimrfz');
                                    game.log(player, '获得了技能', '#g【逐志】')
                                    player.awakenSkill(event.name);
                                    player.storage[event.name] = true;
                                },
                            },
                            zhuzhimrfz: {
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                audio: 2,
                                filter: function (event, player) {
                                    if (player.hp == 1 && player.countCards('he') <= 0) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    if (player.hp > 1) {
                                        player.damage('fire');
                                    }
                                    else {
                                        player.chooseToDiscard('he', true, 1);
                                    }
                                    'step 1'
                                    var num1 = player.countMark('cuofengmrfz_mark1') + player.countMark('cuofengmrfz_mark2');
                                    var num2 = Math.floor(num1 / 2);
                                    player.addTempSkill('zhuzhimrfz_mark', { player: 'phaseAfter' });
                                    player.draw(num2);
                                },
                                ai: {
                                    basic: {
                                        order: 1,
                                    },
                                    result: {
                                        player: function (player) {
                                            if (player.hp < 2) return -1;
                                            return 1;
                                        },
                                    },
                                },
                            },
                            "zhuzhimrfz_mark": {
                                mark: true,
                                intro: {
                                    content: "黑暗追着她，她追着光。",
                                },
                                init: function (player, skill) {
                                    if (!player.storage[skill]) player.storage[skill] = 0;
                                },
                                onremove: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        var n = player.countMark('cuofengmrfz_mark1') + player.countMark('cuofengmrfz_mark2');
                                        return num + n;
                                    },
                                    cardUsable: function (card, player, num) {
                                        var n = player.countMark('cuofengmrfz_mark1') + player.countMark('cuofengmrfz_mark2');
                                        if (card.name == 'sha') return num - 1 + n;
                                    },
                                },
                            },
                            //银灰
                            moucunmrfz: {
                                trigger: {
                                    global: "roundStart",
                                },
                                intro: {
                                    content: "【鹰视】中的X为#。",
                                },
                                audio: 2,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.line2(game.filterPlayer(function (current) {
                                        if (current.hasSkill('moucunmrfz3')) {
                                            current.removeSkill('moucunmrfz3');
                                            return true;
                                        }
                                    }).concat(result.targets), 'green');
                                    player.removeMark('moucunmrfz2', player.countMark('moucunmrfz2'));
                                    'step 1'
                                    player.chooseCardTarget({
                                        prompt: "请交给一名其他角色一至两张牌",
                                        filterCard: true,
                                        filterTarget: function (card, player, target) {
                                            var group = game.me.group;
                                            return player != target && target.group !== group;
                                        },
                                        ai1: function (card) {
                                            return 10 - get.value(card);
                                        },
                                        ai2: function (target) {
                                            if (get.attitude(player, target) <= 0) return get.attitude(player, target);
                                            return get.attitude(player, target) > 0;
                                        },
                                        selectCard: [1, 2],
                                        position: "he",
                                    });
                                    'step 2'
                                    if (result.bool) {
                                        result.targets[0].gain(result.cards, player, 'giveAuto');
                                        result.targets[0].addSkill('moucunmrfz3');
                                    }
                                },
                                group: "moucunmrfz2",
                            },
                            yingshimrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    return game.hasPlayer((current) => lib.skill.yingshimrfz.filterTarget(null, player, current));
                                },
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h') > 0;
                                },
                                content: function () {
                                    var num = player.countMark('moucunmrfz');
                                    if (num < 1) {
                                        player.viewHandcards(target);
                                    }
                                    else {
                                        var max = target.countCards('h');
                                        if (max > num) return player.gainPlayerCard(num, target, 'h', true, 'visible');
                                        if (num >= max) return player.gainPlayerCard(max, target, 'h', true, 'visible');
                                    }
                                    game.log(player, '观看了', target, '的手牌');
                                },
                                ai: {
                                    order: 6,
                                    result: {
                                        player: 0.5,
                                        target: function (player, target) {
                                            if (target.hasSkillTag('noh')) return 0;
                                            return -1;
                                        },
                                    },
                                },
                            },
                            "moucunmrfz2": {
                                trigger: {
                                    global: "phaseUseEnd",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (!event.player.hasSkill('moucunmrfz3')) return false;
                                    return event.player.getHistory('useCard', function (evt) {
                                        return evt.getParent('phaseUse') == event;
                                    }).length > 0;
                                },
                                content: function () {
                                    var list = [];
                                    player.logSkill('moucunmrfz');
                                    trigger.player.getHistory('useCard', function (evt) {
                                        if (evt.getParent('phaseUse') == trigger) list.add(get.type2(evt.card));
                                    });
                                    player.draw(list.length);
                                    if (list.length > 2) {
                                        player.addMark('moucunmrfz', 1, false);
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                            },
                            "moucunmrfz3": {
                                charlotte: true,
                                mark: true,
                                intro: {
                                    content: "银灰前来求学",
                                },
                            },
                            //灵知
                            siyongmrfz: {
                                audio: 2,
                                trigger: {
                                    player: "loseEnd",
                                },
                                filter: function (event, player) {
                                    if (event.getParent().name != 'useCard' || player != _status.currentPhase) return false;
                                    var list = player.getStorage('siyongmrfz2');
                                    for (var i of event.cards) {
                                        if (!list.contains(get.suit(i, player))) return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.siyongmrfz2) player.storage.siyongmrfz2 = [];
                                    for (var i of trigger.cards)
                                        player.storage.siyongmrfz2.add(get.suit(i, player));
                                    player.storage.siyongmrfz2.sort();
                                    player.addTempSkill('siyongmrfz2');
                                    player.markSkill('siyongmrfz2');
                                    'step 1'
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.countCards('he') > 0;
                                    })) {
                                        player.chooseTarget('请选择一名其他角色获得其一张牌', true, function (card, player, target) {
                                            return target != player && target.countCards('he') > 0;
                                        }).set('ai', function (target) {
                                            var att = get.attitude(player, target);
                                            if (att >= 0) return 0;
                                            if (target.countCards('he', function (card) {
                                                return get.value(card) > 5;
                                            })) return -att;
                                            return Math.random();
                                        });
                                    }
                                    else {
                                        player.draw();
                                        event.finish();
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.gainPlayerCard(1, target, 'he', true);
                                    }

                                },
                                forced: true,
                            },
                            "siyongmrfz2": {
                                onremove: true,
                                intro: {
                                    content: "当前已使用花色：$",
                                },
                            },
                            //旧流明
                            yijianmrfz: {
                                trigger: {
                                    player: "damageBegin",
                                },
                                audio: 2,
                                forced: true,
                                usable: 1,
                                content: function () {
                                    trigger.num--;
                                },
                            },
                            weiguangmrfz: {
                                audio: "new_weiguangmrfz",
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                forced: true,
                                global: ["weiguangmrfz_mark", "weiguangmrfz_losemark"],
                                filter: function (event, player) {
                                    return !player.hasMark("weiguangmrfz_mark");
                                },
                                content: function () {
                                    player.addMark('weiguangmrfz_mark', 1);
                                },
                                group: "weiguangmrfz2",
                            },
                            "weiguangmrfz_mark": {
                                marktext: "火光",
                                intro: {
                                    name: "火光",
                                    content: "流明希望人们能有余力擦去脸上的灰尘",
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('weiguangmrfz_mark');
                                    },
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('weiguangmrfz_mark');
                                    },
                                },
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.hasMark("weiguangmrfz_mark");
                                },
                                content: function () {
                                    trigger.num += player.countMark("weiguangmrfz_mark");
                                },
                            },
                            "weiguangmrfz_losemark": {
                                trigger: {
                                    player: "phaseJieshuBegin",
                                },
                                forced: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    return player.hasMark("weiguangmrfz_mark");
                                },
                                content: function () {
                                    "step 0"
                                    player.drawTo(Math.min(5, player.getHandcardLimit()));
                                    "step 1"
                                    player.removeMark("weiguangmrfz_mark", 1);
                                    player.logSkill('new_weiguangmrfz');
                                },
                            },
                            "weiguangmrfz2": {
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: 1,
                                prompt: "选择一名角色令其获得一个“火光”标记并对自己造成一点伤害，若该角色是你，你流失一点体力",
                                content: function () {
                                    if (target == player) {
                                        player.loseHp();
                                    }
                                    player.damage();
                                    target.addMark('weiguangmrfz_mark');
                                    player.logSkill('new_weiguangmrfz');
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        target: function (player, target) {
                                            if (target.countCards('h') > 2) return 5;
                                            if (player == target && player.getDamagedHp() == 0) return 5;
                                            return 2;
                                        }
                                    },
                                    threaten: 2
                                }
                            },
                            //斥罪
                            zhidianmrfz: {
                                audio: 2,
                                trigger: {
                                    global: "roundStart",
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = lib.inpile;
                                    var list2 = [];
                                    for (var i = 0; i < list.length; i++) {
                                        var name = list[i];
                                        if (name == 'shan' || name == 'wuxie') continue;
                                        var type = get.type(name);
                                        if (name == 'sha') {
                                            list2.push(['基本', '', 'sha']);
                                            list2.push(['基本', '', 'sha', 'fire']);
                                            list2.push(['基本', '', 'sha', 'thunder']);
                                        }
                                        else if (type == 'basic') {
                                            list2.push(['基本', '', list[i]]);
                                        }
                                        else if (type == 'trick') {
                                            list2.push(['锦囊', '', list[i]]);
                                        }
                                    }
                                    if (!list.length) event.finish();
                                    else player.chooseButton([get.prompt('zhidianmrfz'), [list, 'vcard']]).set('ai', function (button) {
                                        switch (button.link[2]) {
                                            case 'wuxie': return 0.6 + Math.random();
                                            case 'wuzhong': case 'dongzhuxianji': return 0.5 + Math.random();
                                            case 'guohe': case 'zhujinqiyuan': return 0.4 + Math.random();
                                            case 'sha': return 1 + Math.random();
                                            default: return Math.random();
                                        }
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var name = result.links[0][2];
                                        player.logSkill('zhidianmrfz');
                                        player.storage.zhidianmrfz = name;
                                        player.markSkill('zhidianmrfz');
                                        game.log(player, '声明了', '#g' + get.translation(name));
                                    }
                                },
                                intro: {
                                    content: "已声明【$】",
                                },
                                group: ["zhidianmrfz_use"],
                            },
                            "zhidianmrfz_use": {
                                trigger: {
                                    global: "useCard1",
                                },
                                silent: true,
                                forced: true,
                                charlotte: true,
                                popup: false,
                                firstDo: true,
                                filter: function (event, player) {
                                    return event.card.name == player.storage.zhidianmrfz;
                                },
                                content: function () {
                                    var target = trigger.player;
                                    "step 0"
                                    if (target == player) {
                                        player.chooseToDiscard('he', true, 1);
                                        player.logSkill('zhidianmrfz');
                                    }
                                    else {
                                        if (target.countCards('he') == 0) event._result = { index: 1 };
                                        else {
                                            var str = get.translation(player);
                                            target.chooseControl().set('choiceList', [
                                                '交给' + str + '一张牌',
                                                '失去一点体力',
                                            ]);
                                        }
                                    }
                                    "step 1"
                                    if (target !== player) {
                                        player.logSkill('zhidianmrfz');
                                        if (result.index == 0) { target.chooseCard('he', true); }
                                        else {
                                            target.loseHp();
                                        }
                                    }
                                    "step 2"
                                    if (target !== player) {
                                        if (result.bool) {
                                            target.give(result.cards, player, true);
                                        }
                                    }

                                },
                            },
                            pijimrfz: {
                                audio: 2,
                                trigger: {
                                    player: "damageEnd",
                                },
                                filter: function (event, player) {
                                    if (event.source == player) return false;
                                    return (event.source != undefined);
                                },
                                forced: true,
                                logTarget: "source",
                                content: function () {
                                    var num = player.maxHp - player.hp;
                                    if (num < 2) trigger.source.damage();
                                    if (num > 1) trigger.source.damage(2);
                                },
                                ai: {
                                    "maixie_defend": true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (player.hasSkillTag('jueqing', false, target)) return [1, -1];
                                            return 0.8;
                                            // if(get.tag(card,'damage')&&get.damageEffect(target,player,player)>0) return [1,0,0,-1.5];
                                        },
                                    },
                                },
                            },
                            //阿米娅
                            tongganmrfz: {
                                audio: 2,
                                trigger: {
                                    global: "drawAfter",
                                },
                                usable: 3,
                                forced: true,
                                filter: function (event, player) {
                                    return event.player !== player;
                                },
                                content: function () {
                                    player.draw();
                                },
                                group: "tonggan_discardmrfz",
                                ai: {
                                    threaten: 2,
                                },
                            },
                            tonggan_discardmrfz: {
                                audio: 2,
                                trigger: {
                                    global: "loseAfter",
                                },
                                usable: 3,
                                filter: function (event, player) {
                                    if (event.type != 'discard') return false;
                                    return event.player !== player;
                                },
                                forced: true,
                                content: function () {
                                    player.chooseToDiscard('he', true, 1);
                                },
                            },
                            qinghemrfz: {
                                audio: 2,
                                zhuSkill: true,
                                trigger: {
                                    player: 'loseAfter',
                                    global: 'loseAsyncAfter',
                                },
                                filter: function (event, player) {
                                    if (player == _status.currentPhase) return false;
                                    return event.type == 'discard' && event.getl(player).cards2.length > 0 && !player.hasSkill('qinghemrfz_ban');
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var target = _status.currentPhase;
                                    target.chooseBool('【亲和】：是否让' + get.translation(player) + '其弃置的牌中的一张牌？').set('choice', get.attitude(target, player) > 0);
                                    'step 1'
                                    if (result.bool) {
                                        var target = _status.currentPhase;
                                        player.addTempSkill('qinghemrfz_ban', 'phaseEnd');
                                        if (trigger.cards.length == 1) {
                                            player.gain(trigger.cards, 'gain2');
                                            event.finish();
                                        }
                                        if (trigger.cards.length > 1) {
                                            target.chooseButton(['选择获得令其获得其中的一张牌', trigger.cards.slice(0)], true).ai = function (button) {
                                                return get.value(button.link);
                                            };
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.links) {
                                        player.logSkill('qinghemrfz');
                                        player.gain(result.links, 'gain2');
                                    }
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                    },
                                },
                            },
                            //泥岩
                            wotumrfz: {
                                audio: 2,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (!event.cards) return false;
                                    return event.cards.length == 0 && !player.hasSkill('wotumrfz_ban');
                                },
                                frequent: true,
                                content: function () {
                                    player.changeHujia();
                                    player.addTempSkill('wotumrfz_ban', 'roundStart');
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                    },
                                },
                            },
                            sutumrfz: {
                                audio: 2,
                                trigger: {
                                    player: "useCardAfter",
                                },
                                filter: function (event, player) {
                                    if (!event.card.isCard) return false;
                                    if (player.countCards('h') !== player.hp) return false;
                                    return event.cards && event.cards.length == 1;
                                },
                                content: function () {
                                    "step 0"
                                    var list = [];
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        var name = lib.inpile[i];
                                        if (name == 'sha') {
                                            list.push(['基本', '', 'sha']);
                                            for (var j of lib.inpile_nature) list.push(['基本', '', 'sha', j]);
                                        }
                                        else if (get.type(name) == 'basic') list.push(['基本', '', name]);
                                        else if (get.type(name) == 'trick') list.push(['锦囊', '', name]);
                                    }
                                    player.chooseButton(['塑土', [list, 'vcard']], true).set('ai', function (button) {
                                        var player = _status.event.getParent().player, card = {
                                            name: button.link[2],
                                            nature: button.link[3],
                                        };
                                        if (game.hasPlayer(function (current) {
                                            return current != player && get.attitude(player, current) < 0 && current.countCards('he') > 0 && get.distance(player, current) < 2;
                                        })) return 'shunshou';
                                        if (game.hasPlayer(function (current) {
                                            return current != player && get.attitude(player, current) < 0 && current.countCards('he') == 0 && player.inRange(current);
                                        })) return 'sha';
                                        return player.getUseValue(card, null, true) * _status.event.att;
                                    }).set('att', get.attitude(event.target, player) > 0 ? 1 : -1);
                                    "step 1"
                                    if (result.bool) {
                                        var name = result.links[0][2];
                                        player.chooseUseTarget({ name: name, isCard: true }, true);
                                    }
                                },
                            },
                            //澄闪
                            dianshanmrfz: {
                                mark: true,
                                locked: true,
                                zhuanhuanji: true,
                                marktext: "☯",
                                intro: {
                                    content: function (storage, player, skill) {
                                        if (player.storage.dianshanmrfz !== true) return '锁定技，当你成为其他角色使用的黑色牌的目标时,你对一名其他角色造成一点雷属性伤害';
                                        return '锁定技，当你成为其他角色使用的黑色牌的目标时,你弃置一名其他角色一张牌。';
                                    },
                                },
                                audio: 'dianyongmrfz',
                                trigger: {
                                    target: "useCardToTargeted",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && !current.countCards('he');
                                    }) && player.storage.dianshanmrfz !== true) return false;
                                    return player != event.player && (get.color(event.card) == 'black');
                                },
                                content: function () {
                                    'step 0'
                                    player.changeZhuanhuanji('dianshanmrfz');
                                    if (player.storage.dianshanmrfz == true) {
                                        player.chooseTarget(get.prompt('dianshanmrfz'), '对一名其他角色造成一点雷属性伤害', true, function (card, player, target) {
                                            return target != player;
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    else {
                                        player.chooseTarget(get.prompt('dianshanmrfz'), '弃置一名其他角色一张牌', true, function (card, player, target) {
                                            return target != player;
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        if (player.storage.dianshanmrfz == true) {
                                            result.targets[0].damage('thunder');
                                        }
                                        else {
                                            player.discardPlayerCard(result.targets[0], 1, 'he', true);
                                        };
                                    }
                                },
                            },
                            shidemrfz: {
                                audio: 'fuxiemrfz',
                                direct: true,
                                trigger: {
                                    player: ["useCard", "respond", "loseAfter"],
                                },
                                filter: function (event, player) {
                                    if (event.name != 'lose') return true;
                                    if (event.type != 'discard') return false;
                                    if (event.cards2) {
                                        for (var i = 0; i < event.cards2.length; i++) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                direct: true,
                                forced: true,
                                content: function () {
                                    if (player.isLinked()) player.link(false);
                                    else player.link();
                                },
                                group: 'shidemrfz_draw',
                                subSkill: {
                                    draw: {
                                        audio: 'shidemrfz',
                                        forced: true,
                                        trigger: { player: 'linkAfter' },
                                        filter: function (event, player) {
                                            return !player.isLinked();
                                        },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            //w
                            fukemrfz: {
                                trigger: {
                                    player: "gainAfter",
                                },
                                filter: function (event, player) {
                                    if (!game.hasPlayer(function (current) {
                                        return current != player && current.countCards('he') > 0;
                                    })) return false;
                                    return event.getParent(3).name != 'fukemrfz';
                                },
                                audio: 2,
                                direct: true,
                                content: function () {
                                    "step 0"
                                    var num = trigger.cards.length;
                                    player.chooseTarget(get.prompt('fukemrfz'), '获得至多' + get.translation(num) + '名角色的各一张牌，然后弃置等量的牌', [1, num], function (card, player, target) {
                                        return target.countCards('he') > 0 && player != target;
                                    }, function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        if (target.hasSkill('tuntian')) return att / 10;
                                        return 1 - att;
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        var num2 = result.targets.length;
                                        result.targets.sortBySeat();
                                        player.logSkill('fukemrfz', result.targets);
                                        player.chooseToDiscard(num2, true, 'he');
                                        player.gainMultiple(result.targets, "he");

                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                                ai: {
                                    threaten: 1.6,
                                    expose: 0.2,
                                },
                            },
                            zhumengmrfz: {
                                audio: 2,
                                direct: true,
                                trigger: {
                                    global: "roundStart",
                                },
                                firstDo: true,
                                forced: true,
                                content: function () {
                                    player.removeMark('zhumengmrfz3', player.countMark('zhumengmrfz3'));
                                    player.unmarkSkill('zhumengmrfz2');
                                },
                            },
                            "zhumengmrfz2": {
                                trigger: {
                                    global: "roundStart",
                                },
                                intro: {
                                    content: function (storage) {
                                        return get.translation(storage) + '牌';
                                    },
                                },
                                audio: 2,
                                content: function () {
                                    'step 0'
                                    player.judge();
                                    'step 1'
                                    player.markSkill("zhumengmrfz2");
                                    if (get.type(result.card) !== 'delay') { player.storage.zhumengmrfz2 = get.type(result.card); }
                                    else { player.storage.zhumengmrfz2 = 'trick' }
                                    player.addMark('zhumengmrfz3', result.number);
                                    player.logSkill('zhumengmrfz');
                                },
                            },
                            "zhumengmrfz3": {
                                marktext: "梦",
                                intro: {
                                    name: "梦",
                                    content: "萨卡兹的命运应该掌握在自己手中",
                                },
                                audio: 2,
                                trigger: {
                                    player: ["useCard", "respond"],
                                },
                                filter: function (event, player) {
                                    if (player.storage.zhumengmrfz2 == 'trick' && get.type(event.card) == 'delay') return true;
                                    return get.type(event.card) == player.storage.zhumengmrfz2 && player.countMark('zhumengmrfz3') > 0;
                                },
                                frequent: true,
                                prompt: "是否摸一张牌",
                                content: function () {
                                    player.removeMark("zhumengmrfz3");
                                    player.draw();
                                    player.logSkill('zhumengmrfz');
                                },
                                group: ["zhumengmrfz2", "zhumengmrfz"],
                            },
                            //浊心斯卡蒂
                            qianximrfz: {
                                audio: 2,
                                trigger: {
                                    global: 'phaseBefore',
                                    player: 'enterGame',
                                },
                                derivation: ['qianximrfz_ban'],
                                forced: true,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    'step 0'
                                    var characterlist = [];
                                    for (var i = 0; i < game.players.length; i++) {
                                        var players = game.players[i];
                                        if (players == player) continue;
                                        characterlist.push(players.name);
                                    }
                                    if (!lib.config.isNoLimted_mrfz) {
                                        characterlist.remove('amiyamrfz');
                                        characterlist.remove('baocunzhemrfz');
                                    }
                                    var skills = [];
                                    for (var i of characterlist) {
                                        skills.addArray(lib.character[i][3]);
                                    }
                                    if (!characterlist.length || !skills.length) { event.finish(); return; }
                                    if (player.isUnderControl()) {
                                        game.swapPlayerAuto(player);
                                    }
                                    var switchToAuto = function () {
                                        _status.imchoosing = false;
                                        event._result = {
                                            bool: true,
                                            skills: skills.randomGets(2),
                                        };
                                        if (event.dialog) event.dialog.close();
                                        if (event.control) event.control.close();
                                    };
                                    var chooseButton = function (list, skills) {
                                        var event = _status.event;
                                        if (!event._result) event._result = {};
                                        event._result.skills = [];
                                        var rSkill = event._result.skills;
                                        var dialog = ui.create.dialog('请获得两个技能', [list, 'character'], 'hidden');
                                        event.dialog = dialog;
                                        var table = document.createElement('div');
                                        table.classList.add('add-setting');
                                        table.style.margin = '0';
                                        table.style.width = '100%';
                                        table.style.position = 'relative';
                                        for (var i = 0; i < skills.length; i++) {
                                            var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                            td.link = skills[i];
                                            table.appendChild(td);
                                            td.innerHTML = '<span>' + get.translation(skills[i]) + '</span>';
                                            td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                                if (_status.dragged) return;
                                                if (_status.justdragged) return;
                                                _status.tempNoButton = true;
                                                setTimeout(function () {
                                                    _status.tempNoButton = false;
                                                }, 500);
                                                var link = this.link;
                                                if (!this.classList.contains('bluebg')) {
                                                    if (rSkill.length >= 2) return;
                                                    rSkill.add(link);
                                                    this.classList.add('bluebg');
                                                }
                                                else {
                                                    this.classList.remove('bluebg');
                                                    rSkill.remove(link);
                                                }
                                            });
                                        }
                                        dialog.content.appendChild(table);
                                        dialog.add('　　');
                                        dialog.open();

                                        event.switchToAuto = function () {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        };
                                        event.control = ui.create.control('ok', function (link) {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        });
                                        for (var i = 0; i < event.dialog.buttons.length; i++) {
                                            event.dialog.buttons[i].classList.add('selectable');
                                        }
                                        game.pause();
                                        game.countChoose();
                                    };
                                    if (event.isMine()) {
                                        chooseButton(characterlist, skills);
                                    }
                                    else if (event.isOnline()) {
                                        event.player.send(chooseButton, characterlist, skills);
                                        event.player.wait();
                                        game.pause();
                                    }
                                    else {
                                        switchToAuto();
                                    }
                                    'step 1'
                                    var map = event.result || result;
                                    if (map && map.skills && map.skills.length) {
                                        for (var i of map.skills) player.addSkillLog(i);
                                    }
                                    game.broadcastAll(function (list) {
                                        game.expandSkills(list);
                                        for (var i of list) {
                                            var info = lib.skill[i];
                                            if (!info) continue;
                                            if (!info.audioname2) info.audioname2 = {};
                                            info.audioname2.old_yuanshu = 'weidi';
                                        }
                                    }, map.skills);
                                },
                            },
                            //斯卡蒂
                            geyaomrfz: {
                                audio: 2,
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                content: function () {
                                    "step 0"
                                    player.draw('visible');
                                    "step 1"
                                    var card = result[0];
                                    if (get.type(card) == 'equip') { player.addTempSkill('geyaomrfz_e'); }
                                    if (get.type(card) == 'trick' || get.type(card) == 'delay') { player.addTempSkill('geyaomrfz_t'); }
                                    if (get.type(card) == 'basic') { player.addTempSkill('geyaomrfz_b'); }
                                    game.log(player, '展示了一张', get.type(card), '牌');

                                },
                            },
                            "geyaomrfz_e": {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        if (card.name == 'sha') return true;
                                    },
                                    selectTarget: function (card, player, range) {
                                        if (card.name == 'sha' && range[1] != -1) range[1] = Infinity;
                                    },
                                },
                                charlotte: true,
                            },
                            "geyaomrfz_t": {
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                charlotte: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    player.logSkill('geyaomrfz');
                                    trigger.directHit.addArray(game.filterPlayer(function (current) {
                                        return current != player;
                                    }));
                                },
                                ai: {
                                    "directHit_ai": true,
                                },
                            },
                            "geyaomrfz_b": {
                                trigger: {
                                    player: "useCardToPlayered",
                                },
                                frequent: true,
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && event.target.countCards('h') > 0;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                content: function () {
                                    //player.logSkill('geyaomrfz');
                                    //player.gainPlayerCard(1,trigger.target,'he',true,'visible');
                                    var color = get.color(trigger.card);
                                    player.gainPlayerCard(trigger.target, 'h', 'visible').set('color', color).set('filterButton', function (button) {
                                        var evt = _status.event;
                                        return get.color(button.link, evt.target) != evt.color;
                                    });
                                    player.logSkill('geyaomrfz', trigger.target);
                                },
                            },
                            zhangenmrfz: {
                                audio: 2,
                                trigger: {
                                    player: "useCardAfter",
                                },
                                filter: function (event, player) {
                                    if (player.countCards('h') == 0) return false;
                                    return event.card.name == 'sha' && player.getHistory('sourceDamage').length > 0;
                                },
                                check: function (event, player) {
                                    return player.getCardUsable('sha') == 0 && player.countCards('h', function (card) {
                                        return card.name == 'sha'
                                    }) > 0;
                                },
                                content: function () {
                                    player.chooseToDiscard('h', 1, true);
                                    trigger.addCount = false;
                                    if (player.stat[player.stat.length - 1].card.sha > 0) {
                                        player.stat[player.stat.length - 1].card.sha--;
                                    }
                                },
                            },
                            //缄默德克萨斯
                            yushimrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'phaseDrawBegin2' },
                                content: function () {
                                    var num = 8 - game.roundNumber
                                    trigger.num = Math.max(3, num);
                                },
                            },
                            laoyingmrfz: {
                                audio: 2,
                                usable: 1,
                                trigger: { source: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.card && event.getParent('phaseUse') && event.getParent('phaseUse').player == player && get.itemtype(event.cards) == 'cards' && get.position(event.cards[0], true) == 'o';
                                },
                                content: function () {
                                    player.gain(trigger.cards, 'gain2');
                                    var cardu = { name: trigger.card.name, isCard: true };
                                    if (get.type(cardu) == 'basic') player.addTempSkill('laoyingmrfz_basic');
                                    else player.addTempSkill('laoyingmrfz_trick');
                                },
                                subSkill: {
                                    basic: {
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            }
                                        },
                                    },
                                    trick: {
                                        audio: 'laoyingmrfz',
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return get.type2(event.card) == 'trick';
                                        },
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current != player;
                                            }));
                                            player.removeSkill('laoyingmrfz_trick');
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                return get.type2(arg.card) == 'trick';
                                            },
                                        },
                                    },
                                },
                            },
                            //玛恩纳
                            xunlumrfz: {
                                audio: 2,
                                group: ['xunlumrfz_draw', 'xunlumrfz_sha', "xunlumrfz_h"],
                                intro: {
                                    content: function (storage, player, skill) {
                                        return "数字：<span class=thundertext>" + player.storage.xunlumrfz_draw + "</span> <span class=firetext>" + player.storage.xunlumrfz_sha + "</span> <span class=greentext>" + player.storage.xunlumrfz_h + "</span></br>本回合杀的数量：" + player.storage.xunlumrfz_sha2 + "</br>本回合手牌上限：" + player.storage.xunlumrfz_h2 + (player.storage.xunlumrfz2 ? '</br>已修改【寻路】' : '');
                                    },
                                },
                                mark: true,
                                onremove: true,
                                audio: 4,
                                trigger: { source: 'damageEnd' },
                                filter: function (event, player) {
                                    if (player.storage.xunlumrfz_draw + player.storage.xunlumrfz_sha + player.storage.xunlumrfz_h < 12) return true;
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    var list = ['蓝色', '红色', '绿色'];
                                    player.chooseControl(list, 'cancel2').set('prompt', get.prompt('xunlumrfz')).set('prompt2', '令〖寻路〗中的一个数字+1</br>数字：<span class=thundertext>' + player.storage.xunlumrfz_draw + '</span> <span class=firetext>' + player.storage.xunlumrfz_sha + '</span> <span class=greentext>' + player.storage.xunlumrfz_h + '</span>').set('ai', function () {
                                        if (player.storage.xunlumrfz_draw < 4) return 0;
                                        if (player.storage.xunlumrfz_draw == 4 && player.xunlumrfz_sha < 4) return 1;
                                        if (player.storage.xunlumrfz_h < 4) return 2;
                                        return 3;
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        if (result.control == '蓝色') { if (player.storage.xunlumrfz_draw < 4) { player.storage.xunlumrfz_draw++; } }
                                        if (result.control == '红色') { if (player.storage.xunlumrfz_sha < 4) { player.storage.xunlumrfz_sha++; } }
                                        if (result.control == '绿色') { if (player.storage.xunlumrfz_h < 4) { player.storage.xunlumrfz_h++; } }
                                        if (result.control == '修改【寻路】') { if (!player.storage.xunlumrfz2) { player.storage.xunlumrfz2 = true; } }
                                        player.markSkill('xunlumrfz');
                                    }
                                },
                            },
                            //m-n
                            //Math.random()*(n-m)+m;
                            xunlumrfz_draw: {
                                init: function (player) {
                                    player.storage.xunlumrfz_draw = 1;
                                    player.syncStorage("xunlumrfz_draw");
                                },
                                onremove: true,
                                audio: 2,
                                trigger: { player: 'phaseDrawBegin2' },
                                forced: true,
                                content: function () {
                                    var num = game.RDNbet(player.storage.xunlumrfz_draw, 6);
                                    trigger.num = Math.min(num, 6);
                                    player.logSkill('xunlumrfz');
                                    player.chat('可出' + player.storage.xunlumrfz_sha2 + '张杀</br>手牌上限为：' + player.storage.xunlumrfz_h2);
                                },
                            },
                            xunlumrfz_sha: {
                                init: function (player) {
                                    player.storage.xunlumrfz_sha = 0;
                                    player.syncStorage("xunlumrfz_sha");
                                },
                                onremove: true,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                charlotte: true,
                                firstDo: true,
                                content: function () {
                                    player.addTempSkill('xunlumrfz_sha2', { player: 'phaseZhunbeiBegin' });
                                    player.storage.xunlumrfz_sha2 = game.RDNbet(player.storage.xunlumrfz_sha, 5);
                                    player.logSkill('xunlumrfz');
                                },
                            },
                            xunlumrfz_sha2: {
                                init: function (player) {
                                    player.storage.xunlumrfz_sha2 = 0;
                                    player.syncStorage("xunlumrfz_sha2");
                                },
                                onremove: true,
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num = Math.min(player.storage.xunlumrfz_sha2, 5);
                                    },
                                },
                            },
                            xunlumrfz_h: {
                                init: function (player) {
                                    player.storage.xunlumrfz_h = 3;
                                    player.syncStorage("xunlumrfz_h");
                                },
                                onremove: true,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                charlotte: true,
                                content: function () {
                                    player.addTempSkill('xunlumrfz_h2', { player: 'phaseZhunbeiBegin' });
                                    player.storage.xunlumrfz_h2 = game.RDNbet(player.storage.xunlumrfz_h, 8);
                                },
                            },
                            xunlumrfz_h2: {
                                init: function (player) {
                                    player.storage.xunlumrfz_h2 = 0;
                                    player.syncStorage("xunlumrfz_h2");
                                },
                                onremove: true,
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num = player.storage.xunlumrfz_h2;
                                    },
                                },
                            },
                            xunlumrfz2: {
                                charlotte: true,
                            },
                            //耀骑士临光
                            zhuguangmrfz: {
                                derivation: 'zhuguangmrfz_rewrite',
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiAfter' },
                                filter: function (event, player) {
                                    return !player.storage.zhuguangmrfz_change;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('选择一名其他角色，视为对其使用【决斗】', function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    player.addSkill('zhuguangmrfz2');
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.useCard({ name: 'juedou' }, true, target);
                                    }
                                    'step 2'
                                    if (player.hasSkill('zhuguangmrfz2')) player.removeSkill('zhuguangmrfz2');
                                },
                                group: 'zhuguangmrfz_change',
                            },
                            zhuguangmrfz2: {
                                audio: 2,
                                silent: true,
                                trigger: { source: 'damageBegin2' },
                                filter: function (event, player, card) {
                                    return event.card.name == 'juedou';
                                },
                                prompt: function (event, player) {
                                    if (!player.storage.zhuguangmrfz_change) return '是否防止此伤害并选择一项';
                                    return '是否发动【逐光】';
                                },
                                frequent: function (event, player) {
                                    if (!player.storage.zhuguangmrfz_change) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.zhuguangmrfz_change) trigger.cancel();
                                    var list = [];
                                    if (!player.storage.kuanmrfz) list.add('修改【苦暗】');
                                    if (!player.storage.zhuguangmrfz_change) list.add('修改【逐光】');
                                    //if(player.countDisabled()>0) list.add('恢复装备栏');
                                    if (!player.storage.zhuguangmrfz_change) list.add('摸一张牌');
                                    if (player.storage.zhuguangmrfz_change) list.add('摸两张牌');

                                    //判断是否只剩余一个选项
                                    if (list.length == 1) {
                                        player.draw((player.storage.zhuguangmrfz_change ? 2 : 1));
                                        player.logSkill('zhuguangmrfz');
                                        event.finish();
                                    }
                                    else {
                                        list.add('cancel2');
                                        player.chooseControl(list).set('prompt', get.prompt('zhuguangmrfz')).set('prompt2', '选择一项').set('ai', function () {
                                            if (!player.storage.zhuguangmrfz_change) return 1;
                                            if (!player.storage.kuanmrfz) return 0;
                                            return [0, 1].randomGet();
                                        });
                                    }
                                    'step 1'
                                    player.logSkill('zhuguangmrfz');
                                    if (result.control != 'cancel2') {
                                        if (result.control == '修改【苦暗】') { player.storage.kuanmrfz = true; }
                                        if (result.control == '修改【逐光】') {
                                            player.storage.zhuguangmrfz_change = true;
                                        }
                                        //if(result.control=='恢复装备栏'){
                                        //    player.chooseToEnable();
                                        //}
                                        if (result.control == '摸一张牌') { player.draw(); }
                                        if (result.control == '摸两张牌') { player.draw(2); }
                                    }
                                },
                            },
                            zhuguangmrfz_change: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.storage.zhuguangmrfz_change;
                                },
                                content: function () {
                                    'step 0'
                                    player.logSkill('zhuguangmrfz');
                                    player.chooseTarget('选择一名其他角色，视为对其使用【决斗】，且此决斗不可响应', function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    });
                                    'step 1'
                                    player.addSkill(['zhuguangmrfz2', 'zhuguangmrfz3']);
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.useCard({ name: 'juedou' }, true, target);
                                    }
                                    'step 2'
                                    if (player.hasSkill('zhuguangmrfz2')) player.removeSkill('zhuguangmrfz2');
                                    if (player.hasSkill('zhuguangmrfz3')) player.removeSkill('zhuguangmrfz3');
                                },
                            },
                            zhuguangmrfz3: {
                                trigger: {
                                    player: "useCard",
                                },
                                forced: true,
                                charlotte: true,
                                silent: true,
                                filter: function (event, player) {
                                    return event.card.name == 'juedou';
                                },
                                content: function () {
                                    trigger.directHit.addArray(game.filterPlayer(function (current) {
                                        return current != player;
                                    }));
                                },
                                ai: {
                                    "directHit_ai": true,
                                },
                            },
                            kuanmrfz: {
                                audio: 2,
                                trigger: { global: "gameDrawAfter" },
                                forced: true,
                                content: function () {
                                    player.disableEquip('equip1');
                                    player.disableEquip('equip2');
                                    player.disableEquip('equip3');
                                    player.disableEquip('equip4');
                                    player.disableEquip('equip5');
                                    player.disableJudge();
                                    player.draw(3);
                                },
                                group: ['kuanmrfz2', 'kuanmrfz5'],
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (get.type(card) == 'equip') return true;
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && get.type(card) == 'equip') return false;
                                    },
                                },
                            },
                            kuanmrfz2: {
                                audio: 2,
                                trigger: { player: "phaseJudgeBefore" },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.storage.kuanmrfz;
                                },
                                content: function () {
                                    'step 0'
                                    player.logSkill('kuanmrfz');
                                    player.judge(function (card) {
                                        if (get.suit(card) == 'heart') return -2;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.suit !== 'heart') {
                                        player.skip('phaseUse');
                                        game.log(player, '的<span class=thundertext>【乐不思蜀】</span>判定结果为', result.suit, ',', player, '跳过出牌阶段');
                                    }
                                    else { game.log(player, '的<span class=thundertext>【乐不思蜀】</span>判定结果为', result.suit, ',判定失败'); }
                                    'step 2'
                                    player.judge(function (card) {
                                        if (get.suit(card) == 'club') return -2;
                                        return 1;
                                    });
                                    'step 3'
                                    if (result.suit !== 'club') {
                                        player.skip('phaseDraw');
                                        game.log(player, '的<span class=thundertext>【兵粮寸断】</span>判定结果为', result.suit, ',', player, '跳过摸牌阶段');
                                    }
                                    else { game.log(player, '的<span class=thundertext>【兵粮寸断】</span>判定结果为', result.suit, ',判定失败'); }
                                },
                            },
                            kuanmrfz5: {
                                audio: 'kuanmrfz',
                                enable: ['chooseToRespond', 'chooseToUse'],
                                filter: function (event, player) {
                                    if (event.type == 'wuxie' || player.countCards('h', function (card) {
                                        return get.type(card) == 'equip';
                                    }) == 0) return false;
                                    for (var name of ['sha', 'shan', 'jiu']) {
                                        if (event.filterCard({ name: name, isCard: true }, player, event)) return true;
                                    }
                                    return false;
                                },
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var vcards = [];
                                        for (var name of ['sha', 'shan', 'jiu']) {
                                            var card = { name: name, isCard: true };
                                            if (event.filterCard(card, player, event)) vcards.push(['基本', '', name]);
                                        }
                                        var dialog = ui.create.dialog('苦暗', [vcards, 'vcard'], 'hidden');
                                        dialog.direct = true;
                                        return dialog;
                                    },
                                    backup: function (links, player) {
                                        return {
                                            filterCard: function (card) {
                                                return get.type(card) == 'equip';
                                            },
                                            selectCard: 1,
                                            viewAs: {
                                                name: links[0][2],
                                                isCard: false,
                                            },
                                            popname: true,
                                            precontent: function () {
                                                player.logSkill('kuanmrfz');
                                            },
                                        }
                                    },
                                    prompt: function (links, player) {
                                        return '【苦暗】：使用一张【' + get.translation(links[0][2]) + '】';
                                    },
                                },
                                ai: {
                                    order: 3,
                                    respondSha: true,
                                    respondShan: true,
                                },
                            },
                            shuoguangmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseDiscardBefore' },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.storage.shuoguangmrfz;
                                },
                                content: function () {
                                    trigger.cancel();
                                    player.storage.shuoguangmrfz = true;
                                },
                            },
                            //凯尔希
                            yuanlvemrfz: {
                                audio: 2,
                                trigger: { player: "drawBegin" },
                                forced: true,
                                filter: function (event, player) {
                                    return event.getParent(1).name != 'yuanlvemrfz'
                                },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.yuanshimrfz || player.storage.yuanshimrfz_gain) { var num = trigger.num; }
                                    else { var num = trigger.num + 1 }
                                    if (trigger.parent.name !== 'phaseDraw') {
                                        player.chooseToGuanxing(num);
                                        player.draw(num);
                                    }
                                    else {
                                        player.chooseToGuanxing(num + 1);
                                        player.draw(num + 1);
                                    }
                                    'step 1'
                                    trigger.cancel();
                                },
                            },
                            chonggoumrfz: {
                                intro: {
                                    content: "已修改【重构】。",
                                },
                                onremove: true,
                                audio: 2,
                                trigger: { player: "phaseDrawBegin2" },
                                filter: function (event, player) {
                                    if (player.getDamagedHp() == 0 && !player.storage.chonggoumrfz) return false;
                                    return player.countCards('h') >= player.hp;
                                },
                                content: function () {
                                    player.chooseToDiscard('h', player.countCards('h'), true);
                                    if (!player.storage.chonggoumrfz) { player.draw(player.countCards('h') - player.getDamagedHp()); }
                                    else { player.draw(player.countCards('h')); }
                                    player.recover();
                                },
                            },
                            yuanshimrfz: {
                                intro: {
                                    content: "令【远略】中的X+1。",
                                },
                                onremove: true,
                                trigger: {
                                    global: 'phaseBefore',
                                    player: 'enterGame',
                                },
                                forced: true,
                                audio: 3,
                                direct: true,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0) && player.countCards('h') > 0;
                                },
                                content: function () {
                                    var hs = player.getCards('h');
                                    if (hs.length) player.addGaintag(hs, 'yuanshimrfz');
                                },
                                group: ["yuanshimrfz_basic", "yuanshimrfz_equip", "yuanshimrfz_trick", "yuanshimrfz_gain"],
                                subSkill: {
                                    basic: {
                                        trigger: {
                                            player: "useCard",
                                        },
                                        prompt: "是否令此牌不可响应",
                                        check: function (event, player) {
                                            if (event.card.name == 'sha') return true;
                                            return false;
                                        },
                                        filter: function (event, player) {
                                            if (get.type(event.card) !== 'basic') return false;
                                            return player.hasHistory('lose', function (evt) {
                                                if (event != evt.getParent()) return false;
                                                for (var i in evt.gaintag_map) {
                                                    if (evt.gaintag_map[i].contains('yuanshimrfz')) return true;
                                                }
                                                return false;
                                            });
                                        },
                                        content: function () {
                                            if (!player.storage.yuanshimrfz_gain) player.storage.yuanshimrfz_gain = true;
                                            player.logSkill('yuanshimrfz');
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current != player;
                                            }));
                                        },
                                        ai: {
                                            "directHit_ai": true,
                                        },
                                    },
                                    equip: {
                                        trigger: { player: 'useCard' },
                                        prompt: "是否摸一张牌",
                                        filter: function (event, player) {
                                            if (get.type(event.card) !== 'equip' && get.type(event.card) !== 'delay') return false;
                                            return player.hasHistory('lose', function (evt) {
                                                if (event != evt.getParent()) return false;
                                                for (var i in evt.gaintag_map) {
                                                    if (evt.gaintag_map[i].contains('yuanshimrfz')) return true;
                                                }
                                                return false;
                                            });
                                        },
                                        content: function () {
                                            if (!player.storage.yuanshimrfz_gain) player.storage.yuanshimrfz_gain = true;
                                            player.logSkill('yuanshimrfz');
                                            player.draw();
                                        },
                                    },
                                    trick: {
                                        trigger: { player: 'useCard' },
                                        prompt: function (event, player) {
                                            return '是否令' + get.translation(event.card) + '的目标+1/-1';
                                        },
                                        filter: function (event, player) {
                                            if (get.type(event.card) !== 'trick') return false;
                                            return player.hasHistory('lose', function (evt) {
                                                if (event != evt.getParent()) return false;
                                                for (var i in evt.gaintag_map) {
                                                    if (evt.gaintag_map[i].contains('yuanshimrfz')) return true;
                                                }
                                                return false;
                                            });
                                        },
                                        content: function () {
                                            'step 0'
                                            if (!player.storage.yuanshimrfz_gain) player.storage.yuanshimrfz_gain = true;
                                            var prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标'
                                            player.chooseTarget(get.prompt('yuanshimrfz'), function (card, player, target) {
                                                var player = _status.event.player;
                                                if (_status.event.targets.contains(target)) return true;
                                                return lib.filter.targetEnabled2(_status.event.card, player, target) && lib.filter.targetInRange(_status.event.card, player, target);
                                            }).set('prompt2', prompt2).set('ai', function (target) {
                                                var trigger = _status.event.getTrigger();
                                                var player = _status.event.player;
                                                return get.effect(target, trigger.card, player, player) * (_status.event.targets.contains(target) ? -1 : 1);
                                            }).set('targets', trigger.targets).set('card', trigger.card);
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                                event.targets = result.targets;
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 2'
                                            if (event.targets) {
                                                player.logSkill('yuanshimrfz', event.targets);
                                                if (trigger.targets.contains(event.targets[0])) trigger.targets.removeArray(event.targets);
                                                else trigger.targets.addArray(event.targets);
                                            }
                                        },
                                    },
                                    gain: {
                                        trigger: { player: 'loseAfter' },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (player.storage.yuanshimrfz || player.storage.chonggoumrfz) return false;
                                            return !player.hasCard(function (card) {
                                                return card.hasGaintag('yuanshimrfz');
                                            }, 'h');
                                        },
                                        content: function () {
                                            player.logSkill('yuanshimrfz');
                                            if (!player.storage.yuanshimrfz_gain) {
                                                player.storage.yuanshimrfz = true;
                                                player.markSkill("yuanshimrfz");
                                            }
                                            else {
                                                player.storage.chonggoumrfz = true;
                                                player.markSkill('chonggoumrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            m3mrfz: {
                                audio: 2,
                                trigger: {
                                    player: "dying",
                                },
                                zhuSkill: true,
                                skillAnimation: true,
                                animationColor: "red",
                                mark: true,
                                unique: true,
                                limited: true,
                                filter: function (event, player) {
                                    if (player.hp > 0) return false;
                                    return !player.storage.m3mrfz;
                                },
                                init: (player, skill) => player.storage[skill] = false,
                                check: function (event, player) {
                                    var num = player.countCards('h', function (card) {
                                        return card.name == 'tao' || card.name == 'jiu';
                                    });
                                    return player.hp + num <= 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('m3mrfz');
                                    player.removeSkill('chonggoumrfz');
                                    player.discard(player.getCards('hej'));
                                    player.recoverTo(2);
                                    player.storage.m3mrfz = true;
                                    player.loseMaxHp();
                                    player.turnOver(false);
                                    player.link(false);
                                    'step 1'
                                    var targets = game.filterPlayer();
                                    event.targets = targets.remove(player);
                                    event.discard = [];
                                    event.num = 0;
                                    'step 2'
                                    if (event.targets.length) {
                                        var current = event.targets.shift();
                                        if (current.countCards('he') > 0) {
                                            current.chooseBool('是否弃置一张牌令' + get.translation(player) + '摸一张牌').set('ai', function () {
                                                return get.attitude(_status.event.player, _status.event.target) > 2;
                                            }).set('target', player);
                                            event.current = current;
                                        }
                                        else {
                                            event.redo();
                                        }
                                    }
                                    else {
                                        event.goto(4);
                                    }
                                    'step 3'
                                    if (result.bool) {
                                        event.discard.push(event.current);
                                        event.current.line(player, 'green');
                                        game.log(event.current, '令', player, '摸一张牌');
                                        player.draw();
                                    }
                                    if (event.targets.length) {
                                        event.goto(2);
                                    }
                                    'step 4'
                                    if (event.discard.length) {
                                        var next = game.createEvent('m3mrfz_next');
                                        event.next.remove(next);
                                        trigger.after.push(next);
                                        next.targets = event.discard;
                                        next.setContent(function () {
                                            for (var i = 0; i < targets.length; i++) {
                                                if (targets[i].countCards('h') > 0) {
                                                    targets[i].chooseToDiscard('h', true);
                                                }
                                            }
                                        });
                                    }
                                },
                            },
                            //山
                            zhuangtimrfz: {
                                intro: {
                                    content: "已造成#点伤害",
                                },
                                audio: 2,
                                forced: true,
                                direct: true,
                                trigger: { source: "damageEnd" },
                                filter: function (event, player) {
                                    return player.maxHp < 15;
                                },
                                content: function () {
                                    'step 0'
                                    player.addMark('zhuangtimrfz', trigger.num);
                                    'step 1'
                                    var damage = player.countMark('zhuangtimrfz')
                                    if (damage > 1) {
                                        player.gainMaxHp(Math.floor(damage / 2));
                                        player.removeMark('zhuangtimrfz', Math.floor(damage / 2) * 2);
                                        player.logSkill('zhuangtimrfz');
                                    }
                                },
                                group: ['zhuangtimrfz_use', 'zhuangtimrfz_draw'],
                                subSkill: {
                                    use: {
                                        audio: 2,
                                        usable: 1,
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            for (var i of lib.inpile) {
                                                if (get.type(i) == 'trick' && event.filterCard({ name: i, isCard: true }, player, event)) return true;
                                                if (get.type(i) == 'basic' && event.filterCard({ name: i, isCard: true }, player, event)) return true;
                                            }
                                            return false;
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                var list = [];
                                                for (var i of lib.inpile) {
                                                    if (get.type(i) == 'trick' && event.filterCard({ name: i, isCard: true }, player, event)) list.push(['锦囊', '', i]);
                                                    if (get.type(i) == 'basic' && event.filterCard({ name: i, isCard: true }, player, event)) list.push(['基本', '', i]);
                                                }
                                                return ui.create.dialog('壮体', [list, 'vcard']);
                                            },
                                            check: function (button) {
                                                return _status.event.player.getUseValue({ name: button.link[2], isCard: true });
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    viewAs: {
                                                        name: links[0][2],
                                                        isCard: true,
                                                    },
                                                    filterCard: () => false,
                                                    selectCard: -1,
                                                    popname: true,
                                                    precontent: function () {
                                                        player.logSkill('zhuangtimrfz');
                                                        player.loseMaxHp();
                                                    },
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '请选择' + get.translation(links[0][2]) + '的目标';
                                            },
                                        },
                                        ai: { order: 1, result: { player: 1 } },
                                    },
                                    draw: {
                                        trigger: { player: "phaseZhunbeiBegin" },
                                        filter: function (event, player) {
                                            return false;
                                        },
                                        check: function (event, player) {
                                            return player.hp < 3;
                                        },
                                        promt: function (event, player) {
                                            return '是否失去' + player.getDamagedHp() + '点体力上限，摸' + Math.ceil(player.getDamagedHp() / 2) + '张牌。';
                                        },
                                        content: function () {
                                            var num = player.getDamagedHp()
                                            player.loseMaxHp(num);
                                            player.draw(Math.ceil(num / 2));
                                        },
                                    },
                                },
                            },
                            julimrfz: {
                                audio: 2,
                                trigger: { source: "damageBegin" },
                                filter: function (event, player) {
                                    return player.getDamagedHp() >= event.player.hp;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                content: function () {
                                    'step 0'
                                    trigger.num++;
                                    'step 1'
                                    var card = trigger.player.countCards('he')
                                    if (player.maxHp >= card) {
                                        player.chooseControl('确定', 'cancel2').set('prompt', '是否失去两点体力上限，令此伤害+1').set('ai', function (event, player) {
                                            if (get.attitude(player, event.player) < 0 && player.maxHp >= 3) return 0;
                                            return 1;
                                        });
                                    }
                                    'step 2'
                                    if (result.control !== 'cancel2') {
                                        trigger.num++;
                                        player.loseMaxHp(2);
                                        player.logSkill('zhuangtimrfz', trigger.player);
                                    }
                                },
                            },
                            //Ace
                            sizhanmrfz: {
                                audio: 2,
                                trigger: { player: 'die' },
                                forced: true,
                                forceDie: true,
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '死战',
                                animationColor: 'fire',
                                init: function (player) {
                                    player.storage.sizhanmrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.sizhanmrfz;
                                },
                                content: function () {
                                    'step 0'
                                    var targets = game.filterPlayer(function (current) {
                                        return current != player && current.isZhu;
                                    });
                                    event._result = { bool: true, targets: targets };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        target.addSkill('sizhanmrfz2');
                                        player.storage.sizhanmrfz = true;
                                        player.awakenSkill('sizhanmrfz');
                                    }
                                },
                            },
                            sizhanmrfz2: {
                                trigger: { player: "phaseEnd" },
                                forced: true,
                                direct: true,
                                content: function () {
                                    for (var i = 0; i < game.dead.length && game.dead[i].name != 'acemrfz'; i++);
                                    var dead = game.dead[i];
                                    dead.revive(dead.maxHp);
                                    event.dead = dead;
                                    player.removeSkill('sizhanmrfz2');
                                    dead.insertPhase();
                                    dead.addSkill('sizhanmrfz3');
                                    dead.chat('快走，我来断后！');
                                },
                            },
                            sizhanmrfz3: {
                                trigger: { player: 'phaseEnd' },
                                forced: true,
                                content: function () {
                                    player.die()._triggered = null;
                                },
                                group: ['sizhanmrfz3_draw', 'sizhanmrfz3_damage', 'sizhanmrfz3_sha'],
                                subSkill: {
                                    draw: {
                                        trigger: { player: "phaseDrawBegin2" },
                                        forced: true,
                                        content: function () {
                                            trigger.num += Math.min(game.roundNumber, 5);
                                        },
                                    },
                                    damage: {
                                        trigger: { source: "damageBegin" },
                                        forced: true,
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                    sha: {
                                        mod: {
                                            targetInRange: function (card, player, target, now) {
                                                if (card.name == 'sha') return true;
                                            },
                                            cardname: function (card, player) {
                                                if (['basic'].contains(lib.card[card.name].type)) return 'sha';
                                            },
                                        },
                                    },
                                },
                            },
                            guanyongmrfz: {
                                shaRelated: true,
                                audio: 2,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.getParent().name != 'useCard' || player != _status.currentPhase) return false;
                                    return event.card.name == 'sha' && event.target.countDiscardableCards(player, 'he') > 0;
                                },
                                preHidden: true,
                                check: function (event, player) {
                                    return get.attitude(player, event.target) <= 0;
                                },
                                logTarget: 'target',
                                content: function () {
                                    'step 0'
                                    player.discardPlayerCard(trigger.target, get.prompt('guanyongmrfz', trigger.target), true).set('att', get.attitude(player, trigger.target) <= 0);
                                    'step 1'
                                    if (result.bool && result.links && result.links.length) {
                                        if (get.type(result.links[0], null, result.links[0].original == 'h' ? player : false) == 'basic') {
                                            trigger.getParent().directHit.add(trigger.target);
                                        }
                                        else {
                                            player.draw(2);
                                            player.addTempSkill('guanyongmrfz2');
                                            if (player.countMark('guanyongmrfz2') < 2 || player.storage.sizhanmrfz) { player.addMark('guanyongmrfz2', false); }
                                        }
                                    }
                                },
                                ai: {
                                    unequip_ai: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'directHit_ai') return arg.card.name == 'sha' && arg.target.countCards('e', function (card) {
                                            return get.value(card) > 1;
                                        }) > 0;
                                        if (arg && arg.name == 'sha' && arg.target.getEquip(2)) return true;
                                        return false;
                                    }
                                },
                            },
                            guanyongmrfz2: {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('guanyongmrfz2');
                                    },
                                },
                                onremove: true,
                            },
                            //歌蕾蒂亚
                            xunxiangmrfz: {
                                audio: 2,
                                usable: 2,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (player.hasSkill('xunxiangmrfz2')) return false;
                                    return game.hasPlayer((current) => current.countCards('h') > 0);
                                },
                                filterTarget: function (card, player, target) {
                                    return target.countCards('h') > 0;
                                },
                                selectTarget: -1,
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    'step 0'
                                    var num = [3, 1, 2].randomGet();
                                    if (num == 1) player.storage.xunxiangmrfz = 'basic';
                                    if (num == 2) player.storage.xunxiangmrfz = 'trick';
                                    if (num == 3) player.storage.xunxiangmrfz = 'equip';
                                    game.log('<span class=thundertext>【寻相】</span>随机的类型为<span class=firetext>', player.storage.xunxiangmrfz, '牌</span>');
                                    player.popup(get.translation(player.storage.xunxiangmrfz) + '牌');
                                    targets.sortBySeat();
                                    var next = player.chooseCardOL(targets, '请选择要展示的牌', true).set('ai', function (card) {
                                        return -get.value(card);
                                    }).set('source', player);
                                    next.aiCard = function (target) {
                                        var hs = target.getCards('h');
                                        return { bool: true, cards: [hs.randomGet()] };
                                    };
                                    next._args.remove('glow_result');
                                    'step 1'
                                    var cards = [];
                                    var num = 0;
                                    event.videoId = lib.status.videoId++;
                                    for (var i = 0; i < targets.length; i++) {
                                        cards.push(result[i].cards[0]);

                                    }
                                    event.cards = cards;
                                    game.log(player, '展示了', targets, '的', cards);
                                    game.broadcastAll(function (targets, cards, id, player) {
                                        var dialog = ui.create.dialog(get.translation(player) + '发动了【寻相】</br><span class=firetext>【寻相】随机声明的类型为' + get.translation(player.storage.xunxiangmrfz) + '牌</span>', cards);
                                        dialog.videoId = id;
                                        var getName = function (target) {
                                            if (target._tempTranslate) return target._tempTranslate;
                                            var name = target.name;
                                            if (lib.translate[name + '_ab']) return lib.translate[name + '_ab'];
                                            return get.translation(name);
                                        }
                                        for (var i = 0; i < targets.length; i++) {
                                            dialog.buttons[i].querySelector('.info').innerHTML = getName(targets[i]);
                                            if (get.type(result[i].cards[0]) == player.storage.xunxiangmrfz) num++;
                                            if (get.type(result[i].cards[0]) == 'delay' && player.storage.xunxiangmrfz == 'trick') num++;
                                        }
                                    }, targets, cards, event.videoId, player);
                                    game.delay(4);
                                    if (num == 0) {
                                        player.chooseTarget('选择一名其他角色，你与其各流失一点体力', true, function (card, player, target) {
                                            return target != player;
                                        }).ai = function (target) {
                                            return get.attitude(player, target) < 2;
                                        };
                                        player.loseHp();
                                    }
                                    else {
                                        player.addTempSkill('xunxiangmrfz2', 'phaseUseEnd');
                                        player.draw(num);
                                    }
                                    'step 2'
                                    game.broadcastAll('closeDialog', event.videoId);
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        target.loseHp();
                                    }
                                },
                                ai: {
                                    order: 12,
                                    result: {
                                        player: 5,
                                    },
                                },
                            },
                            xunxiangmrfz2: {
                                //检测用技能，无实际意义。
                            },
                            ronghangmrfz: {
                                audio: 2,
                                trigger: { player: 'useCard' },
                                forced: true,
                                getLastUsed: function (player, event) {
                                    var history = player.getAllHistory('useCard');
                                    var index;
                                    if (event) index = history.indexOf(event) - 1;
                                    else index = history.length - 1;
                                    if (index >= 0) return history[index];
                                    return false;
                                },
                                filter: function (event, player) {
                                    var evtcard = event.card;
                                    var evt = lib.skill.ronghangmrfz.getLastUsed(player, event);
                                    if (!evt.card || !evt) return false;
                                    return get.tag(evtcard, 'damage') > 0;
                                },
                                content: function () {
                                    var lastcard = lib.skill.ronghangmrfz.getLastUsed(player, trigger);
                                    if (get.cardNameLength(lastcard.card) < get.cardNameLength(trigger.card)) {
                                        trigger.baseDamage++;
                                        player.popup('伤害基数+1');
                                    }
                                    else {
                                        var name = get.name(trigger.card);
                                        if (name == 'sha') {
                                            trigger.addCount = false;
                                            if (player.stat[player.stat.length - 1].card.sha > 0) {
                                                player.stat[player.stat.length - 1].card.sha--;
                                            }
                                        }
                                        else if (name == 'jiu') {
                                            trigger.addCount = false;
                                            if (player.stat[player.stat.length - 1].card.jiu > 0) {
                                                player.stat[player.stat.length - 1].card.jiu--;
                                            }
                                        }
                                        trigger.directHit.addArray(game.filterPlayer(function (current) {
                                            return current != player;
                                        }));
                                        player.popup('强中且无限制');
                                    }
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function (player, tag, arg) {
                                        var evtcard = lib.skill.ronghangmrfz.getLastUsed(player, event);
                                        return get.cardNameLength(evtcard) >= get.cardNameLength(arg.card);
                                    },
                                },
                            },
                            //废弃技能，暂时无用
                            caiganmrfz: {
                                trigger: {
                                    player: "gainAfter",
                                },
                                firstDo: true,
                                direct: true,
                                filter: function (event, player) {
                                    return event.getParent(2).name != 'caiganmrfz';
                                },
                                audio: 2,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('h', [1, Infinity], get.prompt('caiganmrfz'), function (card) {
                                        return card.hasGaintag('caiganmrfz');
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var cards = result.cards;
                                        player.draw(cards.length);
                                        if (!player.storage.caiganmrfz_times) {
                                            player.storage.caiganmrfz_times = true;
                                            player.draw();
                                        }
                                    }
                                },
                                ai: {
                                    threaten: 1.6,
                                    expose: 0.2,
                                },
                                group: ["caiganmrfz_mark", "caiganmrfz_remove", "caiganmrfz_times"],
                                subSkill: {
                                    mark: {
                                        trigger: {
                                            player: 'gainBegin',
                                        },
                                        silent: true,
                                        content: function () {
                                            trigger.gaintag.add('caiganmrfz');
                                        },
                                    },
                                    remove: {
                                        trigger: {
                                            player: 'gainAfter',
                                        },
                                        silent: true,
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            player.removeGaintag('caiganmrfz');
                                        },
                                    },
                                    times: {
                                        trigger: {
                                            global: 'phaseEnd',
                                        },
                                        silent: true,
                                        filter: function (event, player) {
                                            return player.storage.caiganmrfz_times
                                        },
                                        content: function () {
                                            player.storage.caiganmrfz_times = false;
                                        },
                                    },
                                },
                            },
                            jingsimrfz: {
                                onremove: true,
                                intro: { content: '已使用的牌：$' },
                                trigger: { player: "useCard" },
                                audio: 2,
                                frequent: true,
                                filter: function (event, player) {
                                    return !player.getStorage('jingsimrfz').contains(event.card.name);
                                },
                                content: function () {
                                    'step 0'
                                    player.draw();
                                    'step 1'
                                    player.markAuto('jingsimrfz', [trigger.card.name]);
                                },
                            },
                            //旧星熊
                            banruomrfz: {
                                audio: 4,
                                onremove: true,
                                init: function (player) {
                                    player.storage.banruomrfz = true;
                                    player.syncStorage("banruomrfz");
                                },
                                intro: {
                                    content: function (storage, player, skill) {
                                        if (player.storage.banruomrfz) return '星熊的巨盾将会保护她和她想保护的人';
                                        return '盾牌破损，但她并未后退';
                                    },
                                },
                                mark: true,
                                audio: 2,
                                trigger: { player: "damageBegin3" },
                                filter: function (event, player) {
                                    return player.storage.banruomrfz;
                                },
                                prompt: '是否取消此次伤害',
                                content: function () {
                                    trigger.cancel();
                                },
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        if (player.storage.banruomrfz) return player.maxHp;
                                    }
                                },
                                group: ['banruomrfz_lose', 'banruomrfz_draw', 'banruomrfz_round', 'banruomrfz_atk'],
                                subSkill: {
                                    lose: {
                                        forced: true,
                                        trigger: { source: "damageEnd" },
                                        filter: function (event, player) {
                                            return player.storage.banruomrfz;
                                        },
                                        firstDo: true,
                                        content: function () {
                                            player.storage.banruomrfz = false;
                                        },
                                    },
                                    draw: {
                                        forced: true,
                                        popup: false,
                                        trigger: { player: "phaseDrawBegin2" },
                                        filter: function (event, player) {
                                            return player.storage.banruomrfz;
                                        },
                                        content: function () {
                                            trigger.num--;
                                        },
                                    },
                                    round: {
                                        forced: true,
                                        trigger: { global: "roundStart" },
                                        filter: function (event, player) {
                                            return game.roundNumber > player.maxHp && player.storage.banruomrfz;
                                        },
                                        content: function () {
                                            player.storage.banruomrfz = false;
                                            player.logSkill('banruomrfz');
                                        },
                                    },
                                    atk: {
                                        forced: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return !player.storage.banruomrfz
                                        },
                                        content: function () {
                                            player.removeSkill('banruomrfz_atk');
                                            player.addSkill('banruomrfz2');
                                            player.logSkill('banruomrfz');
                                        },
                                    },
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (!player.storage.banruomrfz) return;
                                            if (get.tag(card, 'damage')) return 'zerotarget';
                                            if (get.type(card) == 'trick' && get.tag(card, 'damage')) {
                                                return 'zeroplayertarget';
                                            }
                                        }
                                    }
                                }
                            },
                            banruomrfz2: {
                                mark: true,
                                onremove: true,
                                intro: {
                                    content: "星熊放下了她的盾",
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num += 1;
                                    }
                                },
                                group: ['banruomrfz2_damage', 'banruomrfz2_lose'],
                                subSkill: {
                                    damage: {
                                        forced: true,
                                        usable: 1,
                                        trigger: { source: "damageBegin" },
                                        content: function () {
                                            trigger.num++;
                                            player.logSkill('banruomrfz');
                                        },
                                    },
                                    lose: {
                                        forced: true,
                                        trigger: { global: "phaseEnd" },
                                        content: function () {
                                            player.removeSkill('banruomrfz2');
                                        },
                                    },
                                },
                            },
                            yizhongmrfz: {
                                audio: 2,
                                trigger: { global: "damageBegin3" },
                                filter: function (event, player) {
                                    return get.distance(player, event.player) <= 1 && event.player != player && player.countCards('he') > 0;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) > 0;
                                },
                                prompt: function (event, player) {
                                    return "是否弃置一张牌并为" + get.translation(event.player) + "承担伤害";
                                },
                                content: function () {
                                    player.chooseToDiscard(true, 'he');
                                    trigger.cancel();
                                    player.damage(trigger.num, trigger.source || 'nosource', 'nocard');
                                },
                                group: 'yizhongmrfz2',
                            },
                            yizhongmrfz2: {
                                trigger: { player: "damageEnd" },
                                firstDo: true,
                                filter: function (event, player) {
                                    return event.getParent().name == 'yizhongmrfz';
                                },
                                prompt: '是否摸两张牌',
                                content: function () {
                                    player.draw(2);
                                },
                            },
                            //卡涅利安
                            shazhenmrfz: {
                                audio: 2,
                                forced: true,
                                mark: true,
                                init: function (player) {
                                    player.storage.shazhenmrfz = false;
                                    player.syncStorage("shazhenmrfz");
                                },
                                intro: {
                                    content: function (storage, player, skill) {
                                        if (!player.storage.shazhenmrfz || game.roundNumber == 1) return '沙暴环绕着卡涅利安</br>【沙阵】剩余次数：' + (2 - player.countMark('shazhenmrfz_damage'));
                                        return '沙暴散去';
                                    },
                                },
                                onremove: true,
                                trigger: { player: "damageBegin3" },
                                filter: function (event, player) {
                                    return (game.roundNumber == 1 || !player.storage.shazhenmrfz) && player.countMark('shazhenmrfz_damage') < 2;
                                },
                                content: function () {
                                    trigger.num--;
                                    player.addMark('shazhenmrfz_damage', false);
                                },
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        if (!player.storage.shazhenmrfz) return num += 2;
                                    }
                                },
                                group: ["shazhenmrfz_damage", "shazhenmrfz_clear"],
                                subSkill: {
                                    damage: {
                                        forced: true,
                                        silent: true,
                                        trigger: { source: "damageEnd" },
                                        filter: function (event, player) {
                                            return !event.player.hasMark('shacanmrfz');
                                        },
                                        content: function () {
                                            player.storage.shazhenmrfz = true;
                                        },
                                    },
                                    clear: {
                                        forced: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: "roundStart" },
                                        filter: function (event, player) {
                                            return player.storage.shazhenmrfz || player.countMark('shazhenmrfz_damage') > 0;
                                        },
                                        content: function () {
                                            player.storage.shazhenmrfz = false;
                                            player.removeMark('shazhenmrfz_damage', player.countMark('shazhenmrfz_damage'));
                                        },
                                    },
                                },
                            },
                            shacanmrfz: {
                                marktext: "噬",
                                intro: {
                                    name: "噬",
                                    content: function (storage, player, skill) {
                                        return '<span class=firetext>食噬之印</span></br>还需交给卡涅利安' + (2 - player.countMark('shacanmrfz2')) + '张牌即可消除一个‘噬’标记';
                                    },
                                },
                                onremove: true,
                                trigger: { source: "damageEnd" },
                                audio: 2,
                                filter: function (event, player) {
                                    return event.player.isAlive() && event.player.countMark('shacanmrfz') < 2;
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.player) + '获得一个‘噬’标记';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) <= 0;
                                },
                                content: function () {
                                    trigger.player.addMark('shacanmrfz');
                                },
                                group: ['shacanmrfz_remove', 'shacanmrfz_gain'],
                                subSkill: {
                                    remove: {
                                        forced: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: "gainEnd" },
                                        filter: function (event, player) {
                                            return event.source && event.source.isAlive() && event.source != player && event.source.hasMark('shacanmrfz');
                                        },
                                        logTarget: 'source',
                                        content: function () {
                                            var target = trigger.source;
                                            var num = target.countMark('shacanmrfz2');
                                            'step 0'
                                            target.addMark('shacanmrfz2', trigger.cards.length, false);
                                            'step 1'
                                            if (num > 1) {
                                                target.removeMark('shacanmrfz', Math.floor(num / 2));
                                                target.removeMark('shacanmrfz2', (Math.floor(num / 2) * 2));
                                            }
                                        },
                                    },
                                    gain: {
                                        trigger: { global: "phaseUseBegin" },
                                        filter: function (event, player) {
                                            return event.player.hasMark('shacanmrfz') && (player.getDamagedHp() > 0 || event.player.countCards('he') > 0);
                                        },
                                        direct: true,
                                        charlotte: true,
                                        content: function () {
                                            var target = trigger.player;
                                            'step 0'
                                            var list = [];
                                            if (player.getDamagedHp() > 0) list.add('回血');
                                            if (target.countCards('he') > 0) list.add('交牌');
                                            target.chooseControl(list).set('prompt', '选择一项').set('ai', function (player) {
                                                return 0;
                                            });
                                            'step 1'
                                            if (result.control == 'cancel2') event.finish();
                                            if (result.control == '回血') {
                                                player.recover();
                                                target.removeMark('shacanmrfz');
                                                player.logSkill('shacanmrfz');
                                                event.finish();
                                            }
                                            if (result.control == '交牌') {
                                                if (target.countCards('he') > 1) target.chooseCard(2, '展示两张牌', true, 'he').set('ai', function (card) {
                                                    return get.value(card);
                                                });
                                                else target.chooseCard(1, '展示两张手牌', true, 'he');
                                            }
                                            'step 2'
                                            if (result.bool && result.cards && result.cards.length) {
                                                if (result.cards.length == 1) {
                                                    event._result = { bool: true, links: result.cards.slice(0) };
                                                }
                                                else player.chooseButton(['选择获得其中的一张牌', result.cards], true).ai = function (button) {
                                                    return get.value(button.link);
                                                };
                                            }
                                            'step 3'
                                            if (result.links) {
                                                player.gain(result.links, target, 'give');
                                                player.logSkill('shacanmrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            shacanmrfz2: {
                                //检测用技能，无实际意义
                            },
                            shahuanmrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countMark('shacanmrfz') < 1;
                                },
                                content: function () {
                                    target.addMark('shacanmrfz');
                                },
                                ai: {
                                    order: 10,
                                    expose: 0.4,
                                    result: {
                                        target: -1,
                                    },
                                    threaten: 2
                                }
                            },
                            //陈
                            danweimrfz: {
                                onremove: true,
                                intro: {
                                    content: "已有#个胆"
                                },
                                audio: 2,
                                usable: 2,
                                trigger: { global: ['respond', 'useCard'] },
                                filter: function (event, player) {
                                    if (!event.respondTo) return false;
                                    if (player != event.respondTo[0]) return false;
                                    return event.cards.filterInD('od').length > 0;
                                },
                                logTarget: 'player',
                                content: function () {
                                    var cards = trigger.cards.filterInD('od');
                                    player.gain(cards, 'log', 'gain2');
                                    player.addMark('danweimrfz');
                                },
                                group: ["danweimrfz_use"],
                                subSkill: {
                                    use: {
                                        trigger: { player: ['respond', 'useCard'] },
                                        usable: 2,
                                        filter: function (event, player) {
                                            if (!event.respondTo) return false;
                                            return event.cards.filterInD('od').length > 0;
                                        },
                                        logTarget: 'player',
                                        content: function () {
                                            var cards = []
                                            if (get.itemtype(trigger.respondTo[1]) == 'card') cards.push(trigger.respondTo[1]);
                                            else if (trigger.respondTo[1].cards) cards.addArray(trigger.respondTo[1].cards);
                                            cards = cards.filterInD('od');
                                            player.gain(cards, 'gain2', 'log');
                                            player.logSkill('danweimrfz');
                                            player.addMark('danweimrfz');
                                        },
                                    },
                                },
                            },
                            hechimrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                usable: 1,
                                selectTarget: 1,
                                filterTarget: 1,
                                filter: function (event, player) {
                                    return player.countMark('danweimrfz') > 0 || player.countCards('h') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    if (player.countCards('h') == 0) event._result = { index: 1 };
                                    if (player.countMark('danweimrfz') == 0) event._result = { index: 0 };
                                    if (player.countMark('danweimrfz') > 0 && player.countCards('h') > 0) player.chooseControl().set('choiceList', [
                                        '弃置一张手牌',//0
                                        '失去一个‘胆’',//1
                                    ]).set('ai', function (card) {
                                        var player = _status.event.player;
                                        if (player.hasCard(function (card) {
                                            return get.value(card) < 7;
                                        }, 'h')) return 0;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.index == 0) { player.chooseToDiscard(true, 'h', '弃置一张手牌'); }
                                    else {
                                        player.removeMark('danweimrfz');
                                    }
                                    'step 2'
                                    if (!target.hasSkill('hechimrfz2')) target.addSkill('hechimrfz2');
                                    target.addMark('hechimrfz2');
                                    target.draw(2);
                                    if (target != player) player.draw();
                                },
                                ai: {
                                    order: 13,
                                },
                            },
                            hechimrfz2: {
                                onremove: true,
                                mark: true,
                                marktext: "斥",
                                intro: {
                                    name: "呵斥",
                                    content: "受到了陈的*龙门粗口*，手牌上限-#",
                                },
                                trigger: { player: "phaseDiscardEnd" },
                                forced: true,
                                charlotte: true,
                                silent: true,
                                content: function () {
                                    'step 0'
                                    player.removeMark("hechimrfz2", player.countMark('hechimrfz2'));
                                    player.removeSkill("hechimrfz2");
                                    //彩蛋
                                    'step 1'
                                    if (Math.random() < 0.1) player.logSkill('chencaidanmrfz');
                                },
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        return num -= player.countMark('hechimrfz2');
                                    }
                                },
                            },
                            jueyingmrfz: {
                                audio: 2,
                                trigger: { player: "phaseZhunbeiBegin" },
                                filter: function (event, player) {
                                    return player.countMark('danweimrfz') >= 5;
                                },
                                content: function () {
                                    'step 0'
                                    player.removeMark('danweimrfz', 5);
                                    event.num = 0;
                                    'step 1'
                                    event.num++;
                                    player.chooseUseTarget({
                                        name: 'sha',
                                        nature: 'thunder',
                                        isCard: true,
                                    }, '请选择雷【杀】的目标（雷【杀】：' + event.num + '/2；普通【杀】:0/1）', false, 'nodistance');
                                    'step 2'
                                    if (result.bool && event.num < 2) event.goto(1);
                                    else player.chooseUseTarget({
                                        name: 'sha',
                                        isCard: true,
                                    }, '请选择【杀】的目标（雷【杀】：2/2；普通【杀】:1/1）', false, 'nodistance');
                                },
                            },
                            chencaidanmrfz: {
                                //彩蛋
                                audio: 3,
                            },
                            newjingsimrfz: {
                                audio: 2,
                                zhuSkill: true,
                                trigger: { global: 'useCardToTarget' },
                                filter: function (event, player) {
                                    if (player.hasSkill('newjingsimrfz_ban')) return false;
                                    if (event.targets.length > 1) return false;
                                    if (event.player == player || event.target == player || event.source == player || player == _status.currentPhase) return false;
                                    return event.card.name == 'sha' || event.card.name == 'juedou';
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var target = trigger.target, card = trigger.card;
                                    target.chooseBool('【警司】：是否请求将此' + get.translation(trigger.card) + '的目标改为' + get.translation(player) + '?').set('ai', function () {
                                        var player = _status.event.player, target = _status.event.getTrigger().player;
                                        return get.attitude(player, target) > 2;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.chooseBool('【警司】：是否接受' + get.translation(trigger.player) + '的请求，令' + get.translation(trigger.card) + '的目标改为你？').set('ai', function () {
                                            var player = _status.event.player, target = _status.event.getTrigger().player;
                                            var nametmp = _status.event.name;
                                            if (nametmp == 'sha' && player.countCards('h', function (card) { return card.name == 'shan' }) < 1) return false;
                                            if (nametmp == 'juedou' && player.countCards('h', function (card) { return card.name == 'sha' }) < 2) return false;
                                            if (player.hp < 3) return false;
                                            return get.attitude(player, target) > 2;
                                        }).set('name', trigger.card.name);
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        player.draw();
                                        player.addMark('danweimrfz');
                                        player.addTempSkill('newjingsimrfz_ban', 'phaseEnd');
                                        var target = trigger.target;
                                        trigger.targets.remove(target);
                                        trigger.getParent().triggeredTargets1.remove(target);
                                        trigger.untrigger();
                                        game.delayx();
                                    }
                                    else event.finish();
                                    'step 3'
                                    trigger.targets.push(player);
                                    trigger.player.line(player, 'fire');
                                    game.log(trigger.card, '的目标被改为', player);
                                    player.logSkill('newjingsimrfz');
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                    },
                                },
                            },
                            //新艾雅法拉
                            luanhuomrfz: {
                                onremove: true,
                                marktext: "火",
                                intro: {
                                    name: "乱火",
                                    content: "本轮已执行回合数：#",
                                },
                                audio: 2,
                                trigger: { player: 'damageBegin2' },
                                filter: function (event, player) {
                                    return event.nature == 'fire';
                                },
                                forced: true,
                                direct: true,
                                content: function () {
                                    trigger.cancel();
                                    player.logSkill('luanhuomrfz');
                                },
                                ai: {
                                    nofire: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'fireDamage')) return 'zerotarget';
                                        },
                                    },
                                },
                                group: ["luanhuomrfz_fire", "luanhuomrfz_times", "luanhuomrfz_clear", "luanhuomrfz_damage"],
                                subSkill: {
                                    fire: {
                                        trigger: { source: "damageBegin" },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return event.nature != 'fire';
                                        },
                                        content: function () {
                                            trigger.cancel();
                                            trigger.player.damage(trigger.num, player, 'fire');
                                            player.logSkill('luanhuomrfz');
                                        },
                                    },
                                    times: {
                                        forced: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: "phaseBegin" },
                                        content: function () { player.addMark('luanhuomrfz'); },
                                    },
                                    clear: {
                                        forced: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: "roundStart" },
                                        filter: function (event, player) {
                                            return player.countMark('luanhuomrfz') > 0;
                                        },
                                        content: function () {
                                            player.removeMark('luanhuomrfz', player.countMark('luanhuomrfz'));
                                        },
                                    },
                                    damage: {
                                        trigger: { player: "phaseZhunbeiBegin" },
                                        content: function () {
                                            var num = player.countMark('luanhuomrfz');
                                            var str1 = '对至多' + get.cnNumber(num, true) + '名其他角色造成一点伤害'
                                            var str2 = '对一名其他角色造成' + get.cnNumber(num, true) + '点伤害'
                                            "step 0"
                                            if (num == 1) {
                                                player.chooseTarget(get.prompt2('luanhuomrfz'), function (card, player, target) {
                                                    return player != target;
                                                }).set('ai', function (target) {
                                                    var player = _status.event.player;
                                                    return get.damageEffect(target, player, player);
                                                });
                                            }
                                            else {
                                                player.chooseControl(str1, str2).set('ai', function (event, player) {
                                                    if (num > 2) return 0;
                                                    return 1;
                                                });
                                            }
                                            "step 1"
                                            if (result.bool && num == 1) {
                                                result.targets[0].damage();
                                                event.finish();
                                                player.logSkill('luanhuomrfz');
                                            }
                                            if (result.control == str1 && num > 1) {
                                                player.storage.luanhuomrfz_damage = true;
                                                player.chooseTarget([1, num], '对至多' + get.cnNumber(num, true) + '名其他角色造成一点伤害', function (card, player, target) {
                                                    return player != target;
                                                }).set('ai', function (target) {
                                                    var player = _status.event.player;
                                                    return get.damageEffect(target, player, player);
                                                });
                                            }
                                            else if (result.control == str2 && num > 1) {
                                                player.storage.luanhuomrfz_damage = false;
                                                player.chooseTarget('对一名其他角色造成' + get.cnNumber(num, true) + '点伤害', function (card, player, target) {
                                                    return player != target;
                                                }).set('ai', function (target) {
                                                    var player = _status.event.player;
                                                    return get.damageEffect(target, player, player);
                                                });
                                            }
                                            "step 2"
                                            if (result.bool && !player.storage.luanhuomrfz_damage) {
                                                result.targets[0].damage(num);
                                                player.logSkill('luanhuomrfz');
                                            }
                                            else if (result.bool && player.storage.luanhuomrfz_damage) {
                                                player.logSkill('luanhuomrfz');
                                                for (var i = 0; i < result.targets.length; i++) result.targets[i].damage(player);
                                            }
                                        },
                                    },
                                },
                            },
                            qingyanmrfz: {
                                audio: 2,
                                trigger: { player: "phaseUseEnd" },
                                filter: function (event, player) {
                                    if (player.hasMark('qingyanmrfz')) return false;
                                    return player.getHistory('useCard', function (evt) {
                                        return evt.getParent('phaseUse') == event;
                                    }).length > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var list = [];
                                    player.getHistory('useCard', function (evt) {
                                        if (evt.getParent('phaseUse') == trigger) list.add(get.type2(evt.card));
                                    });
                                    if (list.length >= 3) {
                                        player.chooseBool('【勤研】：是否于本回合结束后额外执行一个回合？');
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) {
                                        player.insertPhase();
                                        player.addMark('qingyanmrfz', false);
                                        player.logSkill('qingyanmrfz');
                                    }
                                },
                                group: 'qingyanmrfz_clear',
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.hasMark('qingyanmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('qingyanmrfz', player.countMark('qingyanmrfz'));
                                        },
                                    },
                                },
                            },
                            //傀影
                            xuyingmrfz: {
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 2,
                                trigger: { player: 'useCard' },
                                direct: true,
                                notemp: true,
                                filter: function (event, player) {
                                    if (event.xuyingmrfz_buff || !event.targets.length || player.hasSkill('xuyingmrfz_buff')) return false;
                                    var type = get.type(event.card, false);
                                    if (type != 'basic' && type != 'trick' && player.getExpansions('xuyingmrfz').length > 0) return false;
                                    return player.getExpansions('xuyingmrfz').filter(function (magic) {
                                        return get.type2(magic) != get.type2(event.card);
                                    }).length;
                                },
                                content: function () {
                                    'step 0'
                                    var cards = player.getExpansions('xuyingmrfz').filter(function (magic) {
                                        return get.type2(magic) != get.type2(trigger.card);
                                    });
                                    if (cards.length) player.chooseButton(['你可以选择移去一张与你使用的牌类型不同的“虚影”，令此牌结算两次', cards]);
                                    else event.finish();
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('xuyingmrfz');
                                        player.loseToDiscardpile(result.links);
                                        player.addTempSkill('xuyingmrfz_buff', 'phaseUseAfter');
                                        trigger.xuyingmrfz_buff = player;
                                    }
                                },
                                group: ["xuyingmrfz_discard", "xuyingmrfz_judge"],
                                subSkill: {
                                    discard: {
                                        audio: 2,
                                        trigger: { global: 'loseAfter' },
                                        filter: function (event, player) {
                                            if (event.type != 'discard' || event.getlx === false) return false;
                                            if (player.getExpansions('xuyingmrfz').length >= 3) return false;
                                            var cards = event.cards.slice(0);
                                            var evt = event.getl(player);
                                            for (var i = 0; i < cards.length; i++) {
                                                if (cards[i].original != 'j' && get.suit(cards[i], event.player) == 'spade' && get.position(cards[i], true) == 'd') {
                                                    return true;
                                                }
                                            }
                                            return false;
                                        },
                                        direct: true,
                                        content: function () {
                                            "step 0"
                                            if (trigger.delay == false) game.delay();
                                            "step 1"
                                            var cards = [], cards2 = trigger.cards.slice(0), evt = trigger.getl(player);
                                            var num = player.getExpansions('xuyingmrfz').length;
                                            for (var i = 0; i < cards2.length; i++) {
                                                if (cards2[i].original != 'j' && get.suit(cards2[i], trigger.player) == 'spade' && get.position(cards2[i], true) == 'd') {
                                                    cards.push(cards2[i]);
                                                }
                                            }
                                            if (cards.length && (num + cards.length <= 3)) {
                                                player.chooseButton(['虚影：选择置于武将牌上的牌', cards], [1, cards.length]).set('ai', function (button) {
                                                    return get.value(button.link, _status.event.player, 'raw');
                                                });
                                            }
                                            else if (cards.length) {
                                                player.chooseButton(['虚影：选择置于武将牌上的牌', cards], [1, 3 - num]).set('ai', function (button) {
                                                    return get.value(button.link, _status.event.player, 'raw');
                                                });
                                            }
                                            "step 2"
                                            if (result.bool && result.links.length) {
                                                player.logSkill('xuyingmrfz');
                                                player.addToExpansion(result.links, player, 'giveAuto').gaintag.add('xuyingmrfz');
                                            }
                                        },
                                    },
                                    judge: {
                                        audio: 2,
                                        trigger: { global: 'cardsDiscardAfter' },
                                        direct: true,
                                        filter: function (event, player) {
                                            var evt = event.getParent().relatedEvent;
                                            if (!evt || evt.name != 'judge') return;
                                            if (player.getExpansions('xuyingmrfz').length >= 3) return false;
                                            if (get.position(event.cards[0], true) != 'd') return false;
                                            return (get.suit(event.cards[0]) == 'spade');
                                        },
                                        content: function () {
                                            "step 0"
                                            var card = trigger.cards.length
                                            var num = player.getExpansions('xuyingmrfz').length
                                            if (card + num <= 3) player.chooseButton(['虚影：选择置于武将牌上的牌', trigger.cards], [1, card]).set('ai', function (button) {
                                                return get.value(button.link, _status.event.player, 'raw');
                                            });
                                            else player.chooseButton(['虚影：选择置于武将牌上的牌', trigger.cards], [1, 3 - num]).set('ai', function (button) {
                                                return get.value(button.link, _status.event.player, 'raw');
                                            });
                                            "step 1"
                                            if (result.bool && result.links.length) {
                                                player.logSkill('xuyingmrfz');
                                                player.addToExpansion(result.links, player, 'giveAuto').gaintag.add('xuyingmrfz');
                                            }
                                        }
                                    },
                                    buff: {
                                        trigger: { global: 'useCardToTargeted' },
                                        forced: true,
                                        charlotte: true,
                                        popup: false,
                                        lastDo: true,
                                        filter: function (event, player) {
                                            return (event.parent.xuyingmrfz_buff == player && event.targets.length == event.parent.triggeredTargets4.length);
                                        },
                                        content: function () {
                                            trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                            trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                            player.removeSkill('xuyingmrfz_buff');
                                        },
                                        onremove: true,
                                    },
                                },
                            },
                            xuegemrfz: {
                                audio: 2,
                                trigger: { player: "damageEnd" },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return target != player && player.inRange(target);
                                    });
                                },
                                check: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return target != player && get.attitude(player, target) < 2 && player.inRange(target);
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget("请选择【血歌】的目标", "对一名你的攻击范围内其他角色造成一点伤害", true, function (card, player, target) {
                                        return target != player && player.inRange(target);
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        player.line(result.targets);
                                        result.targets[0].damage();
                                        if (result.targets[0].hp > player.hp || player.getExpansions('xuyingmrfz').length >= 3) event.finish();
                                    };
                                    'step 2'
                                    if (player.countCards('he') && player.getExpansions('xuyingmrfz').length < 3) {
                                        player.chooseCard('你可以将一张牌置于武将牌上作为“虚影”', 'he');
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 3'
                                    if (result.cards && result.cards.length) {
                                        player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add('xuyingmrfz');
                                    }
                                },
                            },
                            huanxiangmrfz: {
                                audio: 2,
                                trigger: { player: "useCardAfter" },
                                filter: function (event, player) {
                                    return event.card && (event.card.name == 'shan' || event.card.name == 'wuxie');
                                },
                                frequent: true,
                                content: function () {
                                    player.draw();
                                },
                            },
                            //莫斯提马
                            huanshimrfz: {
                                audio: 2,
                                direct: true,
                                trigger: { player: "phaseEnd" },
                                getNum: function () {
                                    var num = 0;
                                    game.getGlobalHistory('cardMove', function (evt) {
                                        if (evt.name == 'lose' && evt.type == 'discard') num += evt.cards2.length;
                                    });
                                    return num;
                                },
                                filter: function (event, player) {
                                    return lib.skill.huanshimrfz.getNum() > 0 && game.hasPlayer(function (target) {
                                        return target != player && !player.hasSkill('huanshimrfz_buff1');
                                    });
                                },
                                content: function () {
                                    var num = lib.skill.huanshimrfz.getNum();
                                    'step 0'
                                    player.chooseTarget(get.prompt('huanshimrfz'), '你可以选择至多' + get.cnNumber(num) + '名角色令其下个回合内：①其使用的第一张【杀】指定目标时，取消之，然后其获得这张【杀】。', [1, num], function (card, player, target) {
                                        return target != player && !player.hasSkill('huanshimrfz_buff1');
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        for (var i of result.targets) {
                                            i.addSkill(['huanshimrfz_buff1', 'huanshimrfz_buff2']);
                                            player.line(i);
                                        }
                                        player.logSkill('huanshimrfz');
                                    }
                                },
                                subSkill: {
                                    tmp: {
                                        silent: true,
                                        charlotte: true,
                                    },
                                    buff1: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: "useCardToPlayered" },
                                        filter: function (event, player) {
                                            if (player.hasSkill('huanshimrfz_tmp')) return false;
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            var cards = [];
                                            for (var i = 0; i < trigger.cards.length; i++) {
                                                if (get.position(trigger.cards[i], true) == 'o') {
                                                    cards.push(trigger.cards[i]);
                                                }
                                            }
                                            player.gain(cards, 'gain2');
                                            trigger.getParent().excluded.addArray(trigger.targets);
                                            player.addTempSkill('huanshimrfz_tmp', 'phaseEnd');
                                        },
                                    },
                                    buff2: {
                                        onremove: true,
                                        mark: true,
                                        marktext: "缓",
                                        intro: {
                                            name: "主观缓时",
                                            content: '行动受到限制',
                                        },
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: "phaseEnd" },
                                        filter: function (event, player) {
                                            return player.hasSkill('huanshimrfz_buff1') || player.hasSkill('huanshimrfz_buff2');
                                        },
                                        content: function () {
                                            player.removeSkill('huanshimrfz_buff1');
                                            player.removeSkill('huanshimrfz_buff2');
                                        },
                                    },
                                },
                            },
                            shishimrfz: {
                                audio: 2,
                                trigger: { player: "drawBegin" },
                                filter: function (event, player) {
                                    return (event.getParent('phaseDraw') && event.getParent('phaseDraw').player == player) || (event.getParent('phaseUse') && event.getParent('phaseUse').player == player);
                                },
                                content: function () {
                                    trigger.num += player.countMark('shishimrfz') + 1;
                                    player.addMark('shishimrfz', false);
                                },
                                group: 'shishimrfz_discard',
                                subSkill: {
                                    discard: {
                                        direct: true,
                                        trigger: { player: "phaseDiscardBefore" },
                                        filter: function (event, player) {
                                            return player.hasMark('shishimrfz');
                                        },
                                        content: function () {
                                            var num = player.countMark('shishimrfz');
                                            player.chooseToDiscard(get.prompt('shishimrfz'), '弃置' + get.cnNumber(num) + '张牌', 'he', true, num);
                                            player.removeMark('shishimrfz', num, false);
                                        },
                                    },
                                },
                            },
                            jiemimrfz: {
                                intro: {
                                    content: function (event, player) {
                                        var num = player.countMark('jiemimrfz') + 1;
                                        if (player != _status.currentPhase && player.countMark('jiemimrfz') % 2 == 1) return '弃置' + get.cnNumber(num) + '张牌';
                                        if (player != _status.currentPhase && player.countMark('jiemimrfz') % 2 != 1) return '摸' + get.cnNumber(num) + '张牌';
                                        if (player == _status.currentPhase && player.countMark('jiemimrfz') % 2 == 1) return '摸' + get.cnNumber(num) + '张牌';
                                        if (player == _status.currentPhase && player.countMark('jiemimrfz') % 2 != 1) return '弃置' + get.cnNumber(num) + '张牌';
                                    },
                                },
                                mark: true,
                                charlotte: true,
                                onremove: true,
                                audio: 2,
                                direct: true,
                                trigger: { global: "phaseEnd" },
                                filter: function (event, player) {
                                    return player.hasMark('jiemimrfz');
                                },
                                content: function () {
                                    player.removeMark('jiemimrfz', player.countMark('jiemimrfz'));
                                },
                                group: ['jiemimrfz_cw', 'jiemimrfz_zd'],
                                subSkill: {
                                    cw: {
                                        forced: true,
                                        trigger: { target: "useCardToTargeted" },
                                        filter: function (event, player) {
                                            return player != _status.currentPhase;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.addMark('jiemimrfz');
                                            'step 1'
                                            if (player.countMark('jiemimrfz') % 2 == 1) player.draw(player.countMark('jiemimrfz'));
                                            else player.chooseToDiscard('弃置' + get.cnNumber(player.countMark('jiemimrfz')) + '张手牌', player.countMark('jiemimrfz'), true, 'h');
                                            player.logSkill("jiemimrfz");
                                        },
                                    },
                                    zd: {
                                        forced: true,
                                        trigger: { player: "useCardToTargeted" },
                                        filter: function (event, player) {
                                            if (player != _status.currentPhase) return false;
                                            return event.target != player && event.targets.length == 1;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.addMark('jiemimrfz');
                                            'step 1'
                                            if (player.countMark('jiemimrfz') % 2 == 1) player.chooseToDiscard('弃置' + get.cnNumber(player.countMark('jiemimrfz')) + '张手牌', player.countMark('jiemimrfz'), true, 'h');
                                            else player.draw(player.countMark('jiemimrfz'));
                                            player.logSkill("jiemimrfz");
                                        },
                                    },
                                },
                            },
                            shihuangmrfz: {
                                audio: 2,
                                usable: 2,
                                trigger: { player: "loseAfter" },
                                filter: function (event, player) {
                                    if (event.type != 'discard' || event.getlx === false) return false;
                                    if (event.name.indexOf('lose') != 0) return (event.name != 'phase' || game.phaseNumber == 0);
                                    var evt = event.getl(player);
                                    var num = 0;
                                    for (var i = 0; i < evt.cards2.length; i++) {
                                        num += evt.cards2[i].number
                                    }
                                    return num > (player.hp * 2) && !player.hasSkill('shihuangmrfz2');
                                },
                                content: function () {
                                    var num = 0;
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        num += trigger.cards[i].number
                                    }
                                    player.addSkill('shihuangmrfz2');
                                    player.gain(trigger.cards, 'gain2', 'log');
                                },
                            },
                            shihuangmrfz2: {
                                direct: true,
                                silent: true,
                                charlotte: true,
                                trigger: { global: 'phaseEnd' },
                                content: function () {
                                    player.removeSkill('shihuangmrfz2');
                                },
                            },
                            baokemrfz: {
                                audio: 2,
                                usable: 1,
                                trigger: { source: "damageEnd" },
                                filter: function (event, player) {
                                    if (event.getParent('phaseUse') && event.getParent('phaseUse').player != player) return false;
                                    if (event.player == player) return false;
                                    if (!event.player.isAlive()) return false;
                                    if (event.nature) return true;
                                    return event.player.getEquip(2);
                                },
                                content: function () {
                                    trigger.player.damage();
                                },
                            },
                            //菲亚梅塔
                            nanjiaomrfz: {
                                init: function (player) {
                                    player.storage.nanjiaomrfz = 0;
                                },
                                onremove: true,
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i].isOut() || game.players[i] == player) continue;
                                            if (game.players[i].storage.nanjiaomrfz && game.players[i].storage.nanjiaomrfz != 0) {
                                                var target = game.players[i];
                                                break;
                                            }
                                        }
                                        return '你的手牌上限' + (player.storage.nanjiaomrfz > 0 ? '+' : '') + Math.floor(player.storage.nanjiaomrfz / 2) + '</br>' + get.translation(target) + '的手牌上限' + (target.storage.nanjiaomrfz > 0 ? '+' : ' ') + Math.floor(target.storage.nanjiaomrfz / 2);
                                    },
                                },
                                audio: 2,
                                trigger: { global: 'roundStart' },
                                forced: true,
                                content: function () {
                                    game.countPlayer(function (current) {
                                        if (current.storage.nanjiaomrfz) {
                                            current.storage.nanjiaomrfz = 0;
                                            if (current != player) current.removeSkill('nanjiaomrfz_eff');
                                        }
                                    });
                                    if (!player.isMaxHandCardLimit(true)) {
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i].isOut() || game.players[i] == player) continue;
                                            if (game.players[i].isMaxHandCardLimit()) {
                                                player.storage.nanjiaomrfz = game.players[i].getHandcardLimit();
                                                game.players[i].storage.nanjiaomrfz = -(game.players[i].getHandcardLimit() - 1);
                                                game.players[i].addSkill('nanjiaomrfz_eff');
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i].isOut() || game.players[i] == player) continue;
                                            if (game.players[i].isMinHandCardLimit()) {
                                                game.players[i].storage.nanjiaomrfz = player.getHandcardLimit();
                                                player.storage.nanjiaomrfz = -(player.getHandcardLimit() - 1);
                                                game.players[i].addSkill('nanjiaomrfz_eff');
                                                break;
                                            }
                                        }
                                    }
                                },
                                group: ['nanjiaomrfz_eff'],
                                subSkill: {
                                    eff: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + Math.floor(player.storage.nanjiaomrfz / 2);
                                            },
                                        },
                                    },
                                },
                            },
                            shunanmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: "phaseEnd" },
                                filter: function (event, player) {
                                    return player.hp > 1 && !player.hasSkill('lvwaimrfz_ban');
                                },
                                content: function () {
                                    player.loseHp();
                                },
                                group: ['shunanmrfz_damage'],
                                subSkill: {
                                    damage: {
                                        trigger: {
                                            source: "damageBegin3",
                                            player: "phaseDrawBegin2",
                                        },
                                        direct: true,
                                        filter: function (event, player) {
                                            return player.countCards('h') >= player.hp;
                                        },
                                        content: function () {
                                            if (player.getDamagedHp() <= (player.maxHp / 2)) trigger.num += 2;
                                            else trigger.num++;
                                            player.logSkill('shunanmrfza');
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.2,
                                },
                            },
                            shunanmrfza: {
                                audio: 2,
                            },
                            lvwaimrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '律外',
                                animationColor: 'fire',
                                init: function (player) {
                                    player.storage.lvwaimrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.lvwaimrfz;
                                },
                                content: function () {
                                    'step 0'
                                    player.addSkill(['lvwaimrfz_damage', 'lvwaimrfz_ban', 'lvwaimrfz_clear', 'lvwaimrfz_sha']);
                                    'step 1'
                                    player.chooseUseTarget({ name: 'sha', isCard: true }, true, 'nodistance');
                                    player.storage.lvwaimrfz = true;
                                },
                                subSkill: {
                                    damage: {
                                        direct: true,
                                        forced: true,
                                        trigger: { source: "damageEnd" },
                                        content: function () {
                                            player.draw(trigger.num);
                                            player.recover(trigger.num);
                                            player.removeSkill('lvwaimrfz_damage');
                                        },
                                    },
                                    ban: {
                                        direct: true,
                                        forced: true,
                                        silent: true,
                                        trigger: { global: "phaseBegin" },
                                        content: function () {
                                            player.removeSkill('lvwaimrfz_ban');
                                        },
                                    },
                                    clear: {
                                        direct: true,
                                        silent: true,
                                        trigger: { player: "shaAfter" },
                                        content: function () {
                                            player.removeSkill('lvwaimrfz_clear');
                                            if (player.hasSkill('lvwaimrfz_damage')) player.removeSkill('lvwaimrfz_damage');
                                        },
                                    },
                                    sha: {
                                        direct: true,
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, card) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            trigger.directHit.addArray(game.players);
                                            player.removeSkill('lvwaimrfz_sha');
                                        },
                                    },
                                },
                            },
                            //棘刺
                            chaoshengmrfz: {
                                intro: {
                                    content: function (event, player) {
                                        return player.countMark('chaoshengmrfz') + '/' + player.countMark('chaoshengmrfz2');
                                    },
                                },
                                mark: true,
                                audio: 2,
                                trigger: { player: 'phaseEnd' },
                                frequent: true,
                                filter: function (event, player) {
                                    return player.countMark('chaoshengmrfz') >= player.countMark('chaoshengmrfz2');
                                },
                                content: function () {
                                    player.removeMark('chaoshengmrfz', player.countMark('chaoshengmrfz'));
                                    if (player.countMark('jianshumrfz') < 15) {
                                        player.chooseDrawRecover(2, true, function (event, player) {
                                            if (player.hp == 1 && player.isDamaged()) return 'recover_hp';
                                            return 'draw_card';
                                        });
                                    }
                                    else {
                                        player.draw(2);
                                        player.recover();
                                    }
                                },
                                group: ['chaoshengmrfz_limite', 'chaoshengmrfz_gain'],
                                subSkill: {
                                    limite: {
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        content: function () {
                                            player.addMark('chaoshengmrfz2', 3, false);
                                            player.removeSkill('chaoshengmrfz_limite');
                                        },
                                    },
                                    gain: {
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: 'phaseEnd' },
                                        firstDo: true,
                                        content: function () {
                                            if (!player.getStat('damage')) player.addMark('chaoshengmrfz');
                                            else player.removeMark('chaoshengmrfz', player.countMark('chaoshengmrfz'));
                                        },
                                    },
                                },
                            },
                            jianshumrfz: {
                                intro: {
                                    content: function (event, player) {
                                        var num = player.countMark('jianshumrfz')
                                        if (num == 15) return '【潮声】已修改</br>摸牌阶段摸牌数+1;攻击距离和【杀】的使用次数各+2';
                                        if (num < 15 && num > 9) return '已累计指定' + num + '次</br>摸牌阶段摸牌数+1;攻击距离和【杀】的使用次数各+2';
                                        if (num < 10 && num > 4) return '已累计指定' + num + '次</br>摸牌阶段摸牌数、攻击距离和【杀】的使用次数各+1';
                                        return '已累计指定' + num + '次';
                                    },
                                },
                                audio: 3,
                                direct: true,
                                trigger: { player: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return player.countMark('jianshumrfz') < 15;
                                },
                                content: function () {
                                    'step 0'
                                    player.addMark('jianshumrfz');
                                    'step 1'
                                    var num = player.countMark('jianshumrfz')
                                    if (num % 5 == 0) {
                                        player.logSkill('jianshumrfz');
                                        if (num == 5 || num == 15) player.removeMark('chaoshengmrfz2');
                                        if (num == 10) player.addSkill('jianshumrfz_usesha');
                                        if (num == 5 || 10) player.addMark('jianshumrfz_time');
                                        if (num == 5) player.addMark('jianshumrfz_draw');
                                        if (num == 5 || 10) player.addMark('jianshumrfz_range');
                                    }
                                },
                                group: ['jianshumrfz_time', 'jianshumrfz_range', 'jianshumrfz_draw'],
                                subSkill: {
                                    time: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('jianshumrfz_time');
                                            }
                                        },
                                    },
                                    range: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            attackRange: function (player, num) {
                                                return num + player.countMark('jianshumrfz_range');
                                            },
                                        },
                                    },
                                    draw: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: "phaseDrawBegin2" },
                                        filter: function (event, player) {
                                            return player.hasMark('jianshumrfz_draw');
                                        },
                                        content: function () {
                                            trigger.num++;
                                            player.logSkill('jianshumrfz');
                                        },
                                    },
                                    usesha: {
                                        direct: true,
                                        trigger: { player: "phaseUseBegin" },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('选择一名其他角色视为对其使用一张【杀】', function (card, player, target) {
                                                return target != player && player.inRange(target);
                                            }).ai = function (target) {
                                                return -get.attitude(player, target);
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                player.useCard({ name: 'sha' }, true, false, target);
                                                player.logSkill('jianshumrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            //夜莺
                            qiulongmrfz: {
                                intro: {
                                    name: "笼",
                                    content: '你获得了白恶魔的庇护',
                                },
                                audio: 2,
                                direct: true,
                                trigger: { global: 'roundStart' },
                                content: function () {
                                    'step 0'
                                    player.line2(game.filterPlayer(function (current) {
                                        if (current.hasMark('qiulongmrfz')) {
                                            current.removeMark('qiulongmrfz');
                                            return true;
                                        }
                                    }).concat(result.targets), 'green')
                                    'step 1'
                                    player.chooseTarget('你可以选择一名角色，令其获得‘笼’标记', function (card, player, target) {
                                        return target != player;
                                    }).ai = function (target) {
                                        return get.attitude(player, target);
                                    };
                                    'step 2'
                                    if (result.bool) {
                                        result.targets[0].addMark('qiulongmrfz');
                                        player.logSkill('qiulongmrfz');
                                    }
                                },
                                group: ['qiulongmrfz_damage', 'qiulongmrfz_huan'],
                                subSkill: {
                                    remove: {
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        silent: true,
                                        trigger: { global: "roundStart" },
                                        filter: function (event, player) {
                                            return player.hasMark('qiulongmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('qiulongmrfz');
                                        },
                                    },
                                    damage: {
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: "damageEnd" },
                                        filter: function (event, player) {
                                            return event.player.hasMark('qiulongmrfz');
                                        },
                                        content: function () {
                                            var num = trigger.num
                                            trigger.player.recover(num);
                                            player.damage(num, 'nosource');
                                            player.addMark('qiulongmrfz_huan', num * 2);
                                            player.logSkill('qiulongmrfz');
                                        },
                                    },
                                    huan: {
                                        marktext: '幻影',
                                        intro: {
                                            name: "幻",
                                            content: '幻影',
                                        },
                                    },
                                },
                            },
                            bihumrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: "damageBegin3" },
                                filter: function (event, player) {
                                    return event.nature;
                                },
                                content: function () {
                                    trigger.cancel();
                                },
                                group: 'bihumrfz_damage',
                                subSkill: {
                                    damage: {
                                        forced: true,
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.source != undefined;
                                        },
                                        content: function () {
                                            player.addMark('qiulongmrfz_huan', trigger.num);
                                            player.logSkill('bihumrfz');
                                        },
                                    },
                                },
                                ai: {
                                    nofire: true,
                                    nothunder: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'natureDamage')) return 'zerotarget';
                                        },
                                    },
                                },
                            },
                            shengyumrfz: {
                                audio: 2,
                                enable: "phaseUse",
                                forced: true,
                                mark: true,
                                init: function (player) {
                                    player.storage.shengyumrfz = false;
                                },
                                derivation: ['polongmrfz'],
                                filter: function (event, player) {
                                    return !player.storage.shengyumrfz;
                                },
                                intro: {
                                    content: function (event, player) {
                                        if (!player.storage.shengyumrfz) return '圣域已准备就绪';
                                        return '圣域充能中:' + player.countMark('shengyumrfz_cd') + '/4';
                                    },
                                },
                                filterTarget: true,
                                selectTarget: [1, 3],
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    for (var i of targets) i.addSkill('polongmrfz');
                                    player.storage.shengyumrfz = true;
                                    player.recover(2);
                                },
                                group: 'shengyumrfz_cd',
                                ai: {
                                    order: 10,
                                    threaten: 2,
                                    expose: 0.8,
                                    result: {
                                        player: 10,
                                        target: 10,
                                    },
                                },
                                subSkill: {
                                    cd: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.storage.shengyumrfz == true;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.addMark('shengyumrfz_cd', false);
                                            'step 1'
                                            if (player.countMark('shengyumrfz_cd') >= 4) {
                                                player.storage.shengyumrfz = false;
                                                player.removeMark('shengyumrfz_cd', player.countMark('shengyumrfz_cd'));
                                            }
                                        },
                                    },
                                },
                            },
                            polongmrfz: {
                                intro: {
                                    name: '破笼',
                                    content: function (event, player) {
                                        if (player.countMark('polongmrfz_round') >= 3) return '圣域持续时间:' + player.countMark('polongmrfz_round') + '/3</br><span class=firetext>最后一轮</span>';
                                        return '圣域持续时间:' + player.countMark('polongmrfz_round') + '/3';
                                    },
                                },
                                mark: true,
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 5,
                                filter: function (event, player) {
                                    if (player.getDamagedHp() == 0 && player.countMark('polongmrfz_mark1') >= 3) return false;
                                    return game.hasPlayer(function (current) {
                                        return current.countMark('qiulongmrfz_huan') > 0;
                                    })
                                },
                                content: function () {
                                    'step 0'
                                    var list = []
                                    if (player.countMark('polongmrfz_mark1') < 3) list.add('摸牌');
                                    if (player.countMark('polongmrfz_mark2') < 2) list.add('回血');
                                    if (player.getDamagedHp() != 0) {
                                        player.chooseControl(list, 'cancel2').set('prompt', get.prompt('polongmrfz')).set('prompt2', '回复一点体力或摸一张牌').ai = function (event, player) {
                                            if (player.hp == 1 && player.isDamaged()) return '回血';
                                            return '摸牌';
                                        };
                                    }
                                    else {
                                        event.finish();
                                        player.draw();
                                        player.logSkill('polongmrfz');
                                        player.addMark('polongmrfz_mark1', false);
                                        game.countPlayer(function (current) {
                                            current.removeMark('qiulongmrfz_huan');
                                        });
                                    }
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        game.countPlayer(function (current) {
                                            current.removeMark('qiulongmrfz_huan');
                                        });
                                        player.logSkill('polongmrfz');
                                        if (result.control == '摸牌') {
                                            player.draw();
                                            player.addMark('polongmrfz_mark1', false);
                                        }
                                        if (result.control == '回血') {
                                            player.recover();
                                            player.addMark('polongmrfz_mark2', false);
                                        }
                                    }
                                },
                                group: ['polongmrfz_damage', 'polongmrfz_remove', 'polongmrfz_round'],
                                subSkill: {
                                    damage: {
                                        trigger: { player: 'damageBegin3' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.countMark('qiulongmrfz_huan') > 0;
                                            })
                                        },
                                        check: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.countMark('qiulongmrfz_huan') > 3;
                                            }) || player.hp <= 2;
                                        },
                                        content: function () {
                                            trigger.num--;
                                            game.countPlayer(function (current) {
                                                current.removeMark('qiulongmrfz_huan');
                                            });
                                        },
                                    },
                                    remove: {
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: "phaseUseEnd" },
                                        filter: function (event, player) {
                                            return player.hasMark('polongmrfz_mark1') || player.hasMark('polongmrfz_mark2');
                                        },
                                        content: function () {
                                            player.removeMark('polongmrfz_mark1', player.countMark('polongmrfz_mark1'));
                                            player.removeMark('polongmrfz_mark2', player.countMark('polongmrfz_mark2'));
                                        },
                                    },
                                    round: {
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            'step 0'
                                            player.addMark('polongmrfz_round', false);
                                            'step 1'
                                            if (player.countMark('polongmrfz_round') > 3) player.removeSkill('polongmrfz');
                                        },
                                    },
                                    mark1: {},
                                    mark2: {},
                                },
                                ai: {
                                    order: 12,
                                    threaten: 2,
                                    result: {
                                        player: 10,
                                    },
                                },
                            },
                            //赫拉格
                            yingkuimrfz: {
                                mod: {
                                    cardname: function (card, player) {
                                        if (card.name == 'tao') return 'sha';
                                    },
                                    maxHandcard: function (player, num) {
                                        return num += 2;
                                    },
                                },
                                audio: 2,
                                forced: true,
                                firstDo: true,
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    return player.hasHistory('lose', function (evt) {
                                        if (event != evt.getParent()) return false;
                                        for (var i in evt.gaintag_map) {
                                            if (evt.gaintag_map[i].contains('yingkuimrfza')) return true;
                                        }
                                        return false;
                                    });
                                },
                                content: function () {
                                    trigger.directHit.addArray(game.filterPlayer(function (current) {
                                        return current != player;
                                    }));
                                },
                                ai: {
                                    directHit_ai: true,
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'respondSha') && current < 0) return 0.6
                                        }
                                    },
                                    respondSha: true,
                                },
                                group: ['yingkuimrfz_gain', 'yingkuimrfz_gain2'],
                                subSkill: {
                                    gain: {
                                        trigger: { player: 'gainAfter' },
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return player.countCards('h') > 0;
                                        },
                                        content: function () {
                                            player.addGaintag(player.getCards('h', { name: 'tao' }), 'yingkuimrfza');
                                        },
                                    },
                                    gain2: {
                                        forced: true,
                                        silent: true,
                                        charlotte: true,
                                        trigger: {
                                            player: 'enterGame',
                                            global: 'phaseBefore',
                                        },
                                        content: function () {
                                            var hs = player.getCards('h', { name: 'tao' });
                                            if (hs.length) player.addGaintag(hs, 'yingkuimrfza');
                                            player.removeSkill('yingkuimrfz_gain2');
                                        },
                                    },
                                },
                            },
                            yingkuimrfza: {
                                audio: 2,
                            },
                            cangfengmrfz: {
                                audio: 2,
                                direct: true,
                                trigger: { source: "damageEnd" },
                                intro: {
                                    content: '#/2',
                                },
                                onremove: true,
                                content: function () {
                                    var mark = player.countMark("cangfengmrfz")
                                    'step 0'
                                    player.addMark('cangfengmrfz', trigger.num, false);
                                    'step 1'
                                    if (mark / 2 >= 1 && player.getDamagedHp() > 0) {
                                        player.chooseControl('摸牌', '回血').set('prompt', '摸一张牌或回一点血');
                                    }
                                    else if (mark / 2 < 1) event.finish();
                                    'step 2'
                                    if (result.control == '回血') player.recover();
                                    else player.draw();
                                    player.logSkill('cangfengmrfz');
                                    player.removeMark('cangfengmrfz', 2);
                                    'step 3'
                                    if (mark / 2 >= 1) event.goto(1);
                                },
                            },
                            yuexiangmrfz: {
                                intro: {
                                    content: function (event, player) {
                                        var list = []
                                        if (player.getDamagedHp() >= 3) {
                                            list.push('<span class=firetext>满月</span> <span class=thundertext>弦月 新月</span></br>·你使用【杀】的次数+X（X=本阶段你使用杀的次数/2+1，向下取整）；出牌阶段限一次，你第一次使用【杀】造成的伤害+1</br>·出牌阶段使用的第一张【杀】结算两次</br>·出牌阶段你使用的第一张【杀】目标+1；攻击距离+2');
                                        }
                                        if (player.getDamagedHp() == 2) {
                                            list.push('满月 <span class=firetext>弦月</span> <span class=thundertext>新月</span></br>·你使用【杀】的次数+X（X=本阶段你使用杀的次数/2+1，向下取整）；出牌阶段限一次，你第一次使用【杀】造成的伤害+1</br>·出牌阶段使用的第一张【杀】结算两次');
                                        }
                                        if (player.getDamagedHp() == 1) {
                                            list.push('满月 弦月 <span class=firetext>新月</span></br>·你使用【杀】的次数+X（X=本阶段你使用杀的次数/2+1，向下取整）；出牌阶段限一次，你第一次使用【杀】造成的伤害+1');
                                        }
                                        if (player.getDamagedHp() == 0) {
                                            list.push('满月 弦月 新月');
                                        }
                                        return list;
                                    },
                                },
                                audio: 3,
                                trigger: { player: ['phaseBefore', 'changeHp'] },
                                direct: true,
                                popup: false,
                                mark: true,
                                init: function (player) {
                                    if (game.online) return;
                                    player.removeAdditionalSkill('yuexiangmrfz');
                                    var list = [];
                                    if (player.getDamagedHp() >= 3) {
                                        list.push('yuexiangmrfz_man');
                                    }
                                    if (player.getDamagedHp() >= 2) {
                                        list.push('yuexiangmrfz_xian');
                                    }
                                    if (player.getDamagedHp() >= 1) {
                                        list.push('yuexiangmrfz_xin');
                                    }
                                    if (list.length) {
                                        player.addAdditionalSkill('yuexiangmrfz', list);
                                    }
                                },
                                content: function () {
                                    player.removeAdditionalSkill('yuexiangmrfz');
                                    var list = [];
                                    if (player.getDamagedHp() >= 3) {
                                        list.push('yuexiangmrfz_man');
                                    }
                                    if (player.getDamagedHp() >= 2) {
                                        list.push('yuexiangmrfz_xian');
                                    }
                                    if (player.getDamagedHp() >= 1) {
                                        if (trigger.num != undefined && trigger.num < 0 && player.getDamagedHp() - trigger.num > 1) player.logSkill('yingkuimrfza');
                                        list.push('yuexiangmrfz_xin');
                                    }
                                    if (list.length) {
                                        player.addAdditionalSkill('yuexiangmrfz', list);
                                    }
                                },
                                ai: {
                                    maixie: true,
                                    effect: {
                                        target: function (card, player, target) {
                                            if (get.tag(card, 'damage')) {
                                                if (!target.hasFriend()) return;
                                                if (target.hp >= 4) return [0, 1];
                                            }
                                            if (get.tag(card, 'recover') && player.hp >= player.maxHp - 2) return [0, 0];
                                        }
                                    }
                                },
                                group: 'yuexiangmrfz_clear',
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: "phaseUseEnd" },
                                        content: function () {
                                            player.storage.yuexiangmrfz_man = false;
                                            if (player.hasMark('yuexiangmrfz_xin')) {
                                                player.removeMark('yuexiangmrfz_xin', player.countMark('yuexiangmrfz_xin'));
                                                player.unmarkSkill('yuexiangmrfz_xin');
                                            }
                                        },
                                    },
                                    man: {
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { player: 'shaAfter' },
                                        filter: function (event, player) {
                                            return !player.storage.yuexiangmrfz_man;
                                        },
                                        content: function () {
                                            player.storage.yuexiangmrfz_man = true;
                                        },
                                        mod: {
                                            selectTarget: function (card, player, range) {
                                                if (card.name == 'sha' && range[1] != -1 && !player.storage.yuexiangmrfz_man) range[1]++;
                                            },
                                            attackRange: function (player, num) {
                                                return num += 2;
                                            },
                                        },
                                    },
                                    xian: {
                                        trigger: { player: "useCardToTargeted", },
                                        charlotte: true,
                                        forced: true,
                                        popup: false,
                                        lastDo: true,
                                        usable: 1,
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && event.targets.length == event.parent.triggeredTargets4.length;
                                        },
                                        content: function () {
                                            trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                            trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                            player.logSkill('yuexiangmrfz');
                                        },
                                    },
                                    xin: {
                                        group: 'yuexiangmrfz_xin2',
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num += Math.floor(player.countMark('yuexiangmrfz_xin') / 2) + 1;
                                            }
                                        },
                                        intro: {
                                            content: function (event, player) {
                                                return "本回合使用【杀】的次数+" + (Math.floor(player.countMark('yuexiangmrfz_xin') / 2) + 1);
                                            },
                                        },
                                        direct: true,
                                        trigger: { player: 'shaAfter' },
                                        content: function () {
                                            player.addMark('yuexiangmrfz_xin');
                                            if (player.countMark('yuexiangmrfz_xin') % 2 == 0) player.logSkill('yuexiangmrfz');
                                        },
                                    },
                                    xin2: {
                                        direct: true,
                                        trigger: { source: 'damageBegin3' },
                                        usable: 1,
                                        filter: function (event) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                },
                            },
                            //温蒂
                            danpaomrfz: {
                                intro: {
                                    content: '【氮炮】剩余次数：#'
                                },
                                onremove: true,
                                init: function (player) {
                                    player.addMark('danpaomrfz', 2);
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                selectTarget: 1,
                                filter: function (event, player) {
                                    return player.countMark('danpaomrfz') > 0 && player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    if (player.countCards('h') > 0) player.chooseToDiscard('h', true, player.countCards('h'));
                                    else player.chooseToDiscard('he', true, player.countCards('he'));
                                    'step 1'
                                    target.damage();
                                    if (player.hasMark('shuipaomrfz')) {
                                        player.removeMark('shuipaomrfz');
                                        target.addSkill('danpaomrfz_plus');
                                    }
                                    else target.addSkill('danpaomrfz_nor');
                                    'step 2'
                                    player.removeMark('danpaomrfz');
                                },
                                group: 'danpaomrfz_damage',
                                subSkill: {
                                    plus: {
                                        intro: {
                                            content: '计算与其他角色距离+4；每使用一张牌受到一点伤害',
                                        },
                                        mark: true,
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance + 4;
                                            }
                                        },
                                        silent: true,
                                        forced: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeSkill('danpaomrfz_plus');
                                        },
                                    },
                                    nor: {
                                        intro: {
                                            content: '计算与其他角色距离+2；每使用两张牌受到一点伤害',
                                        },
                                        mark: true,
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance + 2;
                                            }
                                        },
                                        silent: true,
                                        forced: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeSkill('danpaomrfz_nor');
                                        },
                                    },
                                    damage: {
                                        forced: true,
                                        trigger: { global: 'useCard' },
                                        filter: function (event, player) {
                                            return event.player.hasSkill('danpaomrfz_nor') || event.player.hasSkill('danpaomrfz_plus');
                                        },
                                        content: function () {
                                            var target = trigger.player
                                            'step 0'
                                            if (target.hasSkill('danpaomrfz_nor')) {
                                                target.addMark('danpaomrfz_nor');
                                            }
                                            else {
                                                player.logSkill('danpaomrfz', target);
                                                target.damage('player');
                                                event.finish();
                                            }
                                            'step 1'
                                            if (target.countMark('danpaomrfz_nor') >= 2) {
                                                player.logSkill('danpaomrfz', target);
                                                target.damage('player');
                                                target.removeMark('danpaomrfz_nor', 2);
                                            }
                                            else event.finish();
                                        },
                                    },
                                },
                                ai: {
                                    order: 1,
                                    result: {
                                        player: function (event, player) {
                                            var cardh = player.getCards('h'), carde = player.getCards('e');
                                            if (cardh.length == 0 && carde.length && carde.length < 2) return 1;
                                            if (cardh.length > 3) return -1;
                                            for (var i = 0; i < cardh.length; i++) {
                                                if (get.value(cardh[i]) > 8) return 0.5;
                                            }
                                        },
                                        target: function (player, target) {
                                            return get.damageEffect(target, player);
                                        },
                                    },
                                },
                            },
                            shuipaomrfz: {
                                marktext: '蓄水',
                                intro: {
                                    name: '蓄水',
                                    content: '蓄水炮蓄水完毕</br>·【氮炮】中蓝色数字翻倍，红色数字-1</br>·【水炮①】中‘+1’改为‘+2’',
                                },
                                onremove: true,
                                init: function (player) {
                                    player.storage.shuipaomrfz = true;
                                },
                                audio: 2,
                                forced: true,
                                trigger: { source: 'damageBegin3' },
                                filter: function (event, player) {
                                    return player.getEquip(1) && !player.hasMark('shuipaomrfz') && event.getParent().name != 'danpaomrfz';
                                },
                                content: function () {
                                    player.addMark('shuipaomrfz');
                                },
                                group: 'shuipaomrfz_j',
                                subSkill: {
                                    j: {
                                        intro: {
                                            content: function (event, player) {
                                                if (player.hasSkill('shuipaomrfz_j2')) return '计算与其他角色的距离+2';
                                                return '计算与其他角色的距离+1';
                                            },
                                        },
                                        forced: true,
                                        charlotte: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return !event.player.hasMark('shuipaomrfz_j') && event.player != player && event.getParent().name != 'danpaomrfz';
                                        },
                                        content: function () {
                                            if (player.hasMark('shuipaomrfz')) trigger.player.addSkill('shuipaomrfz_j2');
                                            else trigger.player.addSkill('shuipaomrfz_j3')
                                            trigger.player.addMark('shuipaomrfz_j');
                                        },
                                    },
                                    j2: {
                                        charlotte: true,
                                        forced: true,
                                        silent: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeMark('shuipaomrfz_j');
                                            player.removeSkill('shuipaomrfz_j2');
                                        },
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance + 1;
                                            }
                                        },
                                    },
                                    j3: {
                                        charlotte: true,
                                        forced: true,
                                        silent: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeMark('shuipaomrfz_j');
                                            player.removeSkill('shuipaomrfz_j3');
                                        },
                                        mod: {
                                            globalFrom: function (from, to, distance) {
                                                return distance + 2;
                                            }
                                        },
                                    },
                                },
                            },
                            jiepimrfz: {
                                mod: {
                                    canBeDiscarded: function (card) {
                                        if (get.position(card) == 'e') return false;
                                    }
                                },
                                global: 'jiepimrfz2',
                            },
                            jiepimrfz2: {
                                mod: {
                                    canBeDiscarded: function (card) {
                                        if (get.position(card) == 'e' && _status.currentPhase.isAlive() && _status.currentPhase.hasSkill('jiepimrfz')) return false;
                                    }
                                },
                            },
                            //森蚺
                            juezhanmrfz: {
                                mod: {
                                    selectTarget: function (card, player, range) {
                                        if (lib.skill.juezhanmrfz.isJuezhan(card) && card.name != 'jiedao') range[1] = 1;
                                    },
                                },
                                isJuezhan: function (card) {
                                    var info = lib.card[card.name];
                                    if (!info || (info.type != 'trick' && info.type != 'delay')) return false;
                                    if (info.notarget) return false;
                                    if (info.selectTarget != undefined) {
                                        if (Array.isArray(info.selectTarget)) {
                                            if (info.selectTarget[0] < 0) return !info.toself;
                                            return info.selectTarget[0] != 1 || info.selectTarget[1] != 1;
                                        }
                                        else {
                                            if (info.selectTarget < 0) return !info.toself;
                                            return info.selectTarget != 1;
                                        }
                                    }
                                    return false;
                                },
                                marktext: '单挑',
                                intro: {
                                    name: '单挑',
                                    content: '和森蚺决一死战吧！'
                                },
                                audio: 2,
                                forced: true,
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && !event.player.hasMark('juezhanmrfz');
                                },
                                content: function () {
                                    trigger.player.addMark('juezhanmrfz');
                                    trigger.player.addSkill('juezhanmrfz_ta')
                                },
                                group: 'juezhanmrfz_pl',
                                subSkill: {
                                    ta: {
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (!target.hasSkill('juezhanmrfz') && target != player) {
                                                    return false;
                                                }
                                            },
                                            inRangeOf: function (from, to) {
                                                if (from.hasSkill('juezhanmrfz')) return true;
                                            },
                                        },
                                        charlotte: true,
                                        forced: true,
                                        silent: true,
                                        trigger: {
                                            global: ['phaseEnd', 'die'],
                                        },
                                        filter: function (event, player) {
                                            return event.player.hasSkill('juezhanmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('juezhanmrfz');
                                            player.removeSkill('juezhanmrfz_ta');
                                        },
                                    },
                                    pl: {
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if (!target.hasMark('juezhanmrfz') && target != player && game.hasPlayer(function (current) {
                                                    return current.countMark('juezhanmrfz') > 0;
                                                })) {
                                                    return false;
                                                }
                                            },
                                            inRangeOf: function (from, to) {
                                                if (from.hasMark('juezhanmrfz')) return true;
                                            },
                                        },
                                    },
                                },
                            },
                            shanxiemrfz: {
                                audio: 2,
                                trigger: { global: 'loseAfter' },
                                filter: function (event, player) {
                                    if (player.countMark('shanxiemrfz') > player.countCards('h')) return false;
                                    if (event.type != 'discard' || event.getlx === false) return false;
                                    var cards = event.cards.slice(0);
                                    var evt = event.getl(player);
                                    if (evt && evt.cards) cards.removeArray(evt.cards);
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].original != 'j' && get.type(cards[i], event.player) == 'equip' && get.position(cards[i], true) == 'd') {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (player.countCards('h') >= player.countMark('shanxiemrfz') && player.countMark('shanxiemrfz') > 0) {
                                        player.chooseToDiscard(get.prompt('shanxiemrfz'), '你可以弃置' + get.cnNumber(player.countMark('shanxiemrfz')) + '张牌获得此装备牌', false, player.countMark('shanxiemrfz')).set('ai', function (card) {
                                            return 6 - get.value(card);
                                        });
                                    }
                                    else if (player.countMark('shanxiemrfz') == 0) event.goto(2);
                                    "step 1"
                                    if (trigger.delay == false) game.delay();
                                    if (!result.cards) event.finish();
                                    "step 2"
                                    var cards = [], cards2 = trigger.cards.slice(0), evt = trigger.getl(player);
                                    if (evt && evt.cards) cards2.removeArray(evt.cards);
                                    for (var i = 0; i < cards2.length; i++) {
                                        if (cards2[i].original != 'j' && get.type(cards2[i], trigger.player) == 'equip' && get.position(cards2[i], true) == 'd') {
                                            cards.push(cards2[i]);
                                        }
                                    }
                                    event.num = cards.length;
                                    if (cards.length) {
                                        player.chooseButton(['擅械：请选择获得一张牌', cards], 1).set('ai', function (button) {
                                            return get.value(button.link, _status.event.player, 'raw');
                                        });
                                    }
                                    "step 3"
                                    if (result.bool) {
                                        event.num--;
                                        player.logSkill('shanxiemrfz');
                                        player.gain(result.links, 'gain2', 'log');
                                        player.addMark('shanxiemrfz', false);
                                        if (event.num > 0) event.goto(0);
                                    }
                                },
                                group: ['shanxiemrfz_sha', 'shanxiemrfz_usesha', 'shanxiemrfz_getjia', 'shanxiemrfz_remove'],
                                subSkill: {
                                    sha: {
                                        audio: 'shanxiemrfz',
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filterCard: function (card, player) {
                                            return get.type(card) == 'equip';
                                        },
                                        position: 'hes',
                                        viewAs: { name: 'sha' },
                                        prompt: '将一张装备牌当杀使用或打出',
                                        check: function (card) {
                                            var val = get.value(card);
                                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                            return 10 - val;
                                        },
                                        ai: {
                                            skillTagFilter: function (player, tag, arg) {
                                                if (!get.type(arg.card) == 'equip') return false;
                                            },
                                            respondSha: true,
                                        }
                                    },
                                    usesha: {
                                        trigger: { source: 'damageBegin3' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha' && event.player.hasMark('juezhanmrfz') && get.type(event.cards[0], 'equip') == 'equip';
                                        },
                                        forced: true,
                                        content: function () {
                                            trigger.num++;
                                            player.logSkill('shanxiemrfz');
                                        },
                                    },
                                    getjia: {
                                        frequent: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.changeHujia();
                                            player.logSkill('shanxiemrfz');
                                        },
                                    },
                                    remove: {
                                        silent: true,
                                        charlotte: true,
                                        forced: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.removeMark('shanxiemrfz', player.countMark('shanxiemrfz'));
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 2,
                                },
                            },
                            tieyimrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                mark: true,
                                limited: true,
                                selectCard: [0, 3],
                                filterCard: true,
                                position: 'h',
                                prompt: '弃置至多三张手牌，摸两倍于你弃置牌的牌',
                                delay: 0,
                                check: function (card) {
                                    return 6 - get.value(card) && get.name(card) != 'sha' && get.type(card) != 'equip';
                                },
                                init: function (player) {
                                    player.storage.tieyimrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.tieyimrfz;
                                },
                                content: function () {
                                    'step 0'
                                    player.node.avatar.setBackgroundImage('extension/明日方舟/image/orther/senrantieyumrfz.jpg');
                                    player.node.name.innerHTML = get.translation('senrantieyumrfz');
                                    player.draw(cards.length * 2);
                                    player.recover(2);
                                    player.turnOver();
                                    player.storage.tieyimrfz = true;
                                    'step 1'
                                    if(game.hasPlayer(current=>{
                                        return current!=player&&!current.hasMark('juezhanmrfz');
                                    })) player.chooseTarget(true, function (card, player, target) {
                                        return target != player && !target.hasMark('juezhanmrfz');
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    else event.goto(3);
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0]
                                        target.addSkill('juezhanmrfz_ta');
                                        target.addMark('juezhanmrfz');
                                    }
                                    'step 3'
                                    player.addTempSkill('tieyimrfz_use');
                                    player.addTempSkill('tieyimrfz_discard');
                                    player.addSkill('tieyimrfz_back');
                                },
                                intro: {
                                    content: 'limited',
                                },
                                subSkill: {
                                    back: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: ['dying', 'phaseEnd'] },
                                        content: function () {
                                            player.node.avatar.setBackgroundImage('extension/明日方舟/image/senranmrfz.jpg');
                                            player.node.name.innerHTML = get.translation('senranmrfz');
                                            player.removeSkill('tieyimrfz_back');
                                        },
                                    },
                                    discard: {
                                        forced: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.countCards('h') > 0;
                                        },
                                        content: function () {
                                            player.chooseToDiscard(true, player.countCards('h'));
                                        },
                                    },
                                    use: {
                                        charlotte: true,
                                        mod: {
                                            cardUsableTarget: function (card, player, target) {
                                                if (target.hasMark('juezhanmrfz')) return true;
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    order: 13,
                                    threaten: 3,
                                    expose: 0.9,
                                    result: {
                                        target: function (player, target) {
                                            var hs1 = player.countCards('h', function (card) {
                                                return card.name == 'sha';
                                            });
                                            var hs2 = player.countCards('he', function (card) {
                                                return get.type(card) == 'equip';
                                            });
                                            if (hs1 + (2 * hs2) > 4) return -1;
                                            return 0;
                                        },
                                    },
                                },
                            },
                            //ASH灰烬
                            wusumrfz: {
                                intro: {
                                    content: function (event, player) {
                                        if (player.countMark('wusumrfz') == 0) return 'Ash已化身监控室大爷'
                                        return 'FBI突击中</br>距离ASH白给还剩' + (5 - player.countMark('wusumrfz')) + '个阶段';
                                    },
                                },
                                mark: true,
                                audio: 2,
                                trigger: {
                                    player: ['phaseZhunbeiBefore', 'phaseJudgeBefore', 'phaseDrawBefore', 'phaseDiscardBefore', 'phaseJieshuBefore'],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.getParent('phase');
                                },
                                content: function () {
                                    trigger.cancel();
                                    var next = trigger.player.phaseUse();
                                    event.next.remove(next);
                                    trigger.getParent('phase').next.push(next);
                                    player.addMark('wusumrfz');
                                },
                                group: 'wusumrfz_draw',
                                subSkill: {
                                    draw: {
                                        forced: true,
                                        trigger: { player: 'phaseUseBegin' },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'delay') return 'zeroplayertarget';
                                        }
                                    }
                                },
                            },
                            wutoumrfz: {
                                audio: 2,
                                direct: true,
                                trigger: { player: "damageBegin3" },
                                filter: function (event, player) {
                                    return !player.storage.wutoumrfz;
                                },
                                content: function () {
                                    if (player.storage.wutoumrfz) {
                                        player.storage.wutoumrfz = true;
                                        trigger.cancel();
                                    }
                                },
                            },
                            baigeimrfz: {
                                audio: 2,
                                direct: true,
                                trigger: { player: "phaseUseEnd" },
                                filter: function (event, player) {
                                    return player.countMark('wusumrfz') >= 5;
                                },
                                content: function () {
                                    if (player.countMark('wusumrfz') >= 5) {
                                        var num = player.countCards('h') - player.getHandcardLimit()
                                        var chattext = [
                                            '窗下怎么会有个夹子？',
                                            '为什么会有人放站位edd！',
                                            '（Ash听到的敌方干员的声音）call a pizza！',
                                            '（狼人手枪的枪声）女鬼:"talk"',
                                            '(剃刀花的声音)',
                                            '(两个蛊声，三条枪线)',
                                            '(发射祖母榴弹->rush->火山盾炸裂的声音)',
                                            '“友军已将你击杀”'
                                        ].randomGet()
                                        if (num > 0) {
                                            player.logSkill('baigeimrfz');
                                            player.chooseToDiscard('h', num, true, '弃置' + get.cnNumber(num) + '张手牌');
                                        }
                                        player.chooseToDiscard('he', 2, true, '弃置两张牌');
                                        player.removeMark('wusumrfz', 5);
                                        player.chat(chattext);
                                    }
                                },
                            },
                            //异客
                            shazumrfz: {
                                marktext: '仇敌',
                                intro: {
                                    name: '仇敌',
                                    content: '沙卒盯上你了',
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target.countCards('he') > 0 && target != player;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseCard('he', true);
                                    'step 1'
                                    event.cardp = result.cards[0]
                                    if (target.countCards('e') > 0) target.chooseCard('e', true);
                                    else target.chooseCard('h', true);
                                    'step 2'
                                    if (!result.bool) event.finish();
                                    else {
                                        event.cardt = result.cards[0]
                                    }
                                    'step 3'
                                    player.swapHandcards(target, [event.cardp], [event.cardt]);
                                    'step 4'
                                    var numt = target.countCards('h')
                                    var nump = player.countCards('h')
                                    if (numt == nump) event.finish();
                                    if (numt > nump) player.draw();
                                    else if (nump > numt) target.draw();
                                },
                                group: 'shazumrfz_damage',
                                subSkill: {
                                    damage: {
                                        audio: 'shazumrfz',
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.source != undefined && !event.source.hasMark('shazumrfz') && event.source != player;
                                        },
                                        logTarget: 'source',
                                        content: function () {
                                            if (game.hasPlayer(function (current) {
                                                return current.hasMark('shazumrfz');
                                            })) {
                                                game.hasPlayer(function (current) {
                                                    return current.removeMark('shazumrfz');
                                                });
                                                trigger.source.addMark('shazumrfz');
                                            }
                                            else trigger.source.addMark('shazumrfz');
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.1,
                                    order: 8,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) > 0) return 1.5;
                                            return 0.5;
                                        },
                                        target: function (player, target) {
                                            if (get.attitude(player, target) < 2 && target.countCards('e') > 0 && target.countCards('h') > player.countCards('h')) return -1;
                                            return 0.5;
                                        },
                                    },
                                },
                            },
                            dianlianmrfz: {
                                audio: 2,
                                trigger: { source: 'damageSource' },
                                filter: function (event, player) {
                                    if (event.num <= 1) return false;
                                    return event.player != player && event.player.isAlive() && game.hasPlayer(function (current) {
                                        return current != event.player && get.distance(event.player, current) <= 1 && current != player;
                                    });
                                },
                                check: function (event, player) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && get.attitude(player, current) < 0 && current != event.player;
                                    })) return true;
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(true, '选择一名与' + get.translation(trigger.player) + '距离为1的角色并对其造成' + (trigger.num - 1) + '点伤害', function (card, player, target) {
                                        var damaged = trigger.player;
                                        return get.distance(damaged, target) <= 1 && target != damaged && target != player;
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    var num = trigger.num - 1
                                    if (result.bool) {
                                        var target = result.targets[0]
                                        target.damage('player', (trigger.num - 1));
                                    }
                                },
                                group: 'dianlianmrfz_damage',
                                subSkill: {
                                    damage: {
                                        audio: 'dianlianmrfz',
                                        trigger: { source: 'damageBegin3' },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 0;
                                        },
                                        filter: function (event, player) {
                                            return event.nature == 'thunder' && !player.storage.dianlianmrfz;
                                        },
                                        prompt: '是否令此伤害+1',
                                        content: function () {
                                            trigger.num++;
                                            player.storage.dianlianmrfz = true;
                                            player.addSkill('dianlianmrfz_remove');
                                        },
                                    },
                                    remove: {
                                        charlotte: true,
                                        direct: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.storage.dianlianmrfz = false;
                                            player.removeSkill('dianlianmrfz_remove');
                                        },
                                    },
                                },
                            },
                            leibaomrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                selectTarget: 1,
                                filterTarget: function (card, player, target) {
                                    if (target == player) return false;
                                    return !game.hasPlayer(function (current) {
                                        return current != player && current.hp > target.hp;
                                    }) || target.hasMark('shazumrfz');
                                },
                                filter: function (event, player) {
                                    return player.getCards('he', function (card) {
                                        return get.type(card) == 'equip';
                                    }).length >= 2 || player.countCards('h', 'shandian');
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', true, function (card, player) {
                                        if (player.getCards('he', function (card) {
                                            return get.type(card) == 'equip';
                                        }).length >= 2) return get.type(card) == 'equip' || card.name == 'shandian';
                                        return card.name == 'shandian';
                                    }).set('prompt', '请弃置一张【闪电】，或依次弃置两张装备牌。');
                                    'step 1'
                                    if (result.cards[0].name != 'shandian') {
                                        player.chooseToDiscard('he', true, function (card, player) {
                                            return get.type(card) == 'equip';
                                        }).set('prompt', '请弃置一张装备牌。');
                                        target.damage('player', 2);
                                    }
                                    else target.damage('player', 2, 'thunder');

                                },
                                ai: {
                                    threaten: 1.2,
                                    order: 13,
                                    result: {
                                        target: -1,
                                    },
                                },
                            },
                            //年
                            zhujimrfz: {
                                audio: 2,
                                trigger: {
                                    player: ['phaseDrawAfter', 'phaseJieshuAfter'],
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', get.prompt('zhujimrfz'), '【铸极】:你可以重铸一张牌').set('ai', function (card) {
                                        return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.cards) player.draw();
                                    if (result.cards && get.type(result.cards[0]) == 'equip') {
                                        player.draw();
                                        player.logSkill('zhujimrfz');
                                    }
                                    else if (result.cards) {
                                        player.logSkill('zhujimrfz');
                                    }
                                },
                            },
                            tongyinmrfz: {
                                audio: 2,
                                trigger: { player: "damageEnd" },
                                filter: function (event, player) {
                                    return event.source != undefined && event.source != player;
                                },
                                usable: 1,
                                logTarget: 'source',
                                check: function (event, player) {
                                    return get.attitude(player, event.source) < 2;
                                },
                                content: function () {
                                    'step 0'
                                    if (!trigger.source.hasSkill('fengyin')) {
                                        trigger.source.addTempSkill('fengyin');
                                    }
                                    'step 1'
                                    trigger.source.chooseToDiscard('he', true, '【铜印】:请选择弃置一张非基本或' + get.translation(Math.min(player.getDamagedHp() + 1, 1)) + '张基本牌');
                                    if (player.getDamagedHp() < 2) event.finish();
                                    'step 2'
                                    if (result.cards && get.type(result.cards[0]) == 'basic') {
                                        trigger.source.chooseToDiscard(true, '【铜印】:请选择弃置' + get.translation((player.getDamagedHp() - 1)) + '张基本牌', [1, (player.getDamagedHp() - 1)], function (card) {
                                            return get.type(card) == 'basic';
                                        }).set('ai', function (card) {
                                            return 6 - get.value(card);
                                        });
                                    }
                                },
                                ai: {
                                    threaten: 0.5,
                                    expose: 0.4,
                                },
                            },
                            tieyumrfz: {
                                intro: {
                                    content: '使用【杀】的次数+#；可令大于一的伤害改为一#次'
                                },
                                audio: 2,
                                trigger: { global: 'useCard' },
                                filter: function (event, player) {
                                    return player.countMark('tieyumrfz_clear2') < 2 && get.type(event.card) == 'equip';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) > 2;
                                },
                                content: function () {
                                    if (trigger.player.getDamagedHp() > 0) trigger.player.recover();
                                    else trigger.player.changeHujia();
                                    trigger.player.addSkill(['tieyumrfz_sha', 'tieyumrfz_damage', 'tieyumrfz_clear']);
                                    trigger.player.addMark('tieyumrfz');
                                    player.addMark('tieyumrfz_clear2', false);
                                },
                                group: 'tieyumrfz_clear2',
                                subSkill: {
                                    sha: {
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('tieyumrfz');
                                            }
                                        },
                                    },
                                    damage: {
                                        direct: true,
                                        trigger: { player: 'damageBegin3' },
                                        filter: function (event, player) {
                                            return event.num > 1 && player.countMark('tieyumrfz_damage') < player.countMark('tieyumrfz');
                                        },
                                        content: function () {
                                            trigger.num = 1;
                                            player.logSkill('tieyumrfz');
                                            player.addMark('tieyumrfz_damage');
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.removeSkill('tieyumrfz_damage');
                                            player.removeSkill('tieyumrfz_sha');
                                            player.removeSkill('tieyumrfz_clear');
                                            player.removeMark('tieyumrfz', player.countMark('tieyumrfz'));
                                            player.removeMark('tieyumrfz_damage', player.countMark('tieyumrfz_damage'));
                                        },
                                    },
                                    clear2: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.hasMark('tieyumrfz_clear2');
                                        },
                                        content: function () {
                                            player.removeMark('tieyumrfz_clear2', player.countMark('tieyumrfz_clear2'));
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.2,
                                    expose: 0.8,
                                },
                            },
                            //令
                            shixingmrfz: {
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                mark: true,
                                audio: 6,
                                trigger: { player: "phaseZhunbeiBegin" },
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                check: function (event, player) {
                                    if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                        return get.type2(magic) == 'equip';
                                    }).length && player.hasCard(function (card) {
                                        return get.type(card) == 'equip';
                                    }).length) return true;
                                    if (player.countCards('h') < 3 && player.getExpansions('shixingmrfz').length) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    //牌小于2且大于0则选择
                                    if (player.getExpansions('shixingmrfz').length <= 1 && player.getExpansions('shixingmrfz').length) player.chooseControl('弃置', '增加').set('prompt', '选择弃置所有置于武将牌上的牌或往武将牌上放置牌').set('ai', function (event, player) {
                                        var num = Math.random();
                                        if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == 'equip';
                                        }).length && player.countCards('h') < 4) return 1;
                                        if (num <= 0.6) return 0;
                                        return 1;
                                    });
                                    //牌为0则跳到第四步
                                    else if (player.getExpansions('shixingmrfz').length == 0) event.goto(4);
                                    'step 1'
                                    if (result.control == '弃置' || player.getExpansions('shixingmrfz').length > 1) {
                                        //弦惊判定
                                        event.num = 0;
                                        //清平弃置
                                        if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == 'basic';
                                        }).length) player.gain(get.cardPile(function (card) {
                                            return get.type(card) == 'basic';
                                        }), 'gain2');
                                        //弦惊选角色
                                        if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == 'equip';
                                        }).length) {
                                            event.num++;
                                            player.chooseTarget('【诗型】:弃置一名其他角色的一张牌', false, function (card, target, player) {
                                                return target != player;
                                            }).ai = function (target) {
                                                return -get.attitude(player, target);
                                            };
                                        }
                                        //逍遥弃置
                                        if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == 'trick';
                                        }).length) {
                                            player.draw();
                                            player.recover();
                                        }
                                    }
                                    if (result.control == '增加') event.goto(4);
                                    'step 2'
                                    //弦惊弃置
                                    if (result.bool && event.num == 1) {
                                        player.discardPlayerCard(result.targets[0], 'he', true);
                                    }
                                    'step 3'
                                    player.loseToDiscardpile(player.getExpansions('shixingmrfz'));
                                    'step 4'
                                    //放置牌到武将牌上
                                    if (!player.getExpansions('shixingmrfz').length || player.hasCard(function (card) {
                                        return player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == get.type2(card);
                                        }).length;
                                    }, 'he')) player.chooseCard('he', '依次将最多两张牌至于武将牌上', function (card, player) {
                                        if (player.getExpansions('shixingmrfz').length) return player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == get.type2(card);
                                        }).length;
                                        return true;
                                    });
                                    else event.finish();
                                    'step 5'
                                    if (result.cards && result.cards.length) {
                                        player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add('shixingmrfz');
                                    }
                                    if (result.cards && player.getExpansions('shixingmrfz').length < 1) event.goto(4);
                                },
                                group: ['shixingmrfz_basic', 'shixingmrfz_trick', 'shixingmrfz_equip'],
                                subSkill: {
                                    //清平
                                    basic: {
                                        audio: 'shixingmrfz',
                                        trigger: { player: "damageBegin" },
                                        filter: function (event, player) {
                                            return player.getExpansions('shixingmrfz').filter(function (magic) {
                                                return get.type2(magic) == 'basic';
                                            }).length;
                                        },
                                        content: function () {
                                            var cards = player.getExpansions('shixingmrfz');
                                            'step 0'
                                            if (cards.length) player.chooseButton(['选择移去一张“清平”', cards], true);
                                            else event.finish();
                                            'step 1'
                                            if (result.bool) player.loseToDiscardpile(result.links);
                                            trigger.num--;
                                            player.popup('清平');
                                            game.log(player, '移去了一张‘清平’');
                                            'step 2'
                                            event.card = get.cardPile(function (card) {
                                                return get.type(card) == 'basic';
                                            });
                                            if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                                return get.type2(magic) == 'basic';
                                            }).length < 1) player.gain(event.card, 'gain2');
                                        },
                                    },
                                    //弦惊
                                    equip: {
                                        audio: 'shixingmrfz',
                                        forced: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return player.getExpansions('shixingmrfz').filter(function (magic) {
                                                return get.type2(magic) == 'equip';
                                            }).length > 1;
                                        },
                                        content: function () {
                                            trigger.num += 2;
                                            player.popup('弦惊');
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                                    return get.type2(magic) == 'equip';
                                                }).length) return num + 2;
                                            },
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha' && player.getExpansions('shixingmrfz').filter(function (magic) {
                                                    return get.type2(magic) == 'equip';
                                                }).length > 1) return num + 2;
                                            },
                                        },
                                    },
                                    //逍遥
                                    trick: {
                                        audio: 'shixingmrfz',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return player.getExpansions('shixingmrfz').filter(function (magic) {
                                                return get.type2(magic) == 'trick';
                                            }).length > 0 && event.filterCard({ name: 'sha' }, player, event);
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                return ui.create.dialog('逍遥', player.getExpansions('shixingmrfz'), 'hidden')
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    filterCard: function () {
                                                        return false;
                                                    },
                                                    selectCard: -1,
                                                    filterTarget: function (card, player, target) {
                                                        return target != player && player.inRange(target);
                                                    },
                                                    card: links[0],
                                                    content: lib.skill.shixingmrfz_trick.contentx,
                                                    ai: {
                                                        order: 8,
                                                        respondSha: true,
                                                        result: {
                                                            target: -1,
                                                        },
                                                    },
                                                }
                                            },
                                            prompt: function () { return '请选择【杀】的目标' },
                                        },
                                        contentx: function () {
                                            var card = lib.skill.shixingmrfz_trick_backup.card;
                                            'step 0'
                                            player.addTempSkill('shixingmrfz_damage', 'shaEnd');
                                            player.addTempSkill('shixingmrfz_sha', 'useCardAfter');
                                            'step 1'
                                            player.useCard({ name: 'sha', isCard: true }, true, target);
                                            game.log(player, '视为对', target, '使用【杀】');
                                            player.logSkill('shixingmrfz');
                                            'step 2'
                                            if (!player.storage.shixingmrfz_damage) {
                                                player.loseToDiscardpile(card);
                                            }
                                            else {
                                                player.gain(card, 'gain2');
                                                player.storage.shixingmrfz_damage = false;
                                            }
                                            'step 3'
                                            if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                                return get.type2(magic) == 'trick';
                                            }).length < 1) {
                                                player.recover();
                                                player.draw();
                                            }
                                        },
                                    },
                                    damage: {
                                        direct: true,
                                        trigger: { player: 'shaMiss' },
                                        silent: true,
                                        charlotte: true,
                                        content: function () {
                                            player.storage.shixingmrfz_damage = true;
                                        },
                                    },
                                    sha: {
                                        direct: true,
                                        silent: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            if (trigger.addCount !== false) {
                                                trigger.addCount = false;
                                                player.getStat().card.sha--;
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    threaten: function (player) {
                                        if (player.getExpansions('shixingmrfz').filter(function (magic) {
                                            return get.type2(magic) == 'basic';
                                        }).length > 0) return 0.8;
                                        return 1.2;
                                    },
                                },
                            },
                            zuimengmrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '醉梦',
                                animationColor: 'fire',
                                init: function (player) {
                                    player.storage.zuimengmrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.zuimengmrfz && player.countCards('h', 'jiu');
                                },
                                content: function () {
                                    'step 0'
                                    player.storage.zuimengmrfz = true;
                                    player.chooseToUse(function (card, player, event) {
                                        return get.name(card) == 'jiu';
                                    }, '使用一张【酒】');
                                    event.num = 0;
                                    'step 1'
                                    if (event.num < game.countPlayer()) {
                                        event.num++;
                                        player.chooseTarget(true, '【醉梦' + event.num + '/' + game.countPlayer() + '】：选择一名角色，获得其区域内一张牌', function (card, player, target) {
                                            return target.countMark('zuimengmrfz_remove') < 2;
                                        }).set('ai', function (target) {
                                            var player = _status.event.player;
                                            var att = get.attitude(player, target);
                                            if (att < 0) {
                                                att = -Math.sqrt(-att);
                                            }
                                            else {
                                                att = Math.sqrt(att);
                                            }
                                            return att * lib.card.guohe.ai.result.target(player, target);
                                        });
                                    }
                                    else {
                                        if (player.countCards('h') < game.countPlayer()) player.drawTo(game.countPlayer());
                                        event.finish();
                                        event.getParent('phaseUse').skipped = true;
                                        player.addTempSkill('zuimengmrfz_skip');
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0]
                                        if (!target.hasSkill('zuimengmrfz_remove')) target.addTempSkill('zuimengmrfz_remove');
                                        player.gainPlayerCard('hej', target, true);
                                        target.addMark('zuimengmrfz_remove', false);
                                        event.goto(1);
                                    }
                                },
                                subSkill: {
                                    remove: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseEnd' },
                                        content: function () {
                                            player.removeMark('zuimengmrfz_remove', player.countMark('zuimengmrfz_remove'));
                                        },
                                    },
                                    skip: {
                                        direct: true,
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: 'phaseDiscardBefore' },
                                        content: function () {
                                            trigger.cancel();
                                        },
                                    },
                                },
                                ai: {
                                    order: 6,
                                    threaten: 0.6,
                                    expose: 0.6,
                                    result: {
                                        player: 1,
                                    },
                                },
                            },
                            haojiumrfz: {
                                audio: 2,
                                trigger: { player: "useCard" },
                                forced: true,
                                filter: function (event, player) {
                                    return event.card.name == 'jiu' && player.getDamagedHp() > 0;
                                },
                                content: function () {
                                    player.recover();
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'jiu') return Infinity;
                                    },
                                },
                            },
                            //风笛
                            juntongmrfz: {
                                audio: 4,
                                forced: true,
                                trigger: { global: 'roundStart' },
                                content: function () {
                                    player.draw(3);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num - 1;
                                    },
                                },
                                group: ['juntongmrfz_ban', 'juntongmrfz_sha'],
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: ['phaseJudgeBefore', 'phaseDrawBefore'] },
                                        content: function () {
                                            trigger.cancel();
                                        },
                                    },
                                    sha: {
                                        audio: 'juntongmrfz',
                                        trigger: { player: 'useCard2' },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            'step 0'
                                            player.judge(function (card) {
                                                var suit = get.suit(card);
                                                if (suit == 'heart' || suit == 'diamond' || suit == 'spade') return -4;
                                                return 0;
                                            }).judge2 = function (result) {
                                                return result.bool == false ? true : false;
                                            };
                                            'step 1'
                                            if (result.suit == 'diamond') {
                                                if (trigger.addCount !== false) {
                                                    trigger.addCount = false;
                                                    player.getStat().card.sha--;
                                                }
                                                event.finish();
                                            }
                                            if (result.suit == 'heart') {
                                                if (game.hasPlayer(function (current) {
                                                    return !trigger.targets.contains(current) && player.canUse(trigger.card, current);
                                                })) player.chooseTarget(get.prompt('juntongmrfz'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {
                                                    return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target);
                                                }).set('sourcex', trigger.targets).set('ai', function (target) {
                                                    var player = _status.event.player;
                                                    return get.effect(target, _status.event.card, player, player);
                                                }).set('card', trigger.card);
                                                else event.finish();
                                            }
                                            if (result.suit == 'spade') {
                                                player.draw();
                                                event.finish();
                                            }
                                            if (result.suit == 'club') event.finish();
                                            'step 2'
                                            trigger.targets.push(result.targets[0]);
                                            player.logSkill('juntongmrfz', result.targets[0]);
                                        },
                                    },
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.type(card) == 'delay') return 'zeroplayertarget';
                                        }
                                    }
                                },
                            },
                            pochengmrfz: {
                                audio: 2,
                                trigger: { player: 'useCardToTargeted' },
                                onremove: true,
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                init: function (player) {
                                    player.storage.pochengmrfz = false;
                                },
                                filter: function (event, player) {
                                    return event.card.name == 'sha' && game.roundNumber != 1 && !player.storage.pochengmrfz;
                                },
                                content: function () {
                                    'step 0'
                                    player.storage.pochengmrfz = true;
                                    event.num = 2
                                    'step 1'
                                    event.num--;
                                    trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                    trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                    if (event.num > 0) event.goto(1);
                                    'step 2'
                                    event.getParent('phaseUse').skipped = true;
                                    player.addTempSkill('pochengmrfz_one');
                                },
                                group: 'pochengmrfz_clear',
                                subSkill: {
                                    clear: {
                                        charlotte: true,
                                        silent: true,
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.storage.pochengmrfz;
                                        },
                                        content: function () {
                                            player.addMark('pochengmrfz_clear', false);
                                            if (player.countMark('pochengmrfz_clear') >= 3) {
                                                player.storage.pochengmrfz = false;
                                                player.removeMark('pochengmrfz_clear', player.countMark('pochengmrfz_clear'));
                                            }
                                        },
                                    },
                                    one: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + 1;
                                            },
                                        },
                                    },
                                },
                            },
                            //琴柳
                            junqimrfz: {
                                audio: 4,
                                group: ['junqimrfz_reget', 'junqimrfz_get'],
                                subSkill: {
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'die' },
                                        filter: function (event, player) {
                                            return event.player.hasSkill('junqimrfz');
                                        },
                                        content: function () {
                                            var isSkillandRemove = function (str, who) {
                                                if (who.hasSkill(str)) who.removeSkill(str);
                                            };
                                            isSkillandRemove('junqimrfz_zhiyu', player);
                                            isSkillandRemove('junqimrfz_zhiyuan', player);
                                            isSkillandRemove('junqimrfz_jingong', player);
                                            isSkillandRemove('butuimrfz', player);
                                        },
                                    },
                                    zhiyu: {
                                        mark: true,
                                        marktext: '军旗',
                                        intro: {
                                            name: '军旗（治愈之旗）',
                                            content: '出牌阶段开始时，其可弃置至多三张牌，然后其选择等量角色，然后其回复一点体力并令其中手牌数最少的角色摸一张牌',
                                        },
                                        trigger: { player: 'phaseUseBegin' },
                                        filter: function (event, player) {
                                            return player.countCards('h') > 0;
                                        },
                                        prompt: '是否发动【军旗(治愈之旗)】',
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard('he', true, [1, 3], '请弃置至多三张牌').set('ai', function (card) {
                                                return 6 - get.value(card);
                                            });
                                            'step 1'
                                            if (result.cards) player.chooseTarget(true, [1, result.cards.length], '请选择至多' + result.cards.length + '名角色').set('ai', function (target) {
                                                return get.attitude(_status.event.player, target);
                                            });
                                            'step 2'
                                            if (result.bool) {
                                                var min = player.countCards('h'), min_player = player;
                                                player.logSkill('junqimrfz');
                                                for (i = 0; i < result.targets.length; i++) result.targets[i].recover();
                                                for (var i of result.targets) {
                                                    if (i == player) continue;
                                                    var num = i.countCards('h');
                                                    if (num < min) {
                                                        min = num;
                                                        min_player = i;
                                                    }
                                                    else if (num == min) min_player = false;
                                                }
                                                if (min_player) min_player.draw();
                                                else game.delayx();
                                            }
                                        },
                                        group: 'junqimrfz_rem',
                                        ai: {
                                            expose: 0.6,
                                        },
                                    },
                                    jingong: {
                                        mark: true,
                                        marktext: '军旗',
                                        intro: {
                                            name: '军旗（进攻之旗）',
                                            content: '当与你距离不大于2的其他角色受到伤害时，你可以弃置一张牌，令此伤害+1；使用【杀】的次数+1',
                                        },
                                        trigger: { global: 'damageBegin3' },
                                        filter: function (event, player) {
                                            return get.distance(player, event.player) <= 2 && event.player.isIn() && event.player != player && player.countCards('he') > 0;
                                        },
                                        prompt: function (event, player) {
                                            return '【军旗(进攻之旗)】:是否弃置一张牌，令此伤害对' + get.translation(event.player) + '+1？';
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 0;
                                        },
                                        content: function () {
                                            player.chooseToDiscard('he', true, '弃置一张牌');
                                            trigger.num++;
                                            player.logSkill('junqimrfz', trigger.player);
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            }
                                        },
                                        group: 'junqimrfz_rem',
                                        ai: {
                                            expose: 0.8,
                                        },
                                    },
                                    zhiyuan: {
                                        mark: true,
                                        marktext: '军旗',
                                        intro: {
                                            name: '军旗（支援之旗）',
                                            content: '与其距离不大于1的角色受到伤害后，其可摸一张牌，然后交给受伤角色一张牌；摸牌阶段摸牌数+1',
                                        },
                                        trigger: { global: 'damageEnd' },
                                        filter: function (event, player) {
                                            return get.distance(player, event.player) <= 1 && event.player.isIn();
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) > 0;
                                        },
                                        prompt: function (event, player) {
                                            if (event.player == player) return '【军旗(支援之旗)】:你是否摸一张牌？';
                                            return '【军旗(支援之旗)】:是否摸一张牌并交给' + get.translation(event.player) + '一张牌？';
                                        },
                                        content: function () {
                                            'step 0'
                                            player.draw();
                                            player.logSkill('junqimrfz', trigger.player);
                                            if (trigger.player != player) {
                                                player.chooseCard(true, 'he', '交给' + get.translation(trigger.player) + '一张牌').set('ai', function (card) {
                                                    if (get.position(card) == 'e') return -1;
                                                    if (card.name == 'shan' || card.name == 'tao' || card.name == 'jiu') return 1;
                                                    return 0;
                                                });
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 1'
                                            player.give(result.cards, trigger.player, 'give');
                                        },
                                        group: ['junqimrfz_draw', 'junqimrfz_rem'],
                                        ai: {
                                            expose: 0.4,
                                        },
                                    },
                                    draw: {
                                        audio: 'junqimrfz',
                                        forced: true,
                                        trigger: { player: "phaseDrawBegin2" },
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                    get: {
                                        audio: 'junqimrfz',
                                        forced: true,
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        content: function () {
                                            var str1 = '【支援之旗】:与其距离不大于1的角色受到伤害时，其可摸一张牌，然后交给受伤角色一张牌；摸牌阶段摸牌数+1'
                                            var str2 = '【治愈之旗】:出牌阶段开始时，其可弃置至多三张牌，然后其选择等量角色，然后其回复一点体力并令其中手牌数最少的角色摸至4张'
                                            var str3 = '【进攻之旗】:当与你距离不大于2的角色受到伤害后，你可以弃置一张牌，令此伤害+1；使用【杀】的次数+1'
                                            'step 0'
                                            player.chooseControl('支援之旗', '治愈之旗', '进攻之旗').set('choiceList', [str1, str2, str3,]).set('ai', function (event, player) {
                                                return [0, 2].randomGet();
                                            });
                                            'step 1'
                                            var list = ['junqimrfz_zhiyuan', 'junqimrfz_zhiyu', 'junqimrfz_jingong']
                                            for (i = 0; i < 3; i++) {
                                                if (result.index == i) player.addSkill(list[i]);
                                            }
                                            player.removeSkill('junqimrfz_get');
                                        },
                                    },
                                    reget: {
                                        forced: true,
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        content: function () {
                                            var list = ['junqimrfz_zhiyuan', 'junqimrfz_zhiyu', 'junqimrfz_jingong']
                                            'step 0'
                                            player.logSkill('junqimrfz');
                                            if (game.hasPlayer(function (current) {
                                                return current.hasSkill('junqimrfz_zhiyuan') || current.hasSkill('junqimrfz_jingong') || current.hasSkill('junqimrfz_zhiyu');
                                            })) {
                                                game.countPlayer(function (current) {
                                                    for (i = 0; i < 3; i++) {
                                                        if (current.hasSkill(list[i]) && current != player) {
                                                            current.removeSkill(list[i]);
                                                            player.addSkill(list[i]);
                                                        }
                                                    }
                                                });
                                            }

                                            'step 1'
                                            player.chooseControl('确定', 'cancel2').set('prompt', get.prompt('junqimrfz')).set('prompt2', '是否更换‘军旗’类型');
                                            'step 2'
                                            if (result.control == 'cancel2') event.finish();
                                            else {
                                                for (i = 0; i < 3; i++) {
                                                    if (player.hasSkill(list[i])) player.removeSkill(list[i]);
                                                }
                                            }
                                            'step 3'
                                            var str1 = '【支援之旗】:与其距离不大于1的角色受到伤害时，其可摸一张牌，然后交给受伤角色一张牌；摸牌阶段摸牌数+1'
                                            var str2 = '【治愈之旗】:出牌阶段开始时，其可弃置至多三张牌，然后其选择等量角色，然后其回复一点体力并令其中手牌数最少的角色摸至4张'
                                            var str3 = '【进攻之旗】:当与你距离不大于2的角色受到伤害后，你可以弃置一张牌，令此伤害+1；使用【杀】的次数+1'
                                            player.chooseControl('支援之旗', '治愈之旗', '进攻之旗').set('choiceList', [str1, str2, str3,]).set('ai', function (event, player) {
                                                var num = Math.random()
                                                if (player.hp <= 1) return 1;
                                                if (num > 0.6) return 2;
                                                if (num < 0.3) return 0;
                                                else return [0, 1, 2].randomGet();
                                            });
                                            'step 4'
                                            for (i = 0; i < 3; i++) {
                                                if (result.index == i) player.addSkill(list[i]);
                                            }
                                        },
                                    },
                                },
                            },
                            zhiqimrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                selectTarget: 1,
                                filter: function (event, player) {
                                    return player.hasSkill('junqimrfz_zhiyuan') || player.hasSkill('junqimrfz_jingong') || player.hasSkill('junqimrfz_zhiyu');
                                },
                                content: function () {
                                    var list = ['junqimrfz_zhiyuan', 'junqimrfz_zhiyu', 'junqimrfz_jingong']
                                    for (i = 0; i < 3; i++) {
                                        if (player.hasSkill(list[i])) {
                                            target.addSkill(list[i]);
                                            player.removeSkill(list[i]);
                                        }
                                    }
                                },
                                group: 'junqimrfz_rem',
                                ai: {
                                    order: 1,
                                    expose: 0.8,
                                    threaten: 1.1,
                                    result: {
                                        target: function (player, target) {
                                            if (get.attitude(player, target) < 0) return 0;
                                            if (get.attitude(player, target) > 0) return 1;
                                        },
                                    },
                                },
                            },
                            butuimrfz: {
                                audio: 2,
                                global: 'butuimrfz_choose',
                                subSkill: {
                                    choose: {
                                        direct: true,
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return player.hasSkill('junqimrfz_zhiyuan') || player.hasSkill('junqimrfz_jingong') || player.hasSkill('junqimrfz_zhiyu');
                                        },
                                        content: function () {
                                            'step 0'
                                            var list = ['摸一张牌']
                                            if (player.countCards('he') > 0) list.add('弃两张牌并跳过判定阶段');
                                            player.chooseControl(list, 'cancel2').set('prompt2', get.prompt('butuimrfz')).set('prompt', '请选择一项').set('ai', function (event, player) {
                                                if (player.countCards('j') > 0 && player.countCards('he') > 0) return 1;
                                                else return 0;
                                            });
                                            'step 1'
                                            if (result.control != 'cancel2') {
                                                if (result.control == '摸一张牌') {
                                                    player.draw();
                                                    player.logSkill('butuimrfz');
                                                }
                                                else if (player.countCards('he') > 0) {
                                                    player.chooseToDiscard('he', true, '弃置两张牌', 2);
                                                    player.addTempSkill('butuimrfz_skip', 'phaseEnd');
                                                    player.logSkill('butuimrfz');
                                                }
                                            }
                                        },
                                    },
                                    skip: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseJudgeBefore' },
                                        content: function () {
                                            trigger.cancel();
                                        },
                                    },
                                },
                            },
                            //老鲤
                            linhuamrfz: {
                                audio: 4,
                                forced: true,
                                trigger: { source: 'damageBegin1' },
                                filter: function (event, player) {
                                    return event.source != undefined;
                                },
                                content: function () {
                                    trigger.cancel();
                                    trigger.player.damage('nosource', trigger.num);
                                },
                                group: ['linhuamrfz_anti', 'linhuamrfz_skip'],
                                subSkill: {
                                    anti: {
                                        direct: true,
                                        trigger: { player: 'damageBegin3' },
                                        filter: function (event, player) {
                                            if (!event.nature) return false;
                                            return player.countCards('he') >= 2 && event.source != undefined;
                                        },
                                        logTarget: 'source',
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard('he', false, 2, '你可以弃置两张牌将此伤害转移给' + get.translation(trigger.source));
                                            'step 1'
                                            if (result.cards) {
                                                trigger.cancel();
                                                trigger.source.damage(trigger.num, trigger.nature);
                                                player.logSkill('linhuamrfz', trigger.source);
                                            }
                                        },
                                    },
                                    skip: {
                                        direct: true,
                                        trigger: { player: 'phaseJudgeBegin' },
                                        filter: function (event, player) {
                                            return player.countCards('h') >= 2 && player.countCards('j');
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard('h', false, 2, '你可以弃置两张牌并移动一张你判定区内的一张牌').set('ai', function (card) {
                                                return 6 - get.value(card);
                                            });
                                            'step 1'
                                            if (result.cards) {
                                                var card = player.getCards('j');
                                                player.chooseButton(['将你判定区的一张牌移动至一名角色的判定区', card]);
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.cards) {
                                                event.card = result.links[0];
                                                player.chooseTarget(true, '选择' + get.translation(event.card) + '的移动目标', function (card, player, target) {
                                                    return target != player && target.canAddJudge(event.card);
                                                });
                                            }
                                            else event.finish();
                                            'step 3'
                                            if (result.bool) {
                                                var target = result.targets[0]
                                                player.$give(event.card, target);
                                                game.delayx();
                                                player.logSkill('linhuamrfz');
                                                var name = card.viewAs || card.name;
                                                if (event.card.name != name) {
                                                    target.addJudge(name, event.card);
                                                }
                                                else {
                                                    target.addJudge(card);
                                                }
                                            }
                                        },
                                    },
                                },
                            },
                            mingshimrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 2,
                                filterTarget: function (card, player, target) {
                                    return target != player && !target.hasSkill('mingshimrfz2');
                                },
                                selectTarget: 1,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseCard('he', '请选择一张牌交给' + get.translation(target), true).set('ai', function (card) {
                                        return 6 - get.value(card);
                                    });
                                    player.addTempSkill('mingshimrfz2');
                                    'step 1'
                                    if (result.cards) {
                                        player.give(result.cards, target);
                                        target.addTempSkill('mingshimrfz2')
                                        player.line(target);
                                    }
                                    'step 2'
                                    player.viewHandcards(target);
                                    game.log(player, '观看了', target, '的手牌');
                                    if (target.countCards('h') > 3) {
                                        player.discardPlayerCard(target, 'h', [1, 3]).set('forceAuto', true);
                                        target.addSkill('mingshimrfz_draw1');
                                        event.finish();
                                    }
                                    else {
                                        player.chooseControl('令其摸一张', '令其摸两张').set('prompt', '【明事】:请选择一项').set('prompt2', '你可以令其摸[2/1]张牌，然后于下一个准备阶段弃置[1/2]张牌').set('ai', function () {
                                            var player = _status.event.player;
                                            var target = _status.event.target;
                                            var att = get.attitude(target, player);
                                            if (att > 0) return 1;
                                            return 0;
                                        });
                                    }
                                    'step 3'
                                    if (result.index == 0) {
                                        target.draw();
                                        target.addSkill('mingshimrfz_dis2');
                                    }
                                    else {
                                        target.draw(2);
                                        target.addSkill('mingshimrfz_dis1');
                                    }
                                },
                                group: 'mingshimrfz_ed',
                                subSkill: {
                                    ed: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseJieshuBegin' },
                                        filter: function (event, player) {
                                            return player.hasSkill('mingshimrfz2');
                                        },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    draw1: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: "phaseJieshuBegin" },
                                        content: function () {
                                            player.draw();
                                            player.removeSkill('mingshimrfz_draw1');
                                        },
                                    },
                                    dis1: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            return player.countCards('he') > 0;
                                        },
                                        content: function () {
                                            player.chooseToDiscard('he', true, '【明事】:弃置一张牌');
                                            player.removeSkill('mingshimrfz_dis1');
                                        },
                                    },
                                    dis2: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            return player.countCards('he') > 0;
                                        },
                                        content: function () {
                                            player.chooseToDiscard('he', true, 2, '【明事】:弃置两张牌');
                                            player.removeSkill('mingshimrfz_dis2');
                                        },
                                    },
                                },
                                ai: {
                                    order: 1,
                                    expose: 0.2,
                                    threaten: 1.2,
                                    result: {
                                        target: function (player, target) {
                                            var att = get.attitude(player, target)
                                            if (att > 0 && target.countCards('h') < 3) return 1;
                                            if (att < 0) return -1;
                                        },
                                    },
                                },
                            },
                            mingshimrfz2: {},
                            jixiongmrfz: {
                                group: 'jixiongmrfz2',
                                audio: 2,
                                forced: true,
                                trigger: { global: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return event.player.hasMark('jixiongxmrfz');
                                },
                                content: function () {
                                    'step 0'
                                    trigger.player.judge(function (card) {
                                        var color = get.color(card);
                                        if (color == 'black') return 4;
                                        return -4;
                                    });
                                    trigger.player.removeMark('jixiongxmrfz');
                                    'step 1'
                                    if (result.color == 'black') {
                                        trigger.player.chooseToDiscard('he', true, '【吉凶】:请弃置一张牌');
                                        trigger.player.loseHp();
                                    }
                                    if (trigger.player.hasMark('jixiongxmrfz')) event.goto(0);
                                    else event.finish();
                                    'step 2'
                                    if (result.cards) player.gain(result.cards, 'gain2');
                                    if (trigger.player.hasMark('jixiongxmrfz')) event.goto(0);
                                },
                                ai: {
                                    expose: 0.9,
                                },
                            },
                            jixiongmrfz2: {
                                trigger: { global: 'gainEnd' },
                                filter: function (event, player) {
                                    return event.source && event.source.hasSkill('jixiongmrfz');
                                },
                                logTarget: 'source',
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseControl('确定', '取消').set('prompt', '是否发动【吉凶】？').set('ai', function (player, target) {
                                        var att = get.attitude(source, player)
                                        if (att > 0) return 1;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.control == '确定') {
                                        trigger.player.addMark('jixiongxmrfz');
                                        player.logSkill('jixiongmrfz');
                                    }
                                },
                            },
                            jixiongxmrfz: {
                                charlotte: true,
                                intro: {
                                    content: '准备阶段，你进行一次判定，若判定结果为黑色，则你须弃置一张牌并流失一点体力，然后弃置‘符纸’标记',
                                },
                            },
                            //阿
                            guaijiemrfz: {
                                audio: 2,
                                forced: true,
                                firstDo: true,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) {
                                    return !player.storage.guaijiemrfz;
                                },
                                content: function () {
                                    player.loseHp();
                                },
                                group: 'guaijiemrfz_damage',
                                subSkill: {
                                    damage: {
                                        audio: 'guaijiemrfz',
                                        forced: true,
                                        trigger: { source: "damageEnd" },
                                        filter: function (event, player) {
                                            return !player.storage.guaijiemrfz;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.storage.guaijiemrfz = true;
                                            player.addSkill('guaijiemrfz_remove');
                                            player.chooseTarget(true, '弃置一名角色区域内的一张牌', function (card, player, target) {
                                                return target.countCards('hej') > 0;
                                            }).set('ai', function (target) {
                                                var player = _status.event.player;
                                                var att = get.attitude(player, target);
                                                if (att < 0) {
                                                    att = -Math.sqrt(-att);
                                                }
                                                else {
                                                    att = Math.sqrt(att);
                                                }
                                                return att * lib.card.guohe.ai.result.target(player, target);
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0]
                                                player.discardPlayerCard(target, 'hej', true);
                                            }
                                        },
                                    },
                                    remove: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.storage.guaijiemrfz = false;
                                            player.removeSkill('guaijiemrfz_remove');
                                        },
                                    },
                                },
                            },
                            qizhenmrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                selectTarget: 1,
                                usable: 1,
                                content: function () {
                                    'step 0'
                                    if (target.countCards('he') == 0) {
                                        event.goto(2)
                                        target.damage();
                                    }
                                    else {
                                        var str1 = '令' + get.translation(target) + '弃置两张牌'
                                        var str2 = '对' + get.translation(target) + '造成一点伤害'
                                        player.chooseControl(str1, str2).set('prompt', '【奇针】:请选择一项').set('ai', function (target) {
                                            if (target.hp > 2 && target.countCards('he') < 4) return 1;
                                            return 0;
                                        });
                                    }
                                    'step 1'
                                    if (result.index == 0) target.chooseToDiscard('he', true, 2, '【奇针】:请弃置两张牌');
                                    else target.damage();
                                    'step 2'
                                    target.addTempSkill('qizhenmrfz_effect', { player: 'phaseEnd' });
                                    target.changeHujia();
                                },
                                subSkill: {
                                    effect: {
                                        audio: 'qizhenmrfz',
                                        trigger: { player: 'useCard' },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' || event.card.name == 'juedou';
                                        },
                                        content: function () {
                                            trigger.baseDamage++;
                                        },
                                    },
                                },
                            },
                            guaiyaomrfz: {
                                audio: 4,
                                forced: true,
                                trigger: { source: 'damageBegin3' },
                                filter: function (event, player) {
                                    return event.player != player;
                                },
                                content: function () {
                                    var target = trigger.player
                                    var num = Math.random()
                                    if (num < 0.1) {
                                        target.addTempSkill('guaiyaomrfz_skip', { player: 'phaseEnd' });
                                        player.popup('怪药·跳过');
                                        game.log(player, '的【怪药】结果为<span class=thundertext>【怪药·跳过】</span>');
                                    }
                                    if (num >= 0.1 && num < 0.325) {
                                        player.getDamagedHp() > 0 ? player.recover(2) : player.changeHujia();
                                        player.popup('怪药·回复');
                                        game.log(player, '的【怪药】结果为<span class=thundertext>【怪药·回复】</span>');
                                    }
                                    if (num >= 0.325 && num < 0.55) {
                                        target.chooseToDiscard('he', true, '【怪药】:请弃置一张牌');
                                        player.popup('怪药·弃牌');
                                        game.log(player, '的【怪药】结果为<span class=thundertext>【怪药·弃牌】</span>');
                                    }
                                    if (num >= 0.55 && num < 0.775) {
                                        target.addTempSkill('guaiyaomrfz_decrease', { player: 'phaseDrawAfter' });
                                        player.popup('怪药·摸牌减少');
                                        game.log(player, '的【怪药】结果为<span class=thundertext>【怪药·摸牌减少】</span>');
                                    }
                                    if (num >= 0.775) {
                                        player.draw();
                                        player.popup('怪药·摸牌');
                                        game.log(player, '的【怪药】结果为<span class=thundertext>【怪药·摸牌】</span>');
                                    }
                                },
                                subSkill: {
                                    skip: {
                                        mark: true,
                                        intro: {
                                            content: '跳过下个出牌和弃牌阶段',
                                        },
                                        audio: 'guaiyaomrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: ['phaseUseBegin', 'phaseDiscardBefore'] },
                                        content: function () {
                                            trigger.cancel();
                                        },
                                    },
                                    decrease: {
                                        mark: true,
                                        intro: {
                                            content: '下个摸牌阶段摸牌数-1',
                                        },
                                        audio: 'guaiyaomrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        content: function () {
                                            trigger.num--;
                                        },
                                    },
                                },
                            },
                            //黑
                            heishimrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { source: 'damageBegin1' },
                                filter: function (event, player) {
                                    return (get.distance(player, event.player) <= player.hasSkill('junumrfz_effect') ? 3 : 1 || event.player.getEquip(2)) && event.card.name == 'sha';
                                },
                                content: function () {
                                    if (get.distance(player, trigger.player) <= player.hasSkill('junumrfz_effect') ? 3 : 1) trigger.num++;
                                    if (trigger.player.getEquip(2)) trigger.num++;
                                },
                                group: 'heishimrfz_wushi',
                                mod: {
                                    playerEnabled: function (card, player, target) {
                                        if (!player.hasSkill('junumrfz_effect') && get.distance(player, target) > 2 && card.name == 'sha') return false;
                                    },
                                },
                                subSkill: {
                                    wushi: {
                                        trigger: {
                                            player: 'useCardToPlayered',
                                        },
                                        filter: function (event) {
                                            return event.card.name == 'sha';
                                        },
                                        forced: true,
                                        logTarget: 'target',
                                        content: function () {
                                            if (player.hasSkill('heishimrfz')) player.logSkill('heishimrfz');
                                            trigger.target.addTempSkill('heishimrfz_wushi2');
                                            trigger.target.storage.heishimrfz_wushi2.add(trigger.card);
                                            trigger.target.markSkill('heishimrfz_wushi2');
                                        },
                                        ai: {
                                            unequip_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha') return true;
                                                return false;
                                            }
                                        }
                                    },
                                    wushi2: {
                                        firstDo: true,
                                        ai: { unequip2: true },
                                        init: function (player, skill) {
                                            if (!player.storage[skill]) player.storage[skill] = [];
                                        },
                                        onremove: true,
                                        trigger: {
                                            player: ['damage', 'damageCancelled', 'damageZero'],
                                            source: ['damage', 'damageCancelled', 'damageZero'],
                                            target: ['shaMiss', 'useCardToExcluded', 'useCardToEnd', 'eventNeutralized'],
                                            global: ['useCardEnd'],
                                        },
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return player.storage.heishimrfz_wushi2 && event.card && player.storage.heishimrfz_wushi2.contains(event.card) && (event.name != 'damage' || event.notLink());
                                        },
                                        silent: true,
                                        forced: true,
                                        popup: false,
                                        priority: 12,
                                        content: function () {
                                            player.storage.heishimrfz_wushi2.remove(trigger.card);
                                            if (!player.storage.heishimrfz_wushi2.length) player.removeSkill('heishimrfz_wushi2');
                                        },
                                        marktext: '※',
                                        intro: { content: '当前防具技能已失效' },
                                    },
                                },
                                ai: {
                                    threaten: 1.2,
                                },
                            },
                            ruitongmrfz: {
                                audio: 2,
                                trigger: { global: 'useCardAfter' },
                                filter: function (event, player) {
                                    if (!player.hasSkill('junumrfz_effect') && get.distance(player, event.player) > 2 && player.hasSkill('heishimrfz')) return false;
                                    return event.player && event.player.isAlive() && event.player != player && get.subtype(event.card) == 'equip2' && player.inRange(event.player);
                                },
                                prompt: function (event, player) {
                                    return '是否对' + get.translation(event.player) + '视为使用一张【杀】';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                content: function () {
                                    player.useCard({ name: 'sha', isCard: true }, true, trigger.player);
                                },
                                ai: {
                                    expose: 0.9,
                                    threaten: 0.8,
                                },
                            },
                            junumrfz: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '巨弩',
                                animationColor: 'orange',
                                check: function (event, player) {
                                    if (!game.hasPlayer(function (current) {
                                        return current != player && get.attitude(current, player) < 0;
                                    })) return false;
                                    return player.countCards('h', 'sha') >= 2;
                                },
                                init: function (player) {
                                    player.storage.junumrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.junumrfz;
                                },
                                content: function () {
                                    player.storage.junumrfz = true;
                                    player.addTempSkill('junumrfz_effect');
                                },
                                subSkill: {
                                    effect: {
                                        mod: {
                                            targetInRange: function (card, player, target, now) {
                                                if (card.name == 'sha') return true;
                                            },
                                            selectTarget: function (card, player, range) {
                                                if (card.name == 'sha' && range[1] != -1) range[1]++;
                                            },
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            }
                                        },
                                        charlotte: true,
                                    },
                                },
                                ai: {
                                    threaten: 1.1,
                                },
                            },
                            //重岳
                            wubenmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseUseBegin' },
                                firstDo: true,
                                direct: true,
                                filter: function (event, player) {
                                    if (player.countCards('h') == 0) return false;
                                    return !player.getEquip(1) && game.hasPlayer(function (target) {
                                        return target != player && player.inRange(target);
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseCard('h', '你可以使用一张【杀】').set('ai', function (card) {
                                        if (game.hasPlayer(function (current) {
                                            return current != player && player.inRange(current) && get.attitude(player, current) < 0;
                                        })) return (6 - get.value(card));
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.cards) {
                                        player.chooseUseTarget({ name: 'sha' }, result.cards, true, false);
                                        player.logSkill('wubenmrfz');
                                    }
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha' && !player.getEquip(1)) return num + 1;
                                    },
                                    maxHandcard: function (player, num) {
                                        return num += Math.floor((5 - player.countCards('e')) / 2);
                                    },
                                },
                            },
                            wowumrfz: {
                                intro: {
                                    content: function (event, player) {
                                        if (player.countMark('wowumrfz_time') >= 5) return '<span class=firetext>【气收秋毫平】</span></br>已使用' + player.countMark('wowumrfz') + '张牌';
                                        return '<span class=firetext>【劲发江潮落】</span></br>已使用' + player.countMark('wowumrfz') + '张牌</br>已发动' + player.countMark('wowumrfz_time') + '次【我无】';
                                    },
                                },
                                onremove: true,
                                derivation: 'wowumrfz_rewrite',
                                audio: 4,
                                trigger: { player: 'useCardAfter' },
                                direct: true,
                                filter: function (event, player) {
                                    if ((player != _status.currentPhase || !player.isPhaseUsing()) && player.countMark('wowumrfz_time') < 5) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    player.addMark('wowumrfz', false);
                                    'step 1'
                                    if (player.countMark('wowumrfz') >= 3 && !player.hasMark('shubianmrfz')) {
                                        player.chooseTarget(false, get.prompt('wowumrfz'), '你可以对一名其他角色使用一张【杀】', function (card, player, target) {
                                            return player.countMark('wowumrfz_time') >= 5 ? target != player : target != player && player.inRange(target);
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                        player.removeMark('wowumrfz', 3, false);
                                        if (player.countMark('wowumrfz_time') < 5) player.addMark('wowumrfz_time', false);
                                    }
                                    else if (player.countMark('wowumrfz') >= 3) {
                                        if (player.countMark('wowumrfz_time') < 5) player.addMark('wowumrfz_time', false);
                                        player.removeMark('wowumrfz', 3, false);
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool && result.targets) {
                                        player.useCard({ name: 'sha', isCard: true }, true, false, result.targets);
                                        player.logSkill('wowumrfz', result.targets);
                                        if (player.countMark('wowumrfz_time') >= 5) player.draw();
                                    }
                                },
                                group: 'wowumrfz_draw',
                                subSkill: {
                                    draw: {
                                        direct: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            var evt = event.getParent(3)
                                            if (!event.card) return false;
                                            var sha = event.card.name == 'sha';
                                            return player.countMark('wowumrfz_time') < 5 && evt && evt.name == 'wowumrfz' && evt.player == player && sha
                                        },
                                        content: function () {
                                            player.draw();
                                            player.logSkill('wowumrfz');
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.3,
                                    expose: 0.2,
                                },
                            },
                            shubianmrfz: {
                                global: 'shubianmrfz_effect',
                                marktext: '息兵',
                                intro: {
                                    name: '息兵',
                                    content: '战事暂缓，休养生息',
                                },
                                audio: 4,
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    if (event.source == undefined) return false;
                                    return !event.source.hasMark('shubianmrfz') && event.source != player && event.source.isAlive() && event.source != undefined;
                                },
                                logTarget: 'source',
                                content: function () {
                                    var source = trigger.source
                                    'step 0'
                                    source.addMark('shubianmrfz');
                                    if (source.getEquip(1)) {
                                        var next = player.chooseControl('确定', '取消').set('prompt', get.prompt('shubianmrfz')).set('prompt2', '是否弃置' + get.translation(source) + '的武器牌(' + get.translation(source.getEquip(1)) + ')')
                                        next.set('ai', function () {
                                            var source = _status.event.getTrigger().source, player = _status.event.player;
                                            if (get.attitude(player, source) < 0) return 0;
                                            return 1;
                                        });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.control == '确定') {
                                        game.cardsDiscard(source.getEquip(1));
                                        game.log(source.getEquip(1), '进入了弃牌堆');
                                        player.logSkill('shubianmrfz', source);
                                    }
                                },
                                group: ['shubianmrfz_clear', 'shubianmrfz_give', 'shubianmrfz_effect2'],
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.countMark('shubianmrfz') > 0;
                                            });
                                        },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                current.removeMark('shubianmrfz', current.countMark('shubianmrfz'));
                                            });
                                        },
                                    },
                                    give: {
                                        audio: 'shubianmrfz',
                                        trigger: { player: 'phaseUseBegin' },
                                        filter: function (event, player) {
                                            return !player.hasMark('shubianmrfz');
                                        },
                                        check: function (event, player) {
                                            var num = Math.random()
                                            if (player.hasCard(function (card) {
                                                return get.tag(card, 'damage');
                                            }).length == 0) num--;
                                            if (player.hp <= 2 && player.hasCard(function (card) {
                                                return get.tag(card, 'damage');
                                            }).length >= 2) num + 0.5;
                                            return num > 0.55;
                                        },
                                        content: function () {
                                            player.addMark('shubianmrfz');
                                            player.addTempSkill('shubianmrfz_effect2');
                                        },
                                    },
                                    effect: {
                                        charlotte: true,
                                        mod: {
                                            cardEnabled: function (card, player) { if (get.tag(card, 'damage') && player.hasMark('shubianmrfz')) return false; },
                                            maxHandcard: function (player, num) { if (player.hasMark('shubianmrfz')) return num += 2; },
                                        },
                                    },
                                    effect2: {
                                        charlotte: true,
                                        intro: { content: '因此重铸过的牌名:$' },
                                        onremove: true,
                                        audio: 'shubianmrfz',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            if (!player.hasMark('shubianmrfz')) return false;
                                            return player.hasCard(function (card) {
                                                return get.tag(card, 'damage');
                                            });
                                        },
                                        delay: 0,
                                        content: function () {
                                            'step 0'
                                            player.chooseToDiscard('h', [1, Infinity], false, get.prompt('shubianmrfz'), '你可以重铸任意张带有伤害类标签的手牌', function (card) {
                                                return get.tag(card, 'damage');
                                            });
                                            'step 1'
                                            if (result.cards) {
                                                player.draw(result.cards.length);
                                                for (var i = 0; i < result.cards.length; i++) {
                                                    if (!player.getStorage('shubianmrfz_effect2').contains(result.cards[i].name)) {
                                                        player.markAuto('shubianmrfz_effect2', [result.cards[i].name]);
                                                        player.draw();
                                                    }
                                                }
                                                player.logSkill('shubianmrfz');
                                            }
                                            else event.finish();
                                        },
                                    },
                                },
                            },
                            //安洁莉娜
                            fanzhongmrfz: {
                                intro: {
                                    content: '重力紊乱',
                                },
                                audio: 4,
                                global: ['fanzhongmrfz2', 'fanzhongmrfz_gain', 'fanzhongmrfz_gain2', 'fanzhongmrfz_lose'],
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return game.hasPlayer(function (target) {
                                        return target != player && player.inRange(target) && target.countMark('fanzhongmrfz') < 3;
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('fanzhongmrfz'), '你可以选择攻击范围内的一名其他角色，令其获得‘反重’标记', function (card, player, target) {
                                        return target != player && player.inRange(target) && target.countMark('fanzhongmrfz') < 3;
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    if (result.bool && result.targets) {
                                        result.targets[0].addMark('fanzhongmrfz');
                                        player.logSkill('fanzhongmrfz', result.targets[0]);
                                    }
                                },
                                subSkill: {
                                    gain: {
                                        direct: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return player.hasMark('fanzhongmrfz') && player.getExpansions('fanzhongmrfz2').length > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            var cards = player.getExpansions('fanzhongmrfz2');
                                            if (cards.length) player.chooseButton(['获得一张牌', cards], true);
                                            else event.finish();
                                            'step 1'
                                            if (result.bool) player.gain(result.links, 'gain2');
                                        },
                                    },
                                    gain2: {
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseDiscardBefore' },
                                        filter: function (event, player) {
                                            return player.hasMark('fanzhongmrfz');
                                        },
                                        content: function () {
                                            var cards = player.getExpansions('fanzhongmrfz2');
                                            if (cards) player.gain(cards, 'gain2');
                                            player.removeAllmark('fanzhongmrfz');
                                        },
                                    },
                                    lose: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'die' },
                                        filter: function (event, player) {
                                            return player.hasMark('fanzhongmrfz');
                                        },
                                        content: function () {
                                            var cards = player.getExpansions('fanzhongmrfz2');
                                            player.removeAllmark('fanzhongmrfz');
                                            if (cards) player.loseToDiscardpile(cards);
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.6,
                                    threaten: 1.2,
                                },
                            },
                            fanzhongmrfz2: {
                                intro: {
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                charlotte: true,
                                direct: true,
                                trigger: { player: 'gainEnd' },
                                filter: function (event, player) {
                                    if (event.player.getExpansions('fanzhongmrfz2').length >= 6) return false;
                                    return player.hasMark('fanzhongmrfz') && event.getParent().name != 'fanzhongmrfz_gain' && event.getParent().name != 'fanzhongmrfz_gain2';
                                },
                                content: function () {
                                    player.addToExpansion(trigger.cards, player, 'give').gaintag.add('fanzhongmrfz2');
                                    player.logSkill('fanzhongmrfz');
                                    //var str='';
                                    //str+=get.translation(trigger)+'</br>';
                                    //for(var i=1;i<=10;i++) str+=get.translation(trigger.getParent(i))+'</br>';
                                    //game.log(str);
                                    //player.popup(str);
                                },
                            },
                            xinshimrfz: {
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (card.hasGaintag('xinshimrfz')) {
                                            return true;
                                        }
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && card.hasGaintag('xinshimrfz')) {
                                            return false;
                                        }
                                    },
                                },
                                audio: 4,
                                enable: 'phaseUse',
                                discard: false,
                                lose: false,
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && !target.tempSkills.xinshimrfz2 && !target.hasMark('xinshimrfz');
                                },
                                filterCard: function (card, player) {
                                    return !player.storage.xinshimrfz || !player.storage.xinshimrfz.contains(get.type(card, 'trick'));
                                },
                                check: function (card) {
                                    return 10 - get.value(card);
                                },
                                delay: 0,
                                prompt: '你可以将一张本回合你未以此法交出过的类型的牌交给本回合你未以此法选择过的角色',
                                content: function () {
                                    'step 0'
                                    if (!player.storage.xinshimrfz) player.storage.xinshimrfz = [];
                                    player.storage.xinshimrfz.push(get.type(cards[0], 'trick'));
                                    'step 1'
                                    player.give(cards, target);
                                    target.addTempSkill('xinshimrfz2');
                                    'step 2'
                                    var mark = player.storage.xinshimrfz.length;
                                    if (mark == 1) {
                                        player.draw();
                                        event.finish();
                                    }
                                    if (mark == 2) event.goto(3);
                                    if (mark == 3) {
                                        event.goto(5);
                                    }
                                    'step 3'
                                    if (target.countCards('h') > 0) target.chooseCard('h', true);
                                    else event.finish();
                                    'step 4'
                                    if (result.cards) {
                                        target.give(result.cards, player);
                                        target.draw();
                                    }
                                    event.finish();
                                    'step 5'
                                    if (player.storage.xinshimrfz.length == 3) {
                                        player.chooseTarget(true, '【信使】:请选择一名其他角色，令其获得‘反重’标记', function (card, player, target) {
                                            return target != player && !target.hasMark('xinshimrfz');
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                        player.logSkill('xinshimrfz');
                                    }
                                    else event.finish();
                                    'step 6'
                                    if (result.bool && result.targets) {
                                        result.targets[0].addMark('fanzhongmrfz');
                                    }
                                },
                                ai: {
                                    order: 9,
                                    expose: 0.2,
                                    threaten: 1.2,
                                    result: {
                                        target: function (player, target) {
                                            if (player.countCards('h') > 2) return 1;
                                        },
                                    },
                                },
                                group: ['xinshimrfz_clear', 'xinshimrfz_give'],
                                subSkill: {
                                    clear: {
                                        charlotte: true,
                                        silent: true,
                                        direct: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.storage.xinshimrfz = [];
                                            player.removeGaintag('xinshimrfz');
                                        },
                                    },
                                    give: {
                                        direct: true,
                                        trigger: { player: "gainEnd" },
                                        filter: function (event, player) {
                                            return event.source;
                                        },
                                        logTarget: 'source',
                                        content: function () {
                                            'step 0'
                                            if (trigger.cards.length) player.addMark('xinshimrfz_give', trigger.cards.length, false);
                                            'step 1'
                                            if (player.countMark('xinshimrfz_give') >= 2) {
                                                player.chooseControl('basic', 'trick', 'equip', 'cancel2').set('prompt', '选择获得一种类型的牌').set('ai', function () {
                                                    var player = _status.event.player;
                                                    if (player.hp <= 3 && !player.countCards('h', { name: ['shan', 'tao'] })) return 'basic';
                                                    if (player.countCards('he', { type: 'equip' }) < 2) return 'equip';
                                                    return 'trick';
                                                });
                                                player.removeMark('xinshimrfz_give', 2, false);
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.control != 'cancel2') {
                                                var card = get.cardPile2(function (card) {
                                                    return get.type(card, 'trick') == result.control;
                                                });
                                                if (card) player.gain(card, 'gain2', 'log').gaintag.add('xinshimrfz');
                                                player.logSkill('xinshimrfz');
                                            }
                                            if (player.countMark('xinshimrfz_give') >= 2) event.goto(1);
                                        },
                                    },
                                },
                            },
                            xinshimrfz2: {},
                            //号角
                            dunpaomrfz: {
                                derivation: 'dunpaomrfz_rewrite',
                                audio: 2,
                                trigger: { player: 'phaseBegin' },
                                check: function (event, player) {
                                    return (game.countPlayer() <= 4 && game.hasPlayer(function (current) {
                                        return get.attitude(player, current) < 0 && get.distance(player, current) == 1;
                                    })) || !game.hasPlayer(function (current) {
                                        return get.attitude(player, current) >= 0 && current != player;
                                    })
                                },
                                filter: function (event, player) { return !player.storage.dunpaomrfz; },
                                content: function () {
                                    player.storage.dunpaomrfz = true;
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.storage.dunpaomrfz) return num + 2;
                                    },
                                    playerEnabled: function (card, player, target) {
                                        if (!player.storage.dunpaomrfz && get.distance(player, target) <= 1 && target != player) return false;
                                    },
                                    attackRange: function (player, num) {
                                        if (!player.storage.dunpaomrfz) return num + 5;
                                    },
                                },
                                group: 'dunpaomrfz_add',
                                subSkill: {
                                    add: {
                                        audio: 'biaohaomrfz',
                                        forced: true,
                                        trigger: { source: 'damageBegin1' },
                                        filter: function (event, player) {
                                            if (player.storage.dunpaomrfz) return false;
                                            return event.card.name == 'sha' && event.player != player && get.distance(player, event.player) > 1;
                                        },
                                        content: function () {
                                            var target = trigger.player
                                            'step 0'
                                            target.judge(function (card) {
                                                var color = get.color(card);
                                                if (color == 'black') return -4;
                                                return 0;
                                            }).judge2 = function (result) {
                                                return result.bool == false ? true : false;
                                            };
                                            'step 1'
                                            if (result.color == 'black') trigger.num++;
                                        },
                                    },
                                },
                            },
                            biaohaomrfz: {
                                audio: 6,
                                chargeSkill: true,
                                enable: 'phaseUse',
                                usable: 2,
                                filter: function (event, player) {
                                    return player.countMark('charge') < 4 && player.hasCard(function (card) {
                                        return get.tag(card, 'damage');
                                    });
                                },
                                filterCard: function (card) {
                                    return get.tag(card, 'damage');
                                },
                                position: 'he',
                                check: function (card) {
                                    if (card.name == 'sha') return 1;
                                    if (card.name == 'nanman' || card.name == 'wanjian') return -1;
                                    return 10 - get.value(card);
                                },
                                content: function () {
                                    player.addMark('charge');
                                    player.draw();
                                },
                                group: ['biaohaomrfz_usesha', 'biaohaomrfz_allin'],
                                subSkill: {
                                    usesha: {
                                        audio: 'biaohaomrfz',
                                        enable: 'chooseToUse',
                                        viewAs: { name: 'sha', isCard: true },
                                        filterCard: function () { return false },
                                        viewAsFilter: function (player) {
                                            if (player.countMark('charge') <= 0) return false;
                                        },
                                        selectCard: -1,
                                        prompt: '视为使用一张杀',
                                        precontent: function () {
                                            player.removeMark('charge');
                                        },
                                        ai: {
                                            order: function () {
                                                var player = _status.event.player;
                                                if (!game.hasPlayer(function (current) {
                                                    return player.canUse('sha', current) && current.hp == 1 && get.effect(current, { name: 'sha' }, player, player) > 0;
                                                })) {
                                                    return 0;
                                                }
                                                return 2.95;
                                            },
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg != 'use') return false;
                                            },
                                            respondSha: true,
                                        }
                                    },
                                    allin: {
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return player.countMark('charge') >= 4;
                                        },
                                        delay: 0,
                                        content: function () {
                                            'step 0'
                                            player.chooseControl('确定', '取消').set('prompt', get.prompt('biaohaomrfz')).set('prompt2', '你可以消耗4点蓄力值，视为使用三张【杀】和一张【万箭齐发】，然后失去3点体力。')
                                            'step 1'
                                            if (result.control == '取消') event.finish();
                                            else {
                                                player.logSkill('biaohaomrfz');
                                                player.removeMark('charge', 4);
                                                event.num = 0;
                                            }
                                            'step 2'
                                            event.num++;
                                            player.chooseUseTarget({
                                                name: event.num < 4 ? 'sha' : 'wanjian',
                                                isCard: true,
                                            }, '请选择【杀】的目标(【杀】:' + (event.num < 4 ? event.num : 3) + '/3;【万箭齐发】:0/1)', false);
                                            player.logSkill('biaohaomrfz');
                                            if (event.num < 4) event.redo();
                                            'step 3'
                                            player.loseHp(3);
                                        },
                                        ai: {
                                            order: 3,
                                            result: {
                                                player: 1,
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    order: 10,
                                    result: {
                                        player: 1,
                                    },
                                },
                            },
                            xuezhanmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'dieBegin' },
                                filter: function (event, player) {
                                    return !player.storage.xuezhanmrfz;
                                },
                                content: function () {
                                    player.storage.xuezhanmrfz = true;
                                    player.chooseToDiscard('hej', true, player.countCards('hej'));
                                    trigger.cancel();
                                    game.log(player, '复活');
                                    if (player.getDamagedHp()) player.recover(player.maxHp);
                                    if (player.maxHp >= 2) player.loseMaxHp(player.maxHp - 2);
                                    else player.gainMaxHp(2 - player.maxHp);
                                    player.draw(4);
                                    player.link(false);
                                    player.turnOver(false);
                                },
                            },
                            //焰尾
                            fengjianmrfz: {
                                intro: {
                                    content: '当你使用下一张非的【闪】基本牌后，你可以视为使用一张相同的基本牌。',
                                },
                                audio: 2,
                                trigger: { player: ['respond', 'useCardAfter'] },
                                forced: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    if (!event.respondTo) return false;
                                    return !player.hasMark('fengjianmrfz');
                                },
                                content: function () {
                                    player.addMark('fengjianmrfz');
                                },
                                group: 'fengjianmrfz_use',
                                subSkill: {
                                    use: {
                                        trigger: { player: 'useCardAfter' },
                                        forced: true,
                                        firstDo: true,
                                        filter: function (event, player) {
                                            if (event.card.name == 'shan') return false;
                                            return player.hasMark('fengjianmrfz') && get.type(event.card) == 'basic';
                                        },
                                        content: function () {
                                            var cards = trigger.card
                                            player.removeMark('fengjianmrfz');
                                            if ((cards.name == 'tao' && player.getDamagedHp() > 0) || cards.name != 'shan') {
                                                player.chooseUseTarget(cards, false, get.prompt2('fengjianmrfz'), '你可以使用一张' + get.translation(cards));
                                                player.logSkill('fengjianmrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            hongsongmrfz: {
                                intro: {
                                    content: '你有#个‘红松’标记</br>·有‘红松’标记的角色需要使用或打出闪时可以进行判定，若不为♥，视为使用一张【闪】并获得此判定牌，然后移除一个‘红松’标记。',
                                },
                                onremove: true,
                                audio: 2,
                                trigger: { player: ['respond', 'useCardAfter'] },
                                forced: true,
                                filter: function (event, player) {
                                    var num = 0
                                    for (var i = 0; i < game.players.length; i++) {
                                        if (game.players[i].hasMark('hongsongmrfz')) num += game.players[i].countMark('hongsongmrfz');
                                    }
                                    if (!event.respondTo) return false;
                                    return num < 3;
                                },
                                content: function () {
                                    player.addMark('hongsongmrfz');
                                },
                                group: ['hongsongmrfz_shan', 'hongsongmrfz_give'],
                                subSkill: {
                                    shan: {
                                        audio: 'hongsongmrfz',
                                        trigger: { global: ['chooseToRespondBegin', 'chooseToUseBegin'] },
                                        filter: function (event, player) {
                                            if (event.responded) return false;
                                            if (!event.filterCard || !event.filterCard({ name: 'shan' }, player, event)) return false;
                                            if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({ name: 'shan' }, player, event)) return false;
                                            if (event.player != player && !event.player.hasMark('hongsongmrfz')) return false;
                                            return true;
                                        },
                                        forced: true,
                                        content: function () {
                                            "step 0"
                                            trigger.player.chooseControl('确定', '取消').set('prompt', get.prompt('hongsongmrfz')).set('prompt2', '你可以进行判定，若不为♥，其视为使用或打出一张【闪】并获得判定牌');
                                            "step 1"
                                            if (result.control == '确定') {
                                                trigger.player.judge(function (card) { return (get.suit(card) == 'heart') ? -0.5 : 1.5 }).set('callback', lib.skill.hongsongmrfz_shan.callback).judge2 = function (result) {
                                                    return result.bool;
                                                };
                                            }
                                            else event.finish();
                                            "step 2"
                                            if (result.judge > 0) {
                                                trigger.untrigger();
                                                trigger.set('responded', true);
                                                trigger.result = { bool: true, card: { name: 'shan', isCard: true } };
                                                if (trigger.player != player) trigger.player.removeMark('hongsongmrfz');
                                            }
                                        },
                                        callback: function () {
                                            if (get.suit(card) != 'heart') player.gain(card, 'gain2');
                                        },
                                        ai: {
                                            respondShan: true,
                                        },
                                    },
                                    give: {
                                        direct: true,
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return player.hasMark('hongsongmrfz');
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('hongsongmrfz'), '你可以将任意个‘红松’标记交给任意名其他角色', function (card, player, target) {
                                                return target != player;
                                            }).ai = function (target) {
                                                return get.attitude(player, target) > 0;
                                            };
                                            'step 1'
                                            if (result.bool && result.targets) {
                                                var target = result.targets[0]
                                                target.addMark('hongsongmrfz');
                                                player.removeMark('hongsongmrfz');
                                                player.logSkill('hongsongmrfz', target);
                                                if (player.hasMark('hongsongmrfz')) event.goto(0);
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 0.5,
                                },
                            },
                            //夕
                            huijuanmrfz: {
                                intro: { content: '记录的牌名:$', },
                                onremove: true,
                                audio: 2,
                                forced: true,
                                trigger: { global: 'useCard' },
                                filter: function (event, player) {
                                    if (get.type(event.card) == 'equip') return false;
                                    if (get.type(event.card) == 'trick' && player.hasSkill('huijuanmrfz_trick')) return false;
                                    if (get.type(event.card) == 'basic' && player.hasSkill('huijuanmrfz_basic')) return false;
                                    if (get.type(event.card) == 'delay' && player.hasSkill('huijuanmrfz_delay')) return false;
                                    return !player.getStorage('huijuanmrfz').contains(event.card.name);
                                },
                                content: function () {
                                    player.markAuto('huijuanmrfz', [trigger.card.name]);
                                    if (get.type(trigger.card) == 'trick') player.addSkill('huijuanmrfz_trick');
                                    if (get.type(trigger.card) == 'delay') player.addSkill('huijuanmrfz_delay');
                                    if (get.type(trigger.card) == 'basic') player.addSkill('huijuanmrfz_basic');
                                },
                                group: ['huijuanmrfz_use', 'huijuanmrfz_clear'],
                                subSkill: {
                                    //检测技能
                                    basic: {
                                        silent: true,
                                        direct: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () { player.removeSkill('huijuanmrfz_basic') },
                                    },
                                    trick: {
                                        silent: true,
                                        direct: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () { player.removeSkill('huijuanmrfz_trick') },
                                    },
                                    delay: {
                                        silent: true,
                                        direct: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () { player.removeSkill('huijuanmrfz_delay') },
                                    },
                                    //非检测技能
                                    clear: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) { return player.getStorage('huijuanmrfz').length },
                                        content: function () {
                                            for (var i = 0; i < 2; i++) player.unmarkAuto('huijuanmrfz', [player.getStorage('huijuanmrfz')[0]])
                                        },
                                    },
                                    use: {
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filter: function (event, player) {
                                            if (player.getStorage('huijuanmrfz').length == 0 || player.countCards('h') == 0) return false;
                                            for (var i = 0; i < player.getStorage('huijuanmrfz').length; i++) {
                                                if (event.filterCard({ name: player.getStorage('huijuanmrfz')[i] }, player, event)) return true;
                                            }
                                            return false;
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                var list = []
                                                var storage = player.getStorage('huijuanmrfz')
                                                for (var i of lib.inpile) {
                                                    if (event.filterCard({ name: i }, player, event) && storage.contains(i)) list.push([get.type(i) == 'basic' ? '基本' : '锦囊', '', i]);
                                                }
                                                return ui.create.dialog('绘卷', [list, 'vcard'], 'hidden')
                                            },
                                            filter: function (button, player) {
                                                return lib.filter.cardEnabled({
                                                    name: button.link[2],
                                                }, player, _status.event.getParent());
                                            },
                                            check: function (button) {
                                                var player = _status.event.player;
                                                var card = {
                                                    name: button.link[2],
                                                };
                                                if (player.getUseValue(card) > 0) return get.order(card);
                                                return -1;
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    audio: 'huijuanmrfz',
                                                    popname: true,
                                                    filterCard: true,
                                                    position: 'hs',
                                                    viewAs: {
                                                        name: links[0][2],
                                                    },
                                                    check: function (card) {
                                                        return 6 - get.value(card);
                                                    },
                                                    precontent: function () {
                                                        var cards = event.result.card;
                                                        if (cards.name == 'sha' || cards.name == 'jiu') event.getParent().addCount = false;
                                                        player.unmarkAuto('huijuanmrfz', [cards.name]);
                                                    },
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '将一张手牌当做【' + get.translation(links[0][2]) + '】使用';
                                            },
                                        },
                                        ai: {
                                            order: 13,
                                            result: {
                                                player: 1,
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.3,
                                },
                            },
                            dianjingmrfz: {
                                mark: true,
                                locked: false,
                                zhuanhuanji: true,
                                marktext: '☯',
                                intro: {
                                    content: function (event, player) {
                                        return !player.storage.dianjingmrfz ? '当你使用转化牌时，你可以从牌堆中获得与你使用的转化牌的牌名相同的牌。' : '当你使用转化牌时，你可以从牌堆中获得与你使用的转化牌的类型相同的牌。';
                                    },
                                },
                                audio: 2,
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    return !event.card.isCard;
                                },
                                frequent: true,
                                content: function () {
                                    var cardt = get.cardPile2(function (card) {
                                        return get.type(card, 'trick') == get.type(trigger.card);
                                    });
                                    var cardf = get.cardPile2(trigger.card.name);
                                    if (player.storage.dianjingmrfz == true) {
                                        if (cardt) player.gain(cardt, 'gain2', 'log');
                                        else player.chat('牌堆中没有', cardt, '牌');
                                    }
                                    else {
                                        if (cardf) player.gain(cardf, 'gain2', 'log');
                                        else player.chat('牌堆中没有【' + get.translation(trigger.card.name) + '】');
                                    }
                                    player.changeZhuanhuanji('dianjingmrfz');
                                },
                            },
                            cangjuanmrfz: {
                                mod: {
                                    ignoredHandcard: function (card, player) {
                                        if (card.hasGaintag('cangjuanmrfz')) {
                                            return true;
                                        }
                                    },
                                    cardDiscardable: function (card, player, name) {
                                        if (name == 'phaseDiscard' && card.hasGaintag('cangjuanmrfz')) return false;
                                    }
                                },
                                audio: 2,
                                trigger: { player: 'gainBegin' },
                                filter: function (event, player) {
                                    return player.countMark('cangjuanmrfz') < 3;
                                },
                                forced: true,
                                content: function () {
                                    player.addMark('cangjuanmrfz', false);
                                    trigger.gaintag.add('cangjuanmrfz');
                                },
                                group: 'cangjuanmrfz_remove',
                                subSkill: {
                                    remove: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.removeMark('cangjuanmrfz', 3);
                                            player.removeGaintag('cangjuanmrfz');
                                        },
                                    },
                                },
                            },
                            //能天使
                            lianshemrfz: {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num = player.maxHp;
                                    }
                                },
                                audio: 2,
                                trigger: { player: 'useCard' },
                                forced: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    return !event.audioed && event.card.name == 'sha' && event.getParent().type == 'phase';
                                },
                                content: function () {
                                    trigger.audioed = true;
                                },
                            },
                            guozaimrfz: {
                                audio: 4,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.getCardUsable('sha') > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                content: function () {
                                    'step 0'
                                    var cards = game.cardsGotoOrdering(get.cards(player.maxHp + 1)).cards;
                                    event.cards = cards;
                                    event.cards2 = [];
                                    event.cards3 = [];
                                    event.num = 0;
                                    if (!player.canUse('sha', target, false)) event.finish();
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (event.cards[i].name == 'sha') {
                                            event.cards2.push(event.cards[i]);
                                            event.num++;
                                        }
                                        else event.cards3.push(event.cards[i]);
                                    }
                                    game.cardsGotoOrdering(event.cards);
                                    player.showCards(event.cards, get.translation(player) + '发动了【过载】');
                                    if (event.cards2.length == 0 || !target.isAlive()) event.goto(2);
                                    'step 1'
                                    var cards = event.cards2[event.num - 1]
                                    player.showCards(cards, get.translation(player) + '发动了【过载】');
                                    event.num--;
                                    player.logSkill('guozaimrfz', target);
                                    if (target.isAlive()) player.chooseUseTarget(cards, true, 'nodistance').set('filterTarget', function (card, player, target) {
                                        var evt = _status.event;
                                        if (_status.event.name == 'chooseTarget') evt = evt.getParent();
                                        if (target != player && target != evt.guozaimrfz_target) return false;
                                        return lib.filter.targetEnabledx(card, player, target);
                                    }).set('guozaimrfz_target', target);
                                    if (event.num > 0 && target.isAlive() && player.getCardUsable('sha') > 0) event.redo();
                                    'step 2'
                                    if (event.cards3.length > 0) player.chooseButton(['过载:你可以获得一张牌', event.cards3]).set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    'step 3'
                                    if (result.links) player.gain(result.links, 'gain2');
                                },
                                ai: {
                                    order: 10,
                                    threaten: 1.1,
                                    expose: 0.6,
                                    result: {
                                        target: -1,
                                    },
                                },
                            },
                            //远牙
                            yuanmengmrfz: {
                                audio: 4,
                                trigger: { global: 'useCard' },
                                filter: function (event, player) {
                                    if (player.inRange(event.player)) return false;
                                    if (!player.hasSha()) return false;
                                    return event.card.name == 'sha' && event.player != player;
                                },
                                direct: true,
                                content: function () {
                                    var target = trigger.targets[0], source = trigger.player;
                                    'step 0'
                                    if (target == player) player.chooseControl('确定', 'cancel2').set('prompt', get.prompt('yuanmengmrfz')).set('prompt2', '你可以对' + get.translation(source) + '使用【杀】').set('ai', function (player, target) {
                                        var player = _status.event.player, target = _status.event.getTrigger().player, source = _status.event.getTrigger().source;
                                        if (get.attitude(player, target) > 2) return 1;
                                        return 0;
                                    });
                                    else event.goto(2);
                                    'step 1'
                                    if (result.index == 0) {
                                        player.chooseToUse(true, function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.cardEnabled.apply(this, arguments);
                                        }).set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.targetx && !ui.selected.targets.contains(_status.event.targetx)) return false;
                                            return lib.filter.targetEnabled.apply(this, arguments);
                                        }).set('targetx', source);
                                        player.logSkill('yuanmengmrfz', resultx);
                                        player.draw();
                                        event.finish();
                                    }
                                    else event.finish();
                                    'step 2'
                                    var next = player.chooseControl(get.translation(target), get.translation(source), 'cancel2').set('prompt', get.prompt('yuanmengmrfz')).set('prompt2', '你可以对其中一名角色使用【杀】');
                                    next.set('ai', function () {
                                        var player = _status.event.player, target = _status.event.getTrigger().player, source = _status.event.getTrigger().source;
                                        if (get.attitude(player, target) < 2) return 1;
                                        if (get.attitude(player, source) < 2) return 0;
                                        return 2;
                                    });
                                    'step 3'
                                    if (result.index != 2) {
                                        var resulty = result.index == 1 ? target : source, resultx = result.index == 0 ? target : source;
                                        //player.addTempSkill('yuanmengmrfz_discard',{player:'shaAfter'});
                                        player.chooseToUse(true, function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.cardEnabled.apply(this, arguments);
                                        }).set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.targetx && !ui.selected.targets.contains(_status.event.targetx)) return false;
                                            return lib.filter.targetEnabled.apply(this, arguments);
                                        }).set('targetx', result.index == 0 ? target : source);
                                        player.draw();
                                        resulty.draw();
                                        player.logSkill('yuanmengmrfz', resultx);
                                    }
                                    else event.finish();
                                },
                                //subSkill:{
                                //discard:{
                                //direct:true,
                                //charlotte:true,
                                //trigger:{player:'shaMiss'},
                                //content:function(){
                                //	'step 0'
                                //	if(player.countCards('h')>0) trigger.targets[0].chooseCard('h',true,'【援盟】:请交给'+get.translation(player)+'一张手牌');
                                //	else event.finish();
                                //	'step 1'
                                //	if(result.cards){
                                //		player.logSkill('yuanmengmrfz',trigger.targets[0]);
                                //		trigger.targets[0].give(result.cards,player);
                                //	}
                                //},
                                //},
                                //},
                                ai: {
                                    expose: 0.5,
                                    threaten: 1.2,
                                },
                            },
                            ningshenmrfz: {
                                intro: {
                                    content: function (event, player) {
                                        return (player.storage.ningshenmrfz_damage ? '·本轮已受到过伤害</br>' : '') + (player.countMark('ningshenmrfz') == 0 ? '·已连续0个回合没有成为其他角色使用牌的目标。' : '·已连续' + player.countMark('ningshenmrfz') + '个回合没有成为其他角色使用牌的目标。') + (player.storage.ningshenmrfz_mark != 0 ? '</br>·下一张带有伤害类标签的牌伤害基数+' + player.storage.ningshenmrfz_mark : '');
                                    },
                                },
                                mark: true,
                                audio: 2,
                                direct: true,
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    if (!event.player.isAlive()) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    var history = trigger.player.getHistory('useCard');
                                    if (trigger.player != player) for (var i = 0; i < history.length; i++) {
                                        if (!history[i].targets) continue;
                                        for (var j = 0; j < history[i].targets.length; j++) {
                                            if (history[i].targets[j] == player) {
                                                player.removeMark('ningshenmrfz', player.countMark('ningshenmrfz'));
                                                event.finish();
                                            }
                                        }
                                    }
                                    'step 1'
                                    player.addMark('ningshenmrfz');
                                    'step 2'
                                    if (player.countMark('ningshenmrfz') >= 2) {
                                        player.chooseControl('摸牌', '获得杀').set('prompt', get.prompt('ningshenmrfz')).set('prompt2', '请选择一项').set('ai', function (event, player) {
                                            if (player.hp <= 2 || player.hasCard(function (card) {
                                                return card.name == 'sha';
                                            })) return 0;
                                            return 1;
                                        });
                                        player.removeMark('ningshenmrfz', player.countMark('ningshenmrfz'));
                                        player.popup('ningshenmrfz');
                                        player.logSkill('ningshenmrfz');
                                    }
                                    else event.finish();
                                    'step 3'
                                    var cards = get.cardPile2('sha');
                                    if (result.index == 0) player.draw();
                                    else if (cards) player.gain(cards, 'gain2', 'log');
                                },
                                group: ['ningshenmrfz_mark', 'ningshenmrfz_damage', 'ningshenmrfz_remove'],
                                subSkill: {
                                    mark: {
                                        trigger: { player: 'useCard1' },
                                        forced: true,
                                        firstDo: true,
                                        charlotte: true,
                                        filter: function (event, player) { return get.tag(event.card, 'damage') && player.storage.ningshenmrfz_mark > 0; },
                                        content: function () {
                                            trigger.baseDamage += player.storage.ningshenmrfz_mark;
                                            player.storage.ningshenmrfz_mark = 0;
                                            player.logSkill('ningshenmrfz');
                                        },
                                        init: function (player) {
                                            player.storage.ningshenmrfz_mark = 0;
                                        },
                                        onremove: function (player) {
                                            delete player.storage.ningshenmrfz_mark;
                                        },
                                        ai: {
                                            damageBonus: true,
                                        },
                                    },
                                    damage: {
                                        silent: true,
                                        charlotte: true,
                                        popup: false,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            if (!player.storage.ningshenmrfz_damage) {
                                                player.logSkill('ningshenmrfz');
                                                player.storage.ningshenmrfz_mark++;
                                            }
                                            else player.storage.ningshenmrfz_damage = false;
                                        },
                                    },
                                    remove: {
                                        silent: true,
                                        charlotte: true,
                                        popup: false,
                                        trigger: { player: 'damageEnd' },
                                        content: function () {
                                            if (!player.storage.ningshenmrfz_damage) player.storage.ningshenmrfz_damage = true;
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.1,
                                },
                            },
                            bingximrfz: {
                                mod: {
                                    attackRangeBase: function (player, num) {
                                        if (player != _status.currentPhase && player.hp <= player.countCards('h')) return num = 0;
                                        return num;
                                    },
                                },
                            },
                            //迷迭香
                            nianshoumrfz: {
                                markimage: 'extension/明日方舟/image/orther/mdxnianshoumrfz.png',
                                intro: {
                                    name: '巨剑',
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 4,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (player.getExpansions('nianshoumrfz').length >= 2) return false;
                                    return player.hasCard(function (card) {
                                        return get.subtype(card) == 'equip1';
                                    });
                                },
                                filterCard: function (card) {
                                    return get.subtype(card) == 'equip1';
                                },
                                position: 'he',
                                discard: false,
                                content: function () {
                                    player.addToExpansion(cards, player, 'give').gaintag.add('nianshoumrfz');
                                },
                                group: ['nianshoumrfz_disable', 'nianshoumrfz_usesha', 'nianshoumrfz_eff1', 'nianshoumrfz_eff2', 'nianshoumrfz_eff3', 'nianshoumrfz_eff4', 'nianshoumrfz_eff5'],
                                subSkill: {
                                    disable: {
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return (event.name != 'phase' || game.phaseNumber == 0);
                                        },
                                        content: function () {
                                            var card = get.cardPile2(function (card) {
                                                return get.subtype(card) == 'equip1';
                                            });
                                            'step 0'
                                            player.logSkill('nianshoumrfz');
                                            event.num = 0;
                                            player.disableEquip('equip1');
                                            'step 1'
                                            event.num++;
                                            if (card) player.gain(card, 'gain2', 'log');
                                            else player.chat('牌堆中没有武器牌了');
                                            if (event.num < 2) event.redo();
                                        },
                                    },
                                    usesha: {
                                        direct: true,
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            var targetx = event.targets, num = 0;
                                            if (event.card.name != 'sha' || player.getExpansions('nianshoumrfz').length == 0) return false;
                                            if (event.getParent().triggeredTargets3.length > 1) return false;
                                            for (var i = 0; i < targetx.length; i++) {
                                                if (targetx[i].getExpansions('nianshoumrfz').length < 2) num++;
                                            }
                                            return num > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseBool('是否将一个‘巨剑’置于' + (trigger.targets.length == 1 ? get.translation(trigger.targets[0]) : '其中一个目标') + '的武将牌上').set('ai', function () {
                                                return get.attitude(_status.event.player, _status.event.target) < 2;
                                            });
                                            'step 1'
                                            if (result.bool && trigger.targets.length == 1) {
                                                var cards = player.getExpansions('nianshoumrfz');
                                                if (cards.length) player.chooseButton(['选择一个‘巨剑’', cards], true);
                                                else event.finish();
                                            }
                                            else event.goto(4);
                                            'step 2'
                                            if (result.links && result.bool && trigger.targets.length == 1) {
                                                player.gain(result.links, 'gain2').gaintag.add('nianshoumrfz2');
                                            }
                                            'step 3'
                                            if (result.cards && trigger.targets.length == 1) {
                                                var cards3 = player.getCards('h', function (card) {
                                                    return card.hasGaintag('nianshoumrfz2');
                                                });
                                                trigger.targets[0].addToExpansion(cards3, trigger.targets[0], 'give').gaintag.add('nianshoumrfz');
                                                player.logSkill('nianshoumrfz');
                                            }
                                            event.finish();
                                            'step 4'
                                            if (result.links && result.bool && trigger.targets.length > 1) {
                                                player.chooseTarget(true, function (card, player, target) {
                                                    return _status.event.targets.contains(target);
                                                }).set('targets', trigger.targets).set('ai', function (target) {
                                                    return get.attitude(_status.event.player, target) < 2;
                                                });
                                            }
                                            else event.finish();
                                            'step 5'
                                            if (result.bool && result.targets) {
                                                event.target = result.targets[0]
                                                var cards = player.getExpansions('nianshoumrfz');
                                                if (cards.length) player.chooseButton(['选择一个‘巨剑’', cards], true);
                                                else event.finish();
                                            }
                                            else event.finish();
                                            'step 6'
                                            if (result.links && result.bool) {
                                                player.gain(result.links, 'gain2').gaintag.add('nianshoumrfz2');
                                            }
                                            'step 7'
                                            if (result.cards) {
                                                var cards3 = player.getCards('h', function (card) {
                                                    return card.hasGaintag('nianshoumrfz2');
                                                });
                                                event.target.addToExpansion(cards3, event.target, 'give').gaintag.add('nianshoumrfz');
                                                player.logSkill('nianshoumrfz');
                                            }
                                        },
                                    },
                                    eff1: {
                                        trigger: {
                                            player: ["loseAfter", "addToExpansionAfter", "cardsGotoSpecialAfter", 'loseAsyncAfter'],
                                        },
                                        filter: function (event, player, name) {
                                            if (event.name == 'lose' || event.name == 'loseAsync') return event.getlx !== false && event.toStorage == true;
                                            if (event.name == 'cardGotoSpecial') return !event.notrigger;
                                            return true;
                                        },
                                        direct: true,
                                        charlotte: true,
                                        content: function () {
                                            for (var i = 0; i < player.getExpansions('nianshoumrfz').length; i++) {
                                                var names = player.getExpansions('nianshoumrfz')[i].name + '_skill';
                                                player.addSkill(names);
                                            }
                                        },
                                    },
                                    eff2: {
                                        trigger: {
                                            player: "gainAfter",
                                        },
                                        filter: function (event, player) {
                                            return event.fromStorage == true || game.hasPlayer2(function (current) {
                                                var evt = event.getl(current);
                                                return evt && evt.xs && evt.xs.length > 0;
                                            });
                                        },
                                        direct: true,
                                        charlotte: true,
                                        content: function () {
                                            for (var i = 0; i < trigger.cards.length; i++) {
                                                var names = trigger.cards[i].name + '_skill';
                                                if (player.hasSkill(names)) player.removeSkill(names);
                                            }
                                        },
                                    },
                                    eff3: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return event.player.getExpansions('nianshoumrfz').length > 0 && event.player != player;
                                        },
                                        content: function () {
                                            var target = trigger.player;
                                            trigger.num -= target.getExpansions('nianshoumrfz').length;
                                            player.logSkill('nianshoumrfz', target);
                                        },
                                    },
                                    eff4: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'damageBegin1' },
                                        usable: 1,
                                        filter: function (event, player) {
                                            if (event.source == undefined) return false;
                                            return event.source.getExpansions('nianshoumrfz').length > 0;
                                        },
                                        content: function () {
                                            trigger.num -= trigger.source.getExpansions('nianshoumrfz').length;
                                            player.logSkill('nianshoumrfz', trigger.source);
                                        },
                                    },
                                    eff5: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.getExpansions('nianshoumrfz').length > 0 && current != player;
                                            });
                                        },
                                        content: function () {
                                            var list = ['e', 'h']
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i].getExpansions('nianshoumrfz').length > 0 && game.players[i] != player) {
                                                    for (var j = 0; j < 2; j++) {
                                                        if (game.players[i].countCards(list[j]) > 0) {
                                                            player.gain(game.players[i].getCards(list[j]).randomGet(), 'give');
                                                            game.log(player, '获得了', game.players[i], '的' + get.translation(game.players[i].getCards(list[j]).randomGet()));
                                                        }
                                                    }
                                                    player.gain(game.players[i].getExpansions('nianshoumrfz'), 'give', 'log');

                                                    player.logSkill('nianshoumrfz', game.players[i]);
                                                }
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    order: 13,
                                    result: {
                                        player: 1,
                                    },
                                },
                            },
                            zhangyimrfz: {
                                charlotte: true,
                                mod: {
                                    attackRange: function (player, num) {
                                        if (player.getExpansions('nianshoumrfz').length) return num + player.getExpansions('nianshoumrfz').length;
                                    },
                                },
                            },
                            chongjimrfz: {
                                audio: 2,
                                trigger: { source: 'damageEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    if (event.parent.name == '_lianhuan' || event.parent.name == '_lianhuan2') return false;
                                    if (event.card && event.card.name != 'sha') return false;
                                    if (game.countPlayer() <= 2) return false;
                                    return event.getParent().name != 'chongjimrfz' && event.num > 0;
                                },
                                content: function () {
                                    'step 0'
                                    var targets = trigger.player;
                                    player.chooseTarget(get.prompt('chongjimrfz'), '你可以对' + get.translation(targets) + '的上家或下家造成一点伤害', function (card, player, target) {
                                        return (target == targets.getNext() || target == targets.getPrevious()) && target != player;
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    if (result.bool && result.targets) {
                                        result.targets[0].damage();
                                        if (trigger.num > 0) result.targets[0].chooseToDiscard('h', true, get.prompt('chongjimrfz'), '请选择弃置' + trigger.num + '张手牌', trigger.num);
                                        player.logSkill('chongjimrfz', result.targets[0]);
                                    }
                                },
                            },
                            //水陈 假日威龙陈
                            yuyunmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseEnd' },
                                direct: true,
                                content: function () {
                                    var num = player.getCardUsable('sha');
                                    var history = player.getHistory('useCard');
                                    'step 0'
                                    for (var i = 0; i < history.length; i++) {
                                        if (history[i].card.name == 'sha') {
                                            player.removeMark('yuyunmrfz', player.countMark('yuyunmrfz'));
                                            event.finish();
                                        }
                                    }
                                    'step 1'
                                    player.chooseBool('是否发动【余韵】？');
                                    'step 2'
                                    if (result.bool) {
                                        player.draw(Math.min(num, 3));
                                        player.logSkill('yuyunmrfz');
                                    }
                                    else event.finish();
                                    'step 3'
                                    player.removeMark('yuyunmrfz', player.countMark('yuyunmrfz'));
                                    player.addMark('yuyunmrfz', Math.min(num, 2));
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num += player.countMark('yuyunmrfz');
                                    }
                                },
                            },
                            shuiqiangmrfz: {
                                audio: 2,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    if (event.card.name != 'sha') return false;
                                    return game.hasPlayer(function (current) {
                                        return !event.targets.contains(current) && player.canUse(event.card, current) && player.inRange(current);
                                    });
                                },
                                direct: true,
                                content: function () {
                                    var list = []
                                    'step 0'
                                    player.chooseTarget([1, Infinity], get.prompt('shuiqiangmrfz'), '为' + get.translation(trigger.card) + '增加任意个目标', function (card, player, target) {
                                        return !_status.event.sourcex.contains(target) && player.inRange(target) && player.canUse(_status.event.card, target);
                                    }).set('sourcex', trigger.targets).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, _status.event.card, player, player);
                                    }).set('card', trigger.card).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine() && !event.isOnline()) game.delayx();
                                        for (var i = 0; i < result.targets.length; i++) {
                                            trigger.targets.push(result.targets[i]);
                                            player.line(result.targets[i]);
                                        }
                                        player.logSkill('shuiqiangmrfz');
                                    }
                                    else {
                                        event.finish();
                                    }
                                },
                            },
                            jianfengmrfz: {
                                audio: 2,
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.judge(function (card) {
                                        var suit = get.suit(card);
                                        if (suit == 'spade') return -4;
                                        return 0;
                                    }).judge2 = function (result) {
                                        return result.bool == false ? true : false;
                                    };
                                    'step 1'
                                    if (result.suit == 'spade') {
                                        var list = []
                                        for (var i = 0; i < trigger.cards.length; i++) {
                                            if (get.position(trigger.cards[i], true) == 'o') {
                                                list.push(trigger.cards[i]);
                                            }
                                        }
                                        if (trigger.addCount !== false) {
                                            trigger.addCount = false;
                                            trigger.player.getStat().card.sha--;
                                        }
                                        player.gain(list, 'gain2');
                                    }
                                },
                            },
                            //水月
                            liqunmrfz: {
                                audio: 2,
                                trigger: { target: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (event.player == player) return false;
                                    return event.card.length < 2 || get.distance(player, event.target) < 2;
                                },
                                usable: 1,
                                check: function (event, player, target) {
                                    if (event.card.name == 'wugu' || event.card.name == 'tao') return false;
                                    if (get.attitude(player, target) > 2 && event.card.name == 'sha') return false;
                                    return true;
                                },
                                content: function () {
                                    trigger.getParent().excluded.add(player);
                                },
                            },
                            chuangshangmrfz: {
                                audio: 2,
                                trigger: { source: 'damageEnd' },
                                filter: function (event, player) {
                                    if (event.getParent().name == 'chuangshangmrfz') return false;
                                    if (event.player == player) return false;
                                    return event.player.isMinHp() || game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current) && (current.maxHp / 2) >= current.hp;
                                    });
                                },
                                content: function () {
                                    var target = trigger.player;
                                    'step 0'
                                    var str1 = '摸两张牌', str2 = '对' + get.translation(target) + '造成一点伤害';
                                    if (target.isMinHp() && game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current) && (current.maxHp / 2) >= current.hp;
                                    })) {
                                        player.chooseControl(str1, str2).set('prompt', get.prompt('chuangshangmrfz')).set('prompt2', '请选择一项').set('ai', function (player) {
                                            if (player.hp < 2 && player.countCards('h') < 3) return 0;
                                            return 1;
                                        });
                                    }
                                    else {
                                        player.draw();
                                        event.finish();
                                    }
                                    'step 1'
                                    if (result.index == 0) {
                                        player.draw(2);
                                    }
                                    else target.damage();
                                },
                            },
                            jinghuamrfz: {
                                audio: 2,
                                trigger: { player: 'useCardToPlayered' },
                                usable: 1,
                                filter: function (event, player) {
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    if (event.card.name != 'sha') return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && current != event.target;
                                    });
                                },
                                check: function (event, player) {
                                    if (player.hp < 3) return false;
                                    if (!game.hasPlayer(function (current) {
                                        return current != event.target && current != player && current != event.player && get.attitude(player, current) < 2;
                                    })) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(true, [1, 2], get.prompt('jinghuamrfz'), '为' + get.translation(trigger.card) + '增加至多两个目标', function (card, player, target) {
                                        return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target, false);
                                    }).set('sourcex', trigger.targets).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, _status.event.card, player, player);
                                    }).set('card', trigger.card).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        player.addTempSkill('jinghuamrfz2', { player: 'useCardAfter' });
                                        for (var i = 0; i < result.targets.length; i++) {
                                            trigger.targets.push(result.targets[i]);
                                            player.line(result.targets[i]);
                                        }
                                    }
                                },
                            },
                            jinghuamrfz2: {
                                charlotte: true,
                                direct: true,
                                trigger: { player: 'useCardEnd' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return player.getHistory('sourceDamage', function (evt) {
                                        return evt.card == event.card;
                                    }).length <= 2;
                                },
                                content: function () {
                                    player.loseHp();
                                },
                            },
                            //仇白
                            ruximrfz: {
                                audio: 4,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.target == player) return false;
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    return event.card.name == 'sha';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 2;
                                },
                                subfrequent: ['link'],
                                content: function () {
                                    'step 0'
                                    player.judge(function (card) {
                                        var suit = get.suit(card);
                                        if (suit == 'spade') return -2;
                                        if (suit == 'club') return -4;
                                        return 0;
                                    }).judge2 = function (result) {
                                        return result.bool == false ? true : false;
                                    };
                                    'step 1'
                                    for (var i = 0; i < trigger.targets.length; i++) {
                                        var target = trigger.targets[i];
                                        if (result.color == 'black') {
                                            target.link(true);
                                        }
                                        if (result.suit == 'club') {
                                            player.addTempSkill('ruximrfz2', 'phaseEnd');
                                            player.addMark('ruximrfz2', false);
                                        }
                                    }
                                },
                                group: 'ruximrfz_link',
                                subSkill: {
                                    link: {
                                        trigger: { player: 'useCardToPlayer' },
                                        filter: function (event, player) {
                                            if (event.target == player) return false;
                                            if (event.targets.length > 1) return false;
                                            return event.target.isLinked() || event.target.countCards('j') > 0;
                                        },
                                        frequent: true,
                                        content: function () {
                                            'step 0'
                                            if (trigger.targets[0].countCards('hej') == 0) {
                                                event.finish();
                                                player.draw();
                                            }
                                            'step 1'
                                            player.chooseBool(get.prompt('ruximrfz'), '【入隙】:是否摸一张牌</br>选择取消则为弃置' + get.translation(trigger.targets[0]) + '的区域内一张牌').set('ai', function (player) {
                                                var att = get.attitude(player, _status.event.target), target = _status.event.target, num = Math.random();
                                                if (att > 2 && target.countCards('j') > 0) return false;
                                                return num > 0.5 ? true : false;
                                            });
                                            'step 2'
                                            if (result.bool) {
                                                player.draw();
                                            }
                                            else {
                                                player.discardPlayerCard(trigger.targets[0], 'hej', true);
                                                player.line(trigger.targets[0]);
                                            }
                                            player.logSkill('ruximrfz');
                                        },
                                    },
                                },
                            },
                            ruximrfz2: {
                                charlotte: true,
                                onremove: true,
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('ruximrfz2');
                                    },
                                },
                            },
                            wenxuemrfz: {
                                audio: 4,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return game.hasPlayer(function (current) {
                                        return !event.targets.contains(current) && player.canUse(event.card, current) && player.inRange(current) && (current.isLinked() || current.countCards('j') > 0);
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget([1, 2], get.prompt('wenxuemrfz'), '为' + get.translation(trigger.card) + '增加至多两个目标', function (card, player, target) {
                                        return !_status.event.sourcex.contains(target) && player.inRange(target) && player.canUse(_status.event.card, target) && (target.isLinked() || target.countCards('j') > 0);
                                    }).set('sourcex', trigger.targets).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, _status.event.card, player, player);
                                    }).set('card', trigger.card).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        for (var i = 0; i < result.targets.length; i++) {
                                            player.logSkill('wenxuemrfz', result.targets[i]);
                                            trigger.targets.push(result.targets[i]);
                                        }
                                    }
                                },
                                group: ['wenxuemrfz_sha', 'wenxuemrfz_count', 'wenxuemrfz_clear'],
                                subSkill: {
                                    sha: {
                                        direct: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            if (event.card.name != 'sha') return false;
                                            if (!game.hasPlayer(function (current) {
                                                return current != player && player.inRange(current) && player.canUse('sha', current);
                                            })) return false;
                                            var history = player.getHistory('useCard', function (evt) {
                                                return evt.card.name == 'sha' && evt.cards && evt.cards.length == 1;
                                            });
                                            return history.length % 2 == 0 && event.cards && event.cards.length == 1;
                                        },
                                        content: function () {
                                            'step 0'
                                            //event.num=Math.floor(player.countMark('wenxuemrfz_count')/2);
                                            var history = player.getHistory('useCard', function (evt) {
                                                return evt.card.name == 'sha' && evt.cards && evt.cards.length == 1;
                                            });
                                            event.num = history.length / 2;
                                            player.chooseBool(get.prompt('wenxuemrfz'), '可以使用' + event.num + '张【杀】');
                                            'step 1'
                                            if (result.bool) {
                                                player.chooseUseTarget({
                                                    name: 'sha',
                                                    isCard: true,
                                                }, '请选择【杀】的目标(还可使用' + event.num + '张【杀】)', false);
                                                event.num--;
                                                player.logSkill('wenxuemrfz');
                                                if (event.num > 0) event.redo();
                                            }
                                        },
                                    },
                                    count: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            if (player == _status.currentPhase) return false;
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.addMark('wenxuemrfz_count', false);
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeAllmark('wenxuemrfz_count', false);
                                        },
                                    },
                                },
                            },
                            //归溟幽灵鲨
                            yongwomrfz: {
                                audio: 2,
                                trigger: { player: 'dying' },
                                forced: true,
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        if (player.isTurnedOver()) return '复活不可用';
                                        if (!player.storage.yongwomrfz2 && !player.isTurnedOver()) return '复活未使用';
                                        return '复活已使用';
                                    },
                                },
                                filter: function (event, player) {
                                    if (player.storage.yongwomrfz2) return false;
                                    return !player.isTurnedOver();
                                },
                                content: function () {
                                    player.storage.yongwomrfz2 = true;
                                    player.turnOver();
                                    if (player.hp <= 0) player.recover(1 - player.hp);
                                },
                                mod: {
                                    globalTo: function (source, player, distance) {
                                        if (player.isTurnedOver()) return distance + 1;
                                    },
                                },
                                group: ['yongwomrfz_discard', 'yongwomrfz_change1', 'yongwomrfz_change2', 'yongwomrfz2'],
                                subSkill: {
                                    discard: {
                                        trigger: { global: 'useCardAfter' },
                                        filter: function (event, player) {
                                            if (!player.isTurnedOver()) return false;
                                            if (event.player == player) return false;
                                            if (event.player.countCards('he') == 0) return false;
                                            return event.player == player.getNext() || event.player == player.getPrevious();
                                        },
                                        direct: true,
                                        content: function () {
                                            var target = trigger.player;
                                            'step 0'
                                            target.chooseToDiscard('he', true, '【拥我】:请弃置一张牌');
                                            target.addMark('yongwomrfz2', false);
                                            'step 1'
                                            if (target.countMark('yongwomrfz2') >= 2) {
                                                target.removeMark('yongwomrfz2', 2, false);
                                                target.damage();
                                                player.logSkill('yongwomrfz', target);
                                            }
                                            else event.finish();
                                            'step 2'
                                            player.chooseBool('【拥我】:是否翻面').set('ai', function () {
                                                var player = _status.event.player;
                                                if (player.hp < 2 && !player.storage.yongwomrfz2) return true;
                                                if (get.attitude(player, player.getNext()) > 2 || get.attitude(player, player.getPrevious()) > 2) return true;
                                                return false;
                                            });
                                            'step 3'
                                            if (result.bool) {
                                                player.turnOver();
                                                player.logSkill('yongwomrfz');
                                            }
                                        },
                                    },
                                    change1: {
                                        direct: true,
                                        trigger: { player: 'turnOverAfter' },
                                        filter: function (event, player) {
                                            return !player.isTurnedOver();
                                        },
                                        content: function () {
                                            player.draw(2);
                                            player.logSkill('yongwomrfz');
                                        },
                                    },
                                    change2: {
                                        direct: true,
                                        trigger: { global: 'phaseEnd' },
                                        filter: function (event, player) {
                                            if (player.isTurnedOver() || !event.player.isAlive()) return false;
                                            return player.getStat('damage') > 0 || player.getHistory('damage').length > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseBool('【拥我】:是否翻面').set('ai', function () {
                                                var num = 0.2, player = _status.event.player;
                                                if (player.countCards('h') > 2) num + 0.3;
                                                if (player.hp > 1) num + 0.1;
                                                if (get.attitude(player, player.getNext()) < 2 || get.attitude(player, player.getPrevious()) < 2) num + 0.3;
                                                if (player.isTurnedOver()) num + 0.3;
                                                return Math.random() + num > 0.6;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                player.turnOver();
                                                player.logSkill('yongwomrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            yongwomrfz2: {
                                silent: true,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) { return player.storage.yongwomrfz2 },
                                content: function () { player.storage.yongwomrfz2 = false; },
                            },
                            //白铁
                            jigongmrfz: {
                                derivation: ['jigongmrfz_card'],
                                audio: 2,
                                trigger: {
                                    global: 'phaseBefore',
                                    player: 'enterGame',
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    'step 0'
                                    var next = player.chooseControl().set('choiceList', [
                                        '白铁多功能平台-攻击型：当你造成至少两点伤害时，你可以令此伤害+1。',
                                        '白铁多功能平台-支援型：锁定技，弃牌阶段开始时，你摸一张牌并额外执行一个出牌阶段。',
                                        '铁钳号原型机：出牌阶段你可以弃置X张带有伤害类标签的牌，然后选择一名你攻击范围内的其他角色，对其造成一点伤害（X=此技能本回合使用数+1）。',
                                    ]).set('ai', function () {
                                        return [0, 1, 2].randomGet();
                                    });
                                    next.set('prompt', get.prompt('jigongmrfz')).set('prompt2', '请选择一项');
                                    'step 1'
                                    var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3']
                                    for (var i = 0; i < 3; i++) {
                                        if (result.index == i) {
                                            event.card = game.createCard(list[i], ['heart', 'spade'].randomGet(), [1, 2, 6, 8].randomGet());
                                            player.gain(event.card, 'gain2');
                                            event.card2 = list[i];
                                        }
                                    }
                                    'step 2'
                                    if (player.getCards('h').contains(card) && get.name(card, player) == event.card2) player.chooseUseTarget(card, 'nopopup', true);
                                },
                                group: ['jigongmrfz_gcard', 'jigongmrfz_zb', 'jigongmrfz_discard'],
                                subSkill: {
                                    gcard: {
                                        direct: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                            for (var i = 0; i < 3; i++) {
                                                if (player.countCards('e', list[i])) return true;
                                            }
                                        },
                                        firstDo: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('你可以将【支援装备】移动至一名其他角色的装备区', function (card, player, target) {
                                                return target != player && !target.getEquip(5) && !target.isDisabled(5);
                                            }).ai = function (target) {
                                                return get.attitude(player, target);
                                            };
                                            'step 1'
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                            if (result.bool) {
                                                for (var i = 0; i < 3; i++) {
                                                    if (player.countCards('e', list[i])) {
                                                        event.card = player.getCards('e', function (card) {
                                                            return card.name == list[i];
                                                        });
                                                        player.lose(event.card, ui.ordering, 'visible');
                                                        player.line(result.targets[0]);
                                                        event.target = result.targets[0];
                                                    }
                                                }
                                            }
                                            else event.finish();
                                            'step 2'
                                            event.target.equip(event.card[0]);
                                            player.logSkill('jigongmrfz', event.target);
                                        },
                                    },
                                    zb: {
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                            for (var i = 0; i < 3; i++) {
                                                if (player.countCards('e', list[i])) return false;
                                            }
                                            return true;
                                        },
                                        content: function () {
                                            'step 0'
                                            var next = player.chooseControl().set('choiceList', [
                                                '白铁多功能平台-攻击型：当你造成至少两点伤害时，你可以令此伤害+1。',
                                                '白铁多功能平台-支援型：锁定技，弃牌阶段开始时，你额外执行一个出牌阶段和摸牌阶段。',
                                                '铁钳号原型机：出牌阶段你可以弃置X张带有伤害类标签的牌，然后选择一名你攻击范围内的其他角色，对其造成一点伤害（X=此技能本回合使用数+1）。',
                                            ]).set('ai', function () {
                                                return [0, 1, 2].randomGet();
                                            });
                                            next.set('prompt', get.prompt('jigongmrfz')).set('prompt2', '请选择一项');
                                            'step 1'
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3']
                                            for (var i = 0; i < 3; i++) {
                                                if (result.index == i) {
                                                    event.card = game.createCard(list[i], ['heart', 'spade'].randomGet(), [1, 2, 6, 8].randomGet());
                                                    player.gain(event.card, 'gain2');
                                                    event.card2 = list[i];
                                                }
                                            }
                                            'step 2'
                                            if (player.getCards('h').contains(card) && get.name(card, player) == event.card2) player.chooseUseTarget(card, 'nopopup', true);
                                            player.logSkill('jigongmrfz');
                                        },
                                    },
                                    discard: {
                                        direct: true,
                                        trigger: { global: 'phaseEnd' },
                                        filter: function (event, player) {
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                            for (var i = 0; i < 3; i++) {
                                                if (event.player.countCards('e', list[i])) return true;
                                            }
                                        },
                                        content: function () {
                                            'step 0'
                                            var list = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                            for (var i = 0; i < 3; i++) {
                                                if (trigger.player.countCards('e', list[i])) {
                                                    event.card = trigger.player.getCards('e', function (card) {
                                                        return card.name == list[i];
                                                    });
                                                    trigger.player.discard(event.card);
                                                }
                                            }
                                        },
                                    },
                                }
                            },
                            jiefeimrfz: {
                                audio: 2,
                                trigger: { global: ['loseEnd', 'cardsDiscardEnd'] },
                                direct: true,
                                popup: false,
                                filter: function (event, player) {
                                    var cs = event.cards;
                                    for (var i = 0; i < cs.length; i++) {
                                        if (cs[i].name.indexOf('baitiemrfzcard') == 0 && get.position(cs[i], true) == 'd') return true;
                                    }
                                    return false;
                                },
                                forceDie: true,
                                content: function () {
                                    'step 0'
                                    if (!_status.jigongmrfz) _status.jigongmrfz = {};
                                    var list = [];
                                    var list2 = ['baitiemrfzcard1', 'baitiemrfzcard2', 'baitiemrfzcard3'];
                                    var cs = trigger.cards;
                                    for (var i = 0; i < cs.length; i++) {
                                        if (cs[i].name.indexOf('baitiemrfzcard') == 0 && get.position(cs[i], true) == 'd') {
                                            _status.jigongmrfz[cs[i].name] = false;
                                            list.push(cs[i]);
                                        }
                                        for (var j = 0; j < 3; j++) {
                                            if (cs[i].name == list2[j]) event.card = list2[j];
                                        }
                                    }
                                    game.log(list, '已被移出游戏');
                                    game.cardsGotoSpecial(list);
                                    event.card = game.createCard(list[0].name, ['heart', 'spade'].randomGet(), [1, 2, 6, 8].randomGet());
                                    player.popup('jigongmrfz');
                                    'step 1'
                                    player.chooseBool(get.prompt('jigongmrfz'));
                                    'step 2'
                                    if (result.bool) {
                                        player.logSkill('jiefeimrfz');
                                        player.judge(function (card) {
                                            var color = get.color(card);
                                            if (color == 'red') return -4;
                                            return 0;
                                        }).judge2 = function (result) {
                                            return result.bool == false ? true : false;
                                        };
                                    }
                                    else event.finish();
                                    'step 3'
                                    if (result.color == 'red') {
                                        player.draw();
                                        player.chooseTarget('你可以令一名角色装备【支援装备】', function (card, player, target) {
                                            return !target.getEquip(5) && !target.isDisabled(5);
                                        }).ai = function (target) {
                                            return get.attitude(player, target);
                                        };
                                    }
                                    else event.finish();
                                    'step 4'
                                    if (result.bool) {
                                        var cards = game.createCard(event.card, ['heart', 'spade'].randomGet(), [1, 2, 6, 8].randomGet())
                                        var target = result.targets[0];
                                        target.gain(cards, 'gain2');
                                        target.equip(cards);
                                        player.logSkill('jiefeimrfz');
                                    }
                                },
                            },
                            //推进之王 维纳
                            yuechuimrfz: {
                                audio: 2,
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                frequent: true,
                                usable: 2,
                                content: function () {
                                    var num = player.countMark('yuechuimrfz');
                                    player.draw(num + 1);
                                },
                                group: 'yuechuimrfz_add',
                                subSkill: {
                                    add: {
                                        direct: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            if (event.getParent().type != 'card') return false;
                                            if (event.parent.name == '_lianhuan' || event.parent.name == '_lianhuan2') return false;
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            'step 0'
                                            var str = '<a style="cursor: pointer;font-weight: bold;"><font color=#ed7e78>第一张牌必须选装备牌</font></a>'
                                            if (player.countMark('yuechuimrfz') < 2 && player.countCards('he') > player.countMark('yuechuimrfz') + 2 && player.countCards('he', function (card) { return get.type(card) == 'equip' }) > 0) {
                                                player.chooseToDiscard('he', get.prompt('yuechuimrfz'), '你可以弃置' + (Math.min(3, player.countMark('yuechuimrfz') + 2)) + '张类型不同的牌，' + str, (Math.min(3, player.countMark('yuechuimrfz') + 2)), function (card, player) {
                                                    if (ui.selected.cards.length == 0) return true;
                                                    for (var i = 0; i < ui.selected.cards.length; i++) {
                                                        if (get.type(ui.selected.cards[0], 'trick') != 'equip') return false;
                                                        if (get.type(ui.selected.cards[i], 'trick') == get.type(card, 'trick')) return false;
                                                    }
                                                    return true;
                                                }).set('complexCard', true).set('ai', function (card) {
                                                    return 10 - get.value(card);
                                                });
                                            }
                                            else event.goto(2);
                                            'step 1'
                                            if (result.cards) {
                                                player.addMark('yuechuimrfz', false);
                                                player.logSkill('yuechuimrfz');
                                            }
                                            'step 2'
                                            if (!game.hasPlayer(function (current) {
                                                return current != player && get.distance(current, player) <= 1 && current != trigger.player;
                                            })) event.finish();
                                            else player.chooseTarget(get.prompt('yuechuimrfz'), '你可以对一名与你距离为1且不是受伤角色的其他角色造成一点伤害', function (card, player, target) {
                                                return target != player && get.distance(target, player) <= 1 && target != _status.event.TriPlayer;
                                            }).set('TriPlayer', trigger.player).ai = function (target) {
                                                return -get.attitude(player, target);
                                            };
                                            'step 3'
                                            if (result.bool) {
                                                result.targets[0].damage();
                                                player.logSkill('yuechuimrfz', result.targets[0]);
                                            }
                                        },
                                    },
                                },
                            },
                            fensuimrfz: {
                                audio: 2,
                                trigger: { global: 'dying' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.player != player && get.distance(player, event.player) <= 1;
                                },
                                content: function () {
                                    player.draw();
                                    player.line(trigger.player);
                                },
                            },
                            //伺夜
                            langqunmrfz: {
                                mark: true,
                                marktext: '狼群',
                                intro: {
                                    name: '狼群',
                                    content: '有#个狼',
                                },
                                audio: 4,
                                trigger: {
                                    global: 'phaseBefore',
                                    player: 'enterGame',
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    player.addMark('langqunmrfz', 2);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.hasMark('langqunmrfz')) return num + 1;
                                    },
                                },
                                group: ['langqunmrfz_gainb', 'langqunmrfz_damage', 'langqunmrfz_discard'],
                                subSkill: {
                                    gainb: {
                                        audio: 'langqunmrfz',
                                        trigger: {
                                            player: 'loseAfter',
                                            global: 'loseAsyncAfter',
                                        },
                                        frequent: true,
                                        filter: function (event, player) {
                                            if (event.getlx === false) return false;
                                            if (player.countMark('langqunmrfz') > 2) return false;
                                            return !player.hasSkill('langqunmrfz2');
                                        },
                                        content: function () {
                                            player.addMark('langqunmrfz');
                                            player.addTempSkill('langqunmrfz2');
                                        },
                                    },
                                    damage: {
                                        audio: 'langqunmrfz',
                                        trigger: { target: 'useCardToTargeted' },
                                        filter: function (event, player) {
                                            return player.countMark('langqunmrfz') > 0 && get.tag(event.card, 'damage');
                                        },
                                        prompt: function (event, player) {
                                            return '你可以移去一个‘狼群’标记并令此牌(' + get.translation(event.card) + ')取消你为目标(剩余‘狼群’数:' + player.countMark('langqunmrfz') + ')';
                                        },
                                        content: function () {
                                            trigger.targets.remove(player);
                                            trigger.getParent().triggeredTargets2.remove(player);
                                            trigger.untrigger();
                                            player.removeMark('langqunmrfz');
                                        },
                                    },
                                    discard: {
                                        audio: 'langqunmrfz',
                                        forced: true,
                                        trigger: { player: 'phaseDiscardEnd' },
                                        content: function () {
                                            var cards = [];
                                            game.getGlobalHistory('cardMove', function (evt) {
                                                if (evt.name == 'cardsDiscard') {
                                                    if (evt.getParent('phaseDiscard') == trigger) {
                                                        var moves = evt.cards.filterInD('d');
                                                        cards.addArray(moves);
                                                    }
                                                }
                                                if (evt.name == 'lose') {
                                                    if (evt.type != 'discard' || evt.position != ui.discardPile || evt.getParent('phaseDiscard') != trigger) return;
                                                    var moves = evt.cards.filterInD('d');
                                                    cards.addArray(moves);
                                                }
                                            });
                                            player.draw(Math.floor(cards.length / 2) + 1);
                                        },
                                    },
                                },
                            },
                            langqunmrfz2: {},
                            qunxingmrfz: {
                                marktext: '群仇',
                                intro: {
                                    name: '群仇',
                                    content: '你被狼群盯上了',
                                },
                                audio: 4,
                                trigger: { target: 'useCardToTarget' },
                                filter: function (event, player) {
                                    return event.player != player && event.player.countMark('qunxingmrfz') < 6;
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.player) + '获得一个‘群仇’标记';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 2;
                                },
                                content: function () {
                                    trigger.player.addMark('qunxingmrfz');
                                    player.line(trigger.player);
                                },
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (target.hasMark('qunxingmrfz')) {
                                            return true;
                                        }
                                    },
                                },
                                group: ['qunxingmrfz_damage', 'qunxingmrfz_dirhit'],
                                subSkill: {
                                    damage: {
                                        audio: 'qunxingmrfz',
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.player.hasMark('qunxingmrfz');
                                        },
                                        forced: true,
                                        content: function () {
                                            var target = trigger.player;
                                            player.draw(target.countMark('qunxingmrfz'));
                                            target.removeAllmark('qunxingmrfz');
                                        },
                                    },
                                    dirhit: {
                                        audio: 'qunxingmrfz',
                                        forced: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return event.card && (get.type(event.card) == 'trick' || get.type(event.card) == 'basic' && !['shan', 'tao', 'jiu', 'du'].contains(event.card.name)) && game.hasPlayer(function (current) {
                                                return current != player && current.hasMark('qunxingmrfz');
                                            });
                                        },
                                        content: function () {
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current != player && current.hasMark('qunxingmrfz');
                                            }));
                                            player.line(game.filterPlayer(function (current) {
                                                return current != player && current.hasMark('qunxingmrfz');
                                            }));
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                return arg.target.hasMark('qunxingmrfz');
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            //百炼嘉维尔
                            yixuemrfz: {
                                audio: 2,
                                trigger: { player: 'recoverBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.hasSkill('yixuemrfz2');
                                },
                                content: function () {
                                    trigger.num++;
                                    player.addSkill('yixuemrfz2');
                                },
                            },
                            yixuemrfz2: {
                                silent: true,
                                firstDo: true,
                                charlotte: true,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) {
                                    return player.hasSkill('yixuemrfz2');
                                },
                                content: function () {
                                    player.removeSkill('yixuemrfz2');
                                },
                            },
                            juximrfz: {
                                audio: 2,
                                trigger: { player: "useCardToPlayered" },
                                filter: function (event, player) {
                                    if (event.targets.length > 1) return false;
                                    return event.card.name == 'sha' && event.target.countCards('he') > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var cards = trigger.target.getCards('hej'), list = [], num = 0;
                                    for (var i of cards) {
                                        list.add(get.suit(i, player));
                                    }
                                    for (var i of lib.suit) {
                                        if (list.contains(i)) num++;
                                    }
                                    player.choosePlayerCard(trigger.target, 'he',
                                        [1, Math.min(trigger.target.countCards('he'), num)], (get.prompt('juximrfz', trigger.target) + '(可选' + num + '张牌)')).set('forceAuto', true);
                                    'step 1'
                                    if (result.bool && result.links.length) {
                                        var target = trigger.target;
                                        player.logSkill('juximrfz', target);
                                        player.addToExpansion(result.cards, 'giveAuto', player).gaintag.add('juximrfz2');
                                        player.addSkill('juximrfz2');
                                    }
                                },
                                ai: {
                                    unequip_ai: true,
                                    directHit_ai: true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (get.attitude(player, arg.target) > 0) return false;
                                        if (tag == 'directHit_ai') return arg.target.countCards('h') < 2;
                                        if (arg && arg.name == 'sha' && arg.target.getEquip(2)) return true;
                                        return false;
                                    }
                                },
                            },
                            juximrfz2: {
                                intro: {
                                    markcount: 'expansion',
                                    mark: function (dialog, storage, player) {
                                        var cards = player.getExpansions('juximrfz2');
                                        if (player.isUnderControl(true)) dialog.addAuto(cards);
                                        else return '共有' + get.cnNumber(cards.length) + '张牌';
                                    },
                                },
                                trigger: { player: 'useCardAfter' },
                                forced: true,
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    return player.getExpansions('juximrfz2').length > 0;
                                },
                                content: function () {
                                    var history = player.getHistory('sourceDamage', function (evt) {
                                        return evt.card == trigger.card;
                                    }).length;
                                    var cards = player.getExpansions('juximrfz2');
                                    'step 0'
                                    if (history > 0) player.chooseButton(['你可以至多获得两张牌', cards], [0, Math.min(2, cards.length)], true).set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    else trigger.targets[0].chooseButton(['你可以至多获得两张牌', cards], [0, Math.min(2, cards.length)], true).set('ai', function (button) {
                                        return get.value(button.link, _status.event.player);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        if (history > 0) player.gain(result.links, 'gain2');
                                        else trigger.targets[0].gain(result.links, 'gain2');
                                    }
                                    'step 2'
                                    player.loseToDiscardpile(cards);
                                    player.removeSkill('juximrfz2');
                                },
                            },
                            conghunmrfz: {
                                marktext: '坚韧',
                                intro: {
                                    name: '坚韧',
                                    content: function (event, player) {
                                        if (player.storage.conghunmrfz_lose) return '已有' + player.countMark('conghunmrfz') + '个坚韧标记</br>本轮已发动过【丛魂①】';
                                        return '已有' + player.countMark('conghunmrfz') + '个坚韧标记</br>本轮未发动过【丛魂①】';
                                    },
                                },
                                mark: true,
                                init: function (player) {
                                    player.storage.conghunmrfza = (-10);
                                },
                                firstDo: true,
                                audio: 2,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) {
                                    return !player.hasMark('conghunmrfz') && player.storage.conghunmrfza <= (game.roundNumber - 2);
                                },
                                check: function (event, player) {
                                    return player.hp < 3 || player.countCards('he') < 4 || player.countCards('h') == 0;
                                },
                                content: function () {
                                    player.storage.conghunmrfz_lose = true;
                                    player.storage.conghunmrfza = game.roundNumber;
                                },
                                group: ['conghunmrfz_dam', 'conghunmrfz_rem', 'conghunmrfz_lose'],
                                subSkill: {
                                    dam: {
                                        audio: 'conghunmrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'damageBegin3' },
                                        filter: function (event, player) {
                                            return player.storage.conghunmrfz_lose;
                                        },
                                        content: function () {
                                            trigger.num--;
                                            player.addMark('conghunmrfz');
                                        },
                                    },
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.storage.conghunmrfz_lose && player.storage.conghunmrfza <= (game.roundNumber - 1);
                                        },
                                        content: function () {
                                            player.storage.conghunmrfz_lose = false;
                                        },
                                    },
                                    lose: {
                                        audio: 'conghunmrfza',
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return player.hasMark('conghunmrfz') && player.storage.conghunmrfza <= (game.roundNumber - 1);
                                        },
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            player.loseHp();
                                            player.removeMark('conghunmrfz');
                                        },
                                    },
                                },
                            },
                            conghunmrfza: { audio: 2, },
                            //史尔特尔
                            yujinmrfz: {
                                audio: 2,
                                trigger: { player: 'dying' },
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '余烬',
                                animationColor: 'fire',
                                init: function (player) {
                                    player.storage.yujinmrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.yujinmrfz;
                                },
                                content: function () {
                                    player.storage.yujinmrfz = true;
                                    var next = [player.phaseZhunbei(), player.phaseJudge(), player.phaseDraw(), player.phaseUse(), player.phaseDiscard(), player.phaseJieshu()];
                                    for (var i = 0; i < next.length; i++) {
                                        event.next.remove(next[i]);
                                        trigger.next.push(next[i]);
                                    }
                                },
                                group: 'yujinmrfz_rec',
                                subSkill: {
                                    rec: {
                                        audio: 'huanghunmrfza',
                                        trigger: { player: 'turnOverAfter' },
                                        filter: function (event, player) {
                                            return player.storage.yujinmrfz == true && !player.isTurnedOver();
                                        },
                                        forced: true,
                                        content: function () {
                                            player.storage.yujinmrfz = false;
                                        },
                                    },
                                },
                            },
                            huanghunmrfza: { audio: 2, },
                            huanghunmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                check: function (event, player) {
                                    if (player.countCards('he') < 3) return false;
                                    if (player.countCards('j') > 0 && !player.hasCard('h', function (card) { return card.name == 'wuxie' })) return false;
                                    return player.hasCard('h', function (card) {
                                        return card.name == 'sha';
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', '【黄昏】:你可以至多弃置两张牌，然后增加等量的体力上限', [0, 2]).set('ai', function (card) {
                                        return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.gainMaxHp(result.cards.length);
                                    }
                                    'step 2'
                                    player.addTempSkill('huanghunmrfz_lose');
                                    player.addTempSkill('huanghunmrfz_dam')
                                    player.turnOver();
                                },
                                subSkill: {
                                    lose: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            return get.tag(event.card, 'damage');
                                        },
                                        content: function () {
                                            player.loseMaxHp();
                                        },
                                    },
                                    dam: {
                                        audio: 'huanghunmrfz',
                                        trigger: { source: 'damageBegin' },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            trigger.num++;
                                        },
                                        mod: {
                                            selectTarget: function (card, player, range) {
                                                if (card.name == 'sha' && range[1] != -1) range[1] += 2;
                                            },
                                            attackRange: function (player, num) {
                                                return num += 2;
                                            },
                                        },
                                    },
                                },
                            },
                            mojianmrfz: {
                                audio: 2,
                                trigger: { source: 'damageEnd' },
                                usable: 2,
                                filter: function (event, player) {
                                    return event.nature == 'fire' && player.isPhaseUsing();
                                },
                                content: function () {
                                    player.draw(2);
                                },
                                mod: {
                                    cardnature: function (card, player) {
                                        if (card.nature != 'thunder' && card.name == 'sha') return 'fire';
                                        if (card.nature == 'thunder' && card.name == 'sha') return false;
                                    },
                                },
                            },
                            //新流明
                            fanyuanmrfz: {
                                intro: {
                                    name: '凡人之愿',
                                    content: '“直到灯火明亮”',
                                },
                                audio: 2,
                                trigger: { global: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (get.type(event.card) != 'delay') return false;
                                    return game.hasPlayer(function (current) {
                                        return current.hasMark('fanyuanmrfz');
                                    });
                                },
                                direct: true,
                                content: function () {
                                    player.logSkill('fanyuanmrfz');
                                },
                                global: 'fanyuanmrfz_eff',
                                subSkill: {
                                    eff: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return player.hasMark('fanyuanmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('fanyuanmrfz', false);
                                        },
                                        mod: {
                                            targetEnabled: function (card, player, target) {
                                                if (get.type(card) == 'delay' && target.hasMark('fanyuanmrfz')) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            new_weiguangmrfz: {
                                mark: true,
                                intro: {
                                    name: '灯火不灭',
                                    content: function (event, player) {
                                        return '剩余次数:' + (5 - player.countMark('new_weiguangmrfz'));
                                    },
                                },
                                audio: 4,
                                trigger: { global: ['turnOverAfter', 'linkAfter', 'addJudgeBefore'] },
                                filter: function (event, player) {
                                    if (player.countMark('new_weiguangmrfz') > 4) return false;
                                    if (event.name == 'link') return event.player.isLinked();
                                    if (event.name == 'turnOver') return event.player.isTurnedOver();
                                    return event.name == 'addJudge';
                                },
                                prompt: function (event, player) {
                                    return '是否对' + get.translation(event.player) + '发动【微光】(' + (5 - player.countMark('new_weiguangmrfz')) + '/5)？';
                                },
                                check: function (event, player) {
                                    var att = get.attitude(player, event.player);
                                    if (event.player.hasSkill('xinfu_limu') && att > 2 && event.name == 'addJudge' && event.player.isPhaseUsing()) return false;
                                    if (event.player.hasSkill('xinfu_limu') && att < 0 && event.name == 'addJudge' && event.player.isPhaseUsing()) return true;
                                    return att > 2;
                                },
                                content: function () {
                                    var target = trigger.player;
                                    'step 0'
                                    player.addMark('new_weiguangmrfz', false);
                                    if (!target.hasMark('fanyuanmrfz')) target.addMark('fanyuanmrfz', false);
                                    'step 1'
                                    var num = 3;
                                    if (target.isLinked()) {
                                        target.link(false);
                                        num--;
                                    }
                                    if (target.isTurnedOver()) {
                                        target.turnOver(false);
                                        num--;
                                    }
                                    if (trigger.name == 'addJudge' || target.countCards('j') > 0) {
                                        if (trigger.name == 'addJudge') {
                                            trigger.cancel();
                                            var owner = get.owner(trigger.card);
                                            if (owner && owner.getCards('hej').contains(trigger.card)) owner.lose(trigger.card, ui.discardPile);
                                            else game.cardsDiscard(trigger.card);
                                            game.log(trigger.card, '进入了弃牌堆');
                                        }
                                        target.chooseToDiscard(true, 'j', target.countCards('j'));
                                        num--;
                                    }
                                    target.draw(num);
                                },
                                group: 'new_weiguangmrfz_rem',
                                subSkill: {
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.countMark('new_weiguangmrfz') > 0;
                                        },
                                        content: function () {
                                            player.removeMark('new_weiguangmrfz', player.countMark('new_weiguangmrfz'), false);
                                        },
                                    },
                                },
                            },
                            yingjimrfz: {
                                audio: 2,
                                trigger: { global: 'useCardToTarget' },
                                filter: function (event, player) {
                                    if (event.target == player) return false;
                                    if (event.targets.length > 1) return false;
                                    return get.type(event.card) == 'delay' && !player.hasMark('yingjimrfz');
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.target) + '回复一点体力并摸一张牌';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) > 2;
                                },
                                content: function () {
                                    trigger.targets[0].recover();
                                    trigger.targets[0].draw();
                                    player.addMark('yingjimrfz', false);
                                },
                                group: 'yingjimrfz_rem',
                                subSkill: {
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return player.hasMark('yingjimrfz');
                                        },
                                        content: function () {
                                            player.removeMark('yingjimrfz', false);
                                        },
                                    },
                                },
                            },
                            //林
                            yinbimrfz: {
                                marktext: '壁',
                                intro: {
                                    name: '壁',
                                    content: '·琉璃壁保护着你</br>·此琉璃壁来源【荫蔽】',
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return !player.storage.liuliemrfz && !player.storage.yinbimrfz;
                                },
                                selectTarget: [1, 2],
                                filterTarget: function (card, player, target) {
                                    return target != player && !target.hasMark('yinbimrfz') && !target.hasMark('zhenzamrfz');
                                },
                                content: function () {
                                    player.storage.yinbimrfz = true;
                                    if (!player.hasSkill('liuliemrfz_rem')) player.addSkill('liuliemrfz_rem');
                                    for (var i = 0; i < targets.length; i++) {
                                        if (!targets[i].hasMark('yinbimrfz')) targets[i].addMark('yinbimrfz');
                                        if (!targets[i].hasSkill('yinbimrfz_rem')) targets[i].addSkill('yinbimrfz_rem');
                                        if (targets[i].hujia < 1) targets[i].changeHujia();
                                    }
                                },
                                subSkill: {
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            if (player.hasMark('yinbimrfz')) {
                                                player.removeMark('yinbimrfz');
                                                player.changeHujia(-1);
                                            }
                                            player.removeSkill('yinbimrfz_rem');
                                        },
                                    },
                                },
                                ai: {
                                    order: 10,
                                    expose: 0.3,
                                    result: {
                                        player: 1,
                                        target: 1,
                                    },
                                },
                            },
                            liuliemrfz: {
                                audio: 2,
                                trigger: { player: 'phaseUseBegin' },
                                check: function (event, player) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && get.attitude(player, current) > 2;
                                    })) return Math.random() > 0.85;
                                    return true;
                                },
                                content: function (event, player) {
                                    player.storage.liuliemrfz = true;
                                    player.addSkill('liuliemrfz_rem');
                                },
                                subSkill: {
                                    rem: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.storage.liuliemrfz = false;
                                            player.storage.yinbimrfz = false;
                                        },
                                    },
                                },
                            },
                            zhenzamrfz: {
                                marktext: '壁',
                                intro: {
                                    name: '壁',
                                    content: function (event, player) {
                                        if (player.storage.liuliemrfz) return '·琉璃壁保护着你</br>·【缜匝②】已修改</br>·【荫蔽】已失效'
                                        return '·琉璃壁保护着你';
                                    },
                                },
                                audio: 6,
                                derivation: ['zhenzamrfz_rewrite'],
                                trigger: { global: 'damageEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    if (!event.player.hasMark('zhenzamrfz') && !event.player.hasMark('yinbimrfz')) return false;
                                    return event.hujia && !event.player.hujia && event.player.isIn() && game.hasPlayer(function (current) {
                                        return current != event.player && event.player.inRangeOf(current);
                                    });
                                },
                                content: function () {
                                    var playerx = trigger.player;
                                    'step 0'
                                    if (playerx.hasMark('zhenzamrfz')) playerx.removeMark('zhenzamrfz');
                                    else playerx.removeMark('yinbimrfz');
                                    playerx.chooseTarget(get.prompt('zhenzamrfz'), '你可以随机获得攻击范围内一名其他角色的' + (player.storage.liuliemrfz ? '两张牌' : '一张牌') + '并对其造成一点伤害', function (card, target, player) {
                                        return target != player && player.inRangeOf(target);
                                    }).ai = function (target) {
                                        var trigger = _status.event.getTrigger();
                                        var player = _status.event.player;
                                        return -get.attitude(trigger.player, target);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0], cardg = [];
                                        for (var i = 0; i < (player.storage.liuliemrfz ? 2 : 1); i++) {
                                            var cardt = target.getCards('he').randomGet();
                                            if (!cardg.contains(cardt)) cardg.push(cardt);
                                            else if (target.countCards('he') > 1) i--;
                                        }
                                        playerx.gain(cardg, target, 'giveAuto', 'bySelf');
                                        target.damage(playerx || 'nosource', 'nocard');
                                        //playerx.gainPlayerCard(target,(player.storage.liuliemrfz?2:1),'he',true)
                                        playerx.logSkill('zhenzamrfz', target);
                                    }
                                },
                                group: ['zhenzamrfz_sta', 'zhenzamrfz_gt', 'zhenzamrfz_gt2', 'zhenzamrfz_time1'],
                                subSkill: {
                                    sta: {
                                        audio: 'zhenzamrfz',
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        forced: true,
                                        locked: false,
                                        filter: function (event, player) {
                                            return (event.name != 'phase' || game.phaseNumber == 0) && player.countCards('h') > 0;
                                        },
                                        content: function () {
                                            player.addMark('zhenzamrfz');
                                            if (player.hujia < 1) player.changeHujia();
                                        },
                                    },
                                    gt: {
                                        audio: 'zhenzamrfz',
                                        forced: true,
                                        trigger: { global: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            if (player.countMark('zhenzamrfz_time1') > 1) return false;
                                            return !player.hasMark('zhenzamrfz') && !player.hasMark('yinbimrfz');
                                        },
                                        content: function () {
                                            player.addMark('zhenzamrfz');
                                            player.addMark('zhenzamrfz_time1', false);
                                            if (player.hujia < 1) player.changeHujia();
                                        },
                                    },
                                    gt2: {
                                        audio: 'zhenzamrfz',
                                        trigger: { global: 'dying' },
                                        filter: function (event, player) {
                                            if (player.countMark('zhenzamrfz_time2') > 1) return false;
                                            if (player.hasMark('zhenzamrfz') || player.hasMark('yinbimrfz')) return false;
                                            return event.player != player && event.parent.name == 'damage' && event.parent.source && event.parent.source == player;
                                        },
                                        content: function () {
                                            player.addMark('zhenzamrfz');
                                            player.addMark('zhenzamrfz_time2', false);
                                            if (player.hujia < 1) player.changeHujia();
                                        },
                                    },
                                    time1: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        firstDo: true,
                                        content: function () {
                                            player.removeMark('zhenzamrfz_time1', player.countMark('zhenzamrfz_time1'), false);
                                            player.removeMark('zhenzamrfz_time2', player.countMark('zhenzamrfz_time2'), false);
                                        },
                                    },
                                    time2: {},
                                },
                                ai: {
                                    threaten: 0.8,
                                },
                            },
                            //多萝西
                            gongzhenmrfz: {
                                audio: 4,
                                forced: true,
                                trigger: { player: ['useCardAfter', 'respond'] },
                                filter: function (event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    if (!event.card.isCard) return false;
                                    return event.cards && event.cards.length == 1;
                                },
                                content: function () {
                                    var cards = player.getCards('h'), list = [], num = 0;
                                    for (var i of cards) {
                                        list.add(get.suit(i, player));
                                    }
                                    if (!list.contains(get.suit(trigger.card, player))) player.draw();
                                    else if (player.countCards('h') > 0) player.chooseToDiscard('h', true, '【共振】:请弃置一张手牌');
                                },
                            },
                            mengxiangmrfz: {
                                audio: 2,
                                trigger: { player: 'drawAfter' },
                                filter: function (event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    return event.getParent().name == 'gongzhenmrfz';
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.addMark('mengxiangmrfz', false);
                                    'step 1'
                                    if (player.countMark('mengxiangmrfz') % 2 == 0 && player.hasMark('mengxiangmrfz')) {
                                        player.addTempSkill('mengxiangmrfz_eff', { player: 'phaseEnd' });
                                        player.removeMark('mengxiangmrfz', 2, false);
                                        if (player.countMark('mengxiangmrfz') > 0) event.redo();
                                    }
                                },
                                group: 'mengxiangmrfz_rem',
                                subSkill: {
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.hasMark('mengxiangmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('mengxiangmrfz', player.countMark('mengxiangmrfz'), false);
                                        },
                                    },
                                    eff: {
                                        audio: 'mengxiangmrfz',
                                        trigger: { player: ['useCard1', 'respond'] },
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            player.removeSkill('mengxiangmrfz_eff');
                                        },
                                        mod: {
                                            cardUsable: function (card) {
                                                return Infinity;
                                            },
                                            targetInRange: function (card) {
                                                return true;
                                            },
                                        },
                                        mark: true,
                                        intro: {
                                            content: '下一张使用或打出的牌无次数和距离限制',
                                        },
                                    },
                                },
                            },
                            paizhangmrfz: {
                                global: 'paizhangmrfz_tag4',
                                audio: 4,
                                trigger: { player: 'loseAfter' },
                                filter: function (event, player) {
                                    if (event.type != 'discard' || event.getlx === false || event.getParent(3).name != 'gongzhenmrfz') return false;
                                    for (var card of event.cards) {
                                        if (get.position(card, true) == 'd') return true;
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    if (trigger.cards.length) {
                                        player.chooseTarget(get.prompt('paizhangmrfz'), '你可以将此牌交给一名其他角色', function (card, target, player) {
                                            return target != player && !target.hasSkill('paizhangmrfz2');
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        result.targets[0].gain(trigger.cards, 'gain2').gaintag = ['paizhangmrfz'];
                                        result.targets[0].addTempSkill('paizhangmrfz2');
                                        player.logSkill('paizhangmrfz');
                                    }
                                    'step 2'
                                    for (i of trigger.cards) {
                                        i.storage.paizhangmrfz = true;
                                    }
                                },
                                group: ['paizhangmrfz_tag1', 'paizhangmrfz_tag2', 'paizhangmrfz_tag3'],
                                subSkill: {
                                    tag1: {
                                        direct: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: {
                                            global: 'useCard',
                                        },
                                        filter: function (event, player) {
                                            for (var i = 0; i < event.cards.length; i++) {
                                                if (event.cards[i].storage && event.cards[i].storage.paizhangmrfz) return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            var cards = trigger.cards[0];
                                            if (trigger.cards.length > 1 || cards.number == undefined) {
                                                trigger.player.damage();
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                            else if (cards.number > 8) {
                                                trigger.player.damage();
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                            else {
                                                trigger.player.chooseToDiscard('he', Math.floor(cards.number / 3), '【排障】:请弃置' + Math.floor(cards.number / 3) + '张牌', true);
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                        },
                                    },
                                    tag2: {
                                        direct: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { target: 'useCardToTarget', player: 'addJudgeBefore' },
                                        filter: function (event, player) {
                                            for (var i = 0; i < event.cards.length; i++) {
                                                if (event.cards[i].storage && event.cards[i].storage.paizhangmrfz) return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            'step 0'
                                            if (trigger.name == 'addJudge') {
                                                trigger.cancel();
                                                var owner = get.owner(trigger.card);
                                                if (owner && owner.getCards('hej').contains(trigger.card)) owner.lose(trigger.card, ui.discardPile);
                                                else game.cardsDiscard(trigger.card);
                                                game.log(trigger.card, '进入了弃牌堆');
                                            }
                                            else trigger.getParent().targets.remove(player);
                                            'step 1'
                                            var trgnext = trigger.player.getNext(), trgprvs = trigger.player.getPrevious();
                                            if (trgnext != player && trgnext.hasCard(function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            }, 'h')) {
                                                var cards = trgnext.getCards('h', function (card) {
                                                    return card.storage && card.storage.paizhangmrfz;
                                                });
                                                player.logSkill('paizhangmrfz', trgnext);
                                                trgnext.damage();
                                                game.cardsDiscard(cards);
                                                game.log(cards, '进入了弃牌堆');
                                            }
                                            if (trgprvs != player && trgprvs.hasCard(function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            }, 'h')) {
                                                var cards = trgprvs.getCards('h', function (card) {
                                                    return card.storage && card.storage.paizhangmrfz;
                                                });
                                                player.logSkill('paizhangmrfz', trgprvs);
                                                trgprvs.damage();
                                                game.cardsDiscard(cards);
                                                game.log(cards, '进入了弃牌堆');
                                            }
                                        },
                                    },
                                    tag3: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { global: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            if (event.player == player) return false;
                                            if (!event.player.hasCard(function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            }, 'h')) return false;
                                            for (var i = 0; i < event.cards.length; i++) {
                                                if (event.cards[i].storage && event.cards[i].storage.paizhangmrfz) return false;
                                            }
                                            for (var i = 0; i < event.targets.length; i++) {
                                                if (event.targets[i] == player) return true;
                                            }
                                        },
                                        content: function () {
                                            'step 0'
                                            var cards = trigger.player.getCards('h', function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            });
                                            event.cards = cards;
                                            game.cardsDiscard(cards);
                                            game.log(cards, '进入了弃牌堆');
                                            player.logSkill('paizhangmrfz', trigger.player);
                                            if (trigger.name == 'addJudge') {
                                                trigger.cancel();
                                                var owner = get.owner(trigger.card);
                                                if (owner && owner.getCards('hej').contains(trigger.card)) owner.lose(trigger.card, ui.discardPile);
                                                else game.cardsDiscard(trigger.card);
                                                game.log(trigger.card, '进入了弃牌堆');
                                            }
                                            else trigger.getParent().targets.remove(player);
                                            'step 1'
                                            if (event.cards.length > 1 || event.cards.number == undefined) {
                                                trigger.player.damage();
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                            else if (event.cards.number > 8) {
                                                trigger.player.damage();
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                            else {
                                                trigger.player.chooseToDiscard('he', Math.floor(cards.number / 3), '【排障】:请弃置' + Math.floor(cards.number / 3) + '张牌', true);
                                                player.logSkill('paizhangmrfz', trigger.player);
                                            }
                                            'step 2'
                                            var trgnext = trigger.player.getNext(), trgprvs = trigger.player.getPrevious();
                                            if (trgnext.hasCard(function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            }, 'h')) {
                                                var cards = trgnext.getCards('h', function (card) {
                                                    return card.storage && card.storage.paizhangmrfz;
                                                });
                                                player.logSkill('paizhangmrfz', trgnext);
                                                trgnext.damage();
                                                game.cardsDiscard(cards);
                                                game.log(cards, '进入了弃牌堆');
                                            }
                                            if (trgprvs.hasCard(function (card) {
                                                return card.storage && card.storage.paizhangmrfz;
                                            }, 'h')) {
                                                var cards = trgprvs.getCards('h', function (card) {
                                                    return card.storage && card.storage.paizhangmrfz;
                                                });
                                                player.logSkill('paizhangmrfz', trgprvs);
                                                trgprvs.damage();
                                                game.cardsDiscard(cards);
                                                game.log(cards, '进入了弃牌堆');
                                            }
                                        },
                                    },
                                    tag4: {
                                        charlotte: true,
                                        mod: {
                                            cardDiscardable: function (card, player) {
                                                if (card.storage && card.storage.paizhangmrfz) return false;
                                            },
                                        },
                                    },
                                },
                            },
                            paizhangmrfz2: { charlotte: true, },
                            //空弦
                            tiexianmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.hujia;
                                },
                                content: function () {
                                    player.draw(3);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (!player.hujia) return num + 1;
                                    },
                                },
                                group: 'tiexianmrfz_draw',
                                subSkill: {
                                    draw: {
                                        audio: 'tiexianmrfz',
                                        forced: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return !player.hujia;
                                        },
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                },
                            },
                            lieshimrfz: {
                                audio: 2,
                                usable: 3,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha' || !event.targets || event.targets.length > 1) return false;
                                    return player.countCards('he') > 0 && game.hasPlayer(function (current) {
                                        return current != player && get.distance(current, event.targets[0]) <= 1 && !event.targets.contains(current);
                                    });
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard('he', get.prompt('lieshimrfz'), '你可以弃置一张牌并选择一名与' + get.translation(trigger.targets[0]) + '距离为1的其他角色视为使用一张【杀】').set('goon', game.hasPlayer(function (current) {
                                        var target = trigger.targets[0];
                                        return get.distance(current, target) == 1 && get.attitude(player, current) < 2;
                                    })).set('ai', function (card) {
                                        if (_status.event.goon) return 6 - get.value(card);
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.cards) {
                                        player.chooseTarget(true, '请选择一名与' + get.translation(trigger.targets[0]) + '距离为1的一名其他角色', function (card, player, target) {
                                            var evt = _status.event.getTrigger();
                                            return target != player && target != evt.targets[0] && get.distance(evt.targets[0], target) <= 1 && lib.filter.targetEnabled2(evt.card, player, target);
                                        }).ai = function (target) {
                                            return -get.attitude(player, target);
                                        };
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.bool) {
                                        player.useCard({ name: 'sha', isCard: true }, result.targets[0]);
                                        player.logSkill('lieshimrfz');
                                    }
                                },
                            },
                            //麒麟夜刀
                            guirenmrfz: {
                                audio: 2,
                                trigger: { player: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    if (player.getHandcardLimit() == 0) return false;
                                    return event.card.name == 'sha';
                                },
                                prompt: function (event, player) {
                                    return '你可以令此【杀】额外结算一次，然后本回合的手牌上限-1。(当前手牌上限:' + player.getHandcardLimit() + ')'
                                },
                                content: function () {
                                    trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                    trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                    if (!player.hasSkill('guirenmrfz2')) player.addTempSkill('guirenmrfz2');
                                    if (!player.hasSkill('guirenmrfz_lose')) player.addTempSkill('guirenmrfz_lose');
                                    player.storage.guirenmrfz2++;
                                },
                                subSkill: {
                                    lose: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        content: function () {
                                            player.removeSkill('guirenmrfz');
                                            player.addSkill('guiqiangmrfz');
                                        },
                                    },
                                },
                            },
                            guirenmrfz2: {
                                silent: true,
                                charlotte: true,
                                firstDo: true,
                                trigger: { player: 'phaseAfter' },
                                init: function (player) {
                                    player.storage.guirenmrfz2 = 0;
                                },
                                content: function () {
                                    player.storage.guirenmrfz2 = 0;
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num - player.storage.guirenmrfz2;
                                    }
                                },
                            },
                            guiqiangmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    player.drawTo(Math.min(player.maxHp, 4));
                                    player.chooseToDiscard(get.prompt('guiqiangmrfz'), '你可以弃置一张牌并失去此技能，然后获得【鬼人】', 'he').set('ai', function (card) {
                                        return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.cards) {
                                        player.removeSkill('guiqiangmrfz');
                                        player.addSkill('guirenmrfz');
                                    }
                                },
                            },
                            luanwumrfz: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                derivation: ['guiqiangmrfz', 'guirenmrfz'],
                                check: function (event, player) {
                                    if (player.countCards('h', function (card) {
                                        return get.type2(card) == 'trick' || get.tag(card, 'damage');
                                    }) > 2) return false;
                                    if (player.getHandcardLimit() > 2) return false;
                                    return ame.hasPlayer(function (current) {
                                        return current != player && player.inRange(current) && get.attitude(player.current) < 0;
                                    });
                                },
                                filter: function (event, player) {
                                    if (!game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current);
                                    })) return false;
                                    return player.hasSkill('guirenmrfz');
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(true, '【乱舞】:请选择一名其他角色，视为对其使用一张结算三次的【杀】', function (card, player, target) {
                                        return target != player && player.inRange(target);
                                    }).ai = function (target) {
                                        return -get.attitude(player, target);
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        player.addTempSkill('luanwumrfza', { player: 'shaAfter' });
                                        player.useCard({ name: 'sha', isCard: true }, result.targets[0]);
                                    }
                                    'step 2'
                                    player.skip('phaseUse');
                                    player.skip('phaseDraw');
                                    player.skip('phaseJudge');
                                    if (!player.hasSkill('luanwumrfz_dam')) player.addSkill('luanwumrfz_dam');
                                },
                                group: 'luanwumrfz_add',
                                subSkill: {
                                    dam: {
                                        mark: true,
                                        intro: {
                                            content: '受到的伤害+1',
                                        },
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'damageBegin' },
                                        content: function () {
                                            trigger.num++;
                                            player.removeSkill('luanwumrfz_dam');
                                        },
                                    },
                                    add: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseUseBegin' },
                                        content: function () {
                                            player.addSkill('guirenmrfz');
                                            player.removeSkill('luanwumrfz_add');
                                        },
                                    },
                                },
                            },
                            luanwumrfza: {
                                audio: 2,
                                direct: true,
                                trigger: { player: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                content: function () {
                                    'step 0'
                                    event.num = 2;
                                    'step 1'
                                    event.num--;
                                    player.logSkill('luanwumrfza');
                                    trigger.getParent().targets = trigger.getParent().targets.concat(trigger.targets);
                                    trigger.getParent().triggeredTargets4 = trigger.getParent().triggeredTargets4.concat(trigger.targets);
                                    if (event.num > 0) event.redo();
                                    'step 2'
                                    player.removeSkill('luanwumrfza');
                                },
                            },
                            //土豆雷（划掉） 伊内丝
                            yingzhimrfz: {
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        var str = '·摸牌阶段摸牌数+' + player.countMark('yingzhimrfz_draw') + '</br>·手牌上限+' + player.countMark('yingzhimrfz_mhand');
                                        str = str + '</br>·使用【杀】的次数+' + player.countMark('yingzhimrfz_sha');
                                        if (!player.hasMark('yingzhimrfz_dying')) return str;
                                        return str + '</br>·下次造成的伤害+1';
                                    },
                                },
                                audio: 6,
                                silent: true,
                                firstDo: true,
                                trigger: { global: 'roundStart' },
                                content: function () {
                                    game.countPlayer(function (current) {
                                        if (current != player) current.storage.yingzhimrfz_draw = false;
                                        if (current != player) current.storage.yingzhimrfz_mhand = false;
                                        if (current != player) current.storage.yingzhimrfz_sha = false;
                                        if (current != player) current.storage.yingzhimrfz_dying = false;
                                    });
                                },
                                group: ['yingzhimrfz_draw', 'yingzhimrfz_drbuff', 'yingzhimrfz_mhand', 'yingzhimrfz_sha', 'yingzhimrfz_dying', 'yingzhimrfz_dybuff'],
                                subSkill: {
                                    //标记
                                    mark: {
                                        mark: true,
                                        charlotte: true,
                                        intro: {
                                            content: function (event, player) {
                                                var str = '·摸牌阶段摸牌数-' + player.countMark('yingzhimrfz_drdebuff') + '</br>·手牌上限-' + player.countMark('yingzhimrfz_mhddebuff');
                                                str = str + '</br>·使用【杀】的次数-' + player.countMark('yingzhimrfz_shadebuff');
                                                if (!player.hasSkill('yingzhimrfz_dydebuff')) return str;
                                                return str + '</br>·下次造成的伤害-1';
                                            },
                                        },
                                    },
                                    //非延时锦囊牌 摸牌阶段摸牌数
                                    draw: {
                                        audio: 'yingzhimrfz',
                                        trigger: { player: 'useCardToTargeted' },
                                        filter: function (event, player) {
                                            if (event.targets.length > 1) return false;
                                            if (event.target.storage.yingzhimrfz_draw) return false;
                                            return get.type(event.card) == 'trick' && event.target != player;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.target) < 2;
                                        },
                                        prompt: function (event, player) {
                                            return '是否令' + get.translation(event.target) + '下个摸牌阶段摸牌数-1且你摸牌阶段摸牌数+1？';
                                        },
                                        content: function () {
                                            if (player.countMark('yingzhimrfz_draw') < 2) player.addMark('yingzhimrfz_draw', false);
                                            trigger.targets[0].storage.yingzhimrfz_draw = true;
                                            trigger.targets[0].addSkill('yingzhimrfz_drdebuff');
                                            trigger.targets[0].addMark('yingzhimrfz_drdebuff', false);
                                            trigger.targets[0].addSkill('yingzhimrfz_mark');
                                        },
                                    },
                                    drbuff: {
                                        audio: 'yingzhimrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseDrawBegin' },
                                        filter: function (event, player) {
                                            return player.hasMark('yingzhimrfz_draw');
                                        },
                                        content: function () {
                                            trigger.num += player.countMark('yingzhimrfz_draw');
                                        },
                                    },
                                    drdebuff: {
                                        audio: 'yingzhimrfz',
                                        trigger: { player: 'phaseDrawBegin' },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return player.hasMark('yingzhimrfz_drdebuff');
                                        },
                                        content: function () {
                                            trigger.num -= player.countMark('yingzhimrfz_drdebuff');
                                            player.removeMark('yingzhimrfz_drdebuff', player.countMark('yingzhimrfz_drdebuff'), false);
                                            player.removeSkill('yingzhimrfz_drdebuff');
                                            if (!player.hasMark('yingzhimrfz_mhddebuff') && !player.hasMark('yingzhimrfz_shadebuff') && !player.hasSkill('yingzhimrfz_dydebuff')) player.removeSkill('yingzhimrfz_mark');
                                        },
                                    },
                                    //其他角色响应你的牌 手牌上限
                                    mhand: {
                                        audio: 'yingzhimrfz',
                                        trigger: { global: ['respond', 'useCard'] },
                                        filter: function (event, player) {
                                            if (!event.respondTo) return false;
                                            if (event.player == player) return false;
                                            if (player != event.respondTo[0]) return false;
                                            return !event.player.storage.yingzhimrfz_mhand;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 2;
                                        },
                                        prompt: function (event, player) {
                                            return '是否令' + get.translation(event.player) + '的下个回合手牌上限-1且你的手牌上限+1？';
                                        },
                                        content: function () {
                                            if (player.countMark('yingzhimrfz_mhand') < 3) player.addMark('yingzhimrfz_mhand', false);
                                            trigger.player.addMark('yingzhimrfz_mhddebuff', false);
                                            trigger.player.storage.yingzhimrfz_mhand = true;
                                            trigger.player.addSkill('yingzhimrfz_mhddebuff');
                                            trigger.player.addSkill('yingzhimrfz_mark');
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('yingzhimrfz_mhand');
                                            },
                                        },
                                    },
                                    mhddebuff: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.hasMark('yingzhimrfz_mhddebuff');
                                        },
                                        content: function () {
                                            player.removeMark('yingzhimrfz_mhddebuff', player.countMark('yingzhimrfz_mhddebuff'), false);
                                            player.removeSkill('yingzhimrfz_mhddebuff');
                                            if (!player.hasMark('yingzhimrfz_drdebuff') && !player.hasMark('yingzhimrfz_shadebuff') && !player.hasSkill('yingzhimrfz_dydebuff')) player.removeSkill('yingzhimrfz_mark');
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num - player.countMark('yingzhimrfz_mhddebuff');
                                            },
                                        },
                                    },
                                    //进入濒死 伤害+1
                                    dying: {
                                        audio: 'yingzhimrfz',
                                        trigger: { global: 'dying' },
                                        filter: function (event, player) {
                                            if (event.player.storage.yingzhimrfz_dying) return false;
                                            if (event.player.hasSkill('yingzhimrfz_dydebuff') && player.hasMark('yingzhimrfz_dying')) return false;
                                            return event.player != player && event.parent.name == 'damage' && event.parent.source && event.parent.source == player;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 2;
                                        },
                                        prompt: function (event, player) {
                                            return '是否令' + get.translation(event.player) + '下次造成的伤害-1且你下次造成的伤害+1？';
                                        },
                                        content: function () {
                                            if (!player.hasMark('yingzhimrfz_dying')) player.addMark('yingzhimrfz_dying', false);
                                            if (!trigger.player.hasSkill('yingzhimrfz_dydebuff')) {
                                                trigger.player.addSkill('yingzhimrfz_dydebuff', false);
                                                trigger.player.addSkill('yingzhimrfz_mark');
                                                trigger.player.storage.yingzhimrfz_dying = true;
                                            }
                                        },
                                    },
                                    dybuff: {
                                        audio: 'yingzhimrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { source: 'damageBegin' },
                                        filter: function (event, player) {
                                            return player.hasMark('yingzhimrfz_dying');
                                        },
                                        content: function () {
                                            trigger.num++;
                                            player.removeMark('yingzhimrfz_dying', false);
                                        },
                                    },
                                    dydebuff: {
                                        audio: 'yingzhimrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { source: 'damageBegin' },
                                        content: function () {
                                            trigger.num--;
                                            player.removeSkill('yingzhimrfz_dydebuff');
                                            if (!player.hasMark('yingzhimrfz_drdebuff') && !player.hasMark('yingzhimrfz_mhddebuff') && !player.hasMark('yingzhimrfz_shadebuff')) player.removeSkill('yingzhimrfz_mark');
                                        },
                                    },
                                    //你响应其他角色牌 使用杀的次数
                                    sha: {
                                        audio: 'yingzhimrfz',
                                        trigger: { player: ['useCard', 'respond'] },
                                        filter: function (event, player) {
                                            if (!Array.isArray(event.respondTo)) return false;
                                            if (player == event.respondTo[0]) return false;
                                            return !event.player.storage.sha;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.respondTo[0]) < 2;
                                        },
                                        prompt: function (event, player) {
                                            return '是否令' + get.translation(event.respondTo[0]) + '的下个回合使用【杀】的次数-1且你使用【杀】的次数+1？';
                                        },
                                        content: function () {
                                            var target = trigger.respondTo[0];
                                            target.addMark('yingzhimrfz_shadebuff', false);
                                            target.addSkill('yingzhimrfz_shadebuff');
                                            target.addSkill('yingzhimrfz_mark');
                                            target.storage.yingzhimrfz_sha = true;
                                            player.addMark('yingzhimrfz_sha', false);
                                            player.addSkill('yingzhimrfz_sharem');
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('yingzhimrfz_sha');
                                            }
                                        },
                                    },
                                    sharem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        content: function () {
                                            player.removeMark('yingzhimrfz_sha', player.countMark('yingzhimrfz_sha'), false);
                                            player.removeSkill('yingzhimrfz_sharem');
                                        },
                                    },
                                    shadebuff: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.hasMark('yingzhimrfz_shadebuff');
                                        },
                                        content: function () {
                                            player.removeMark('yingzhimrfz_shadebuff', player.countMark('yingzhimrfz_shadebuff'), false);
                                            player.removeSkill('yingzhimrfz_shadebuff');
                                            if (!player.hasMark('yingzhimrfz_drdebuff') && !player.hasMark('yingzhimrfz_mhddebuff') && !player.hasSkill('yingzhimrfz_dydebuff')) player.removeSkill('yingzhimrfz_mark');
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num - player.countMark('yingzhimrfz_shadebuff');
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.1,
                                    expose: 0.1,
                                },
                            },
                            yingshaomrfz: {
                                audio: 2,
                                trigger: { player: 'dyingAfter' },
                                filter: function (event, player) {
                                    return event.parent.name == 'damage' && event.parent.source;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.parent.source) < 2;
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.parent.source) + '获得‘影哨’标记？';
                                },
                                content: function () {
                                    trigger.parent.source.addSkill('yingshaomrfz_ban');
                                },
                                group: 'yingshaomrfz_dying',
                                subSkill: {
                                    ban2: {
                                        charlotte: true,
                                        mod: {
                                            cardEnabled: function (card) { if (card.name == 'sha') return false }
                                        },
                                    },
                                    ban: {
                                        mark: true,
                                        intro: {
                                            content: function (event, player) {
                                                if (player.hasSkill('yingshaomrfz_ban2')) return '·手牌上限-1</br>·本出牌阶段不能使用【杀】';
                                                return '·手牌上限-1</br>·使用【杀】的次数至多为1';
                                            }
                                        },
                                        charlotte: true,
                                        forced: true,
                                        popup: false,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            if (!player.isPhaseUsing()) return false;
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.addTempSkill('yingshaomrfz_ban2', { player: 'phaseUseEnd' });
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num - 1;
                                            },
                                        },
                                    },
                                    dying: {
                                        audio: 'yingshaomrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'dying' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.hasSkill('yingshaomrfz_ban');
                                            });
                                        },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                if (current.hasSkill('yingshaomrfz_ban')) {
                                                    current.removeSkill('yingshaomrfz_ban');
                                                    if (current.hasSkill('yingshaomrfz_ban2')) current.removeSkill('yingshaomrfz_ban2');
                                                    current.damage(player);
                                                }
                                            });
                                            player.recover(2 - player.hp);
                                            player.removeSkill('yingshaomrfz');
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.2,
                                },
                            },
                            //缪尔赛思
                            kaiyuanmrfz: {
                                audio: 2,
                                trigger: {
                                    global: 'roundStart',
                                },
                                firstDo: true,
                                filter: function (event, player) {
                                    return game.roundNumber == 1;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('【开源】:请选择一名角色令其摸两张牌且本局游戏使用【杀】的次数+1，若该角色是你，你摸一张牌', true).ai = function (target) {
                                        return get.attitude(player, target) > 0;
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        target.draw(2);
                                        target.addSkill('kaiyuanmrfz_buff');
                                        if (target == player) {
                                            player.draw();
                                            player.logSkill('kaiyuanmrfz');
                                        }
                                        else player.logSkill('kaiyuanmrfz', target);
                                    }
                                },
                                subSkill: {
                                    buff: {
                                        mark: true,
                                        intro: {
                                            content: '使用【杀】的次数+1',
                                        },
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            }
                                        },
                                    },
                                },
                            },
                            jingshuimrfz: {
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        return '·你的攻击范围:' + player.getAttackRange() + '</br>·你使用【杀】的次数:' + player.getCardUsable('sha') + '</br>·你的手牌上限:' + player.getHandcardLimit();
                                    },
                                },
                                audio: 3,
                                trigger: { global: 'roundStart' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var str = '【净水】:你可选择一名其他角色，你将你的手牌数、手牌上限、攻击范围和使用【杀】的次数调整至与其一致';
                                    player.chooseTarget(get.prompt('jingshuimrfz'), str, function (card, player, target) {
                                        return target != player;
                                    }).ai = function (target) {
                                        return target.isMaxHandcard();
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        var numsha = target.getCardUsable('sha');
                                        var numatt = target.getAttackRange();
                                        var numhand = target.getHandcardLimit();
                                        player.logSkill('jingshuimrfz', target);
                                        //摸牌
                                        if (player.countCards('h') <= target.countCards('h')) player.drawTo(target.countCards('h'));
                                        //杀
                                        player.removeMark('jingshuimrfz_sha', player.countMark('jingshuimrfz_sha'), false);
                                        player.addMark('jingshuimrfz_sha', numsha, false);
                                        //攻击距离
                                        player.removeMark('jingshuimrfz_att', player.countMark('jingshuimrfz_att'), false);
                                        player.addMark('jingshuimrfz_att', numatt, false);
                                        //手牌上限
                                        player.removeMark('jingshuimrfz_maxhand', player.countMark('jingshuimrfz_maxhand'), false);
                                        player.addMark('jingshuimrfz_maxhand', numhand, false);
                                    }
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha' && player.hasMark('jingshuimrfz_sha')) return num = player.countMark('jingshuimrfz_sha');
                                    },
                                    attackRangeBase: function (player, num) {
                                        if (player.hasMark('jingshuimrfz_att')) return num = player.countMark('jingshuimrfz_att');
                                    },
                                    maxHandcard: function (player, num) {
                                        if (player.hasMark('jingshuimrfz_maxhand')) return num = player.countMark('jingshuimrfz_maxhand');
                                    },
                                },
                                subSkill: {
                                    sha: {
                                        charlotte: true,
                                    },
                                    att: {
                                        charlotte: true,
                                    },
                                    maxhand: {
                                        charlotte: true,
                                    },
                                },
                            },
                            liuxingmrfz: {
                                audio: 2,
                                trigger: {
                                    player: 'damageBegin',
                                },
                                usable: 1,
                                forced: true,
                                filter: function (event, player) {
                                    return player.countCards('h') >= player.hp && event.nature != 'thunder';
                                },
                                content: function () {
                                    trigger.cancel();
                                },
                            },
                            //黑键
                            yiyinmrfz: {
                                audio: 2,
                                chargeSkill: true,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (player.countMark('charge') > 2) return false;
                                    return player.hasCard(function (card) {
                                        return get.tag(card, 'damage');
                                    }, 'h');
                                },
                                filterCard: function (card) {
                                    return get.tag(card, 'damage');
                                },
                                selectCard: function () {
                                    var player = _status.event.player;
                                    return [1, 3 - player.countMark('charge')];
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (player.countCards(function (card) {
                                        return card.name == 'sha'
                                    }) > (player.getCardUsable('sha') + 1)) return true;
                                    return card.name != 'sha';
                                },
                                content: function () {
                                    player.addMark('charge', cards.length);
                                },
                                ai: {
                                    threaten: function (event, player) {
                                        return 0.85 + (player.countMark('charge') * 0.1);
                                    },
                                    order: 13,
                                    result: {
                                        player: 1,
                                    },
                                },
                                group: ['yiyinmrfz_sha', 'yiyinmrfz_get'],
                                subSkill: {
                                    sha: {
                                        audio: 'yiyinmrfz',
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            if (player.countMark('charge') == 0) return false;
                                            return event.card && event.card.name == 'sha' && !player.storage.jiyinmrfz;
                                        },
                                        prompt: '你可以消耗一点蓄力值令此【杀】的伤害基数+1',
                                        content: function () {
                                            if (!trigger.baseDamage) trigger.baseDamage = 1;
                                            trigger.baseDamage++;
                                            player.removeMark('charge');
                                        },
                                    },
                                    get: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        filter: function (event, player) {
                                            return (event.name != 'phase' || game.phaseNumber == 0);
                                        },
                                        content: function () {
                                            player.addMark('charge');
                                        },
                                    },
                                },
                            },
                            huangxiangmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseDiscardEnd' },
                                filter: function (event, player) {
                                    if (player.hasCard(function (card) {
                                        return card.hasGaintag('huangxiangmrfzx');
                                    }, 'h')) return false;
                                    return player.countMark('charge') > 0 && player.countCards('h') > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseCard(get.prompt('huangxiangmrfz'), '你可以消耗一点蓄力值并标记一张手牌', 'h').set('ai', function (card) {
                                        if (card.name == 'shan' && card.name == 'wuxie') return 6;
                                        if (card.name == 'sha' && card.name == 'tao' && card.name == 'jiu') return 5;
                                        return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.logSkill('huangxiangmrfz');
                                        player.addGaintag(result.cards, 'huangxiangmrfzx');
                                        player.removeMark('charge');
                                    }
                                },
                                group: 'huangxiangmrfz_lose',
                                subSkill: {
                                    lose: {
                                        trigger: {
                                            player: ['loseAfter', 'damageEnd'],
                                        },
                                        filter: function (event, player) {
                                            if (event.name == 'damage') return player.hasCard(function (card) {
                                                return card.hasGaintag('huangxiangmrfzx');
                                            }, 'h');
                                            if (event.name == 'lose') {
                                                for (var i in event.gaintag_map) {
                                                    if (event.gaintag_map[i].contains('huangxiangmrfzx')) return true;
                                                }
                                                return false;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            'step 0'
                                            var history = game.getAllGlobalHistory('useCard');
                                            for (var i = history.length - 1; i > 0; i--) {
                                                if (!history[i].targets) continue;
                                                if (history[i].targets.contains(player) && history[i].player != player) {
                                                    event.targets = history[i].player;
                                                    break;
                                                }
                                            }
                                            player.chooseControl(event.targets ? ['摸牌', '对' + get.translation(event.targets) + '造成一点伤害', 'cancel2'] : ['摸牌', 'cancel2']).set('ai', function () {
                                                var player = _status.event.player;
                                                if (event.targets) {
                                                    if (get.damageEffect(event.targets, player, player) > 0) return 1;
                                                    return 0;
                                                }
                                                else return 0;
                                            }).set('prompt', '【荒响】:请选择一项');
                                            'step 1'
                                            if (result.control != 'cancel2') {
                                                player.logSkill('huangxiangmrfz');
                                                if (result.control == '摸牌') {
                                                    player.draw();
                                                    if (player.countMark('charge') < 3) player.addMark('charge');
                                                }
                                                else event.targets.damage();
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (!player.hasCard(function (card) {
                                                return card.hasGaintag('huangxiangmrfzx');
                                            }, 'h') && player.countMark('charge') > 0) {
                                                player.chooseCard(get.prompt('huangxiangmrfz'), '你可以消耗一点蓄力值并标记一张手牌', 'h').set('ai', function (card) {
                                                    if (card.name == 'shan' && card.name == 'wuxie') return 6;
                                                    if (card.name == 'sha' && card.name == 'tao' && card.name == 'jiu') return 5;
                                                    return 6 - get.value(card);
                                                });
                                            }
                                            'step 3'
                                            if (result.bool) {
                                                player.logSkill('huangxiangmrfz');
                                                player.addGaintag(result.cards, 'huangxiangmrfzx');
                                                player.removeMark('charge');
                                            }
                                        },
                                    },
                                },
                            },
                            jiyinmrfz: {
                                audio: 3,
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return player.countMark('charge') > 0;
                                },
                                check: function (event, player) {
                                    return player.hasCard(function (card) {
                                        return card.name == 'sha';
                                    }, 'h') > 0;
                                },
                                content: function () {
                                    var list = ['jiyinmrfz_eff1', 'jiyinmrfz_lose', 'jiyinmrfz_eff4', 'jiyinmrfz_eff2', 'jiyinmrfz_eff3'];
                                    player.storage.jiyinmrfz = true;
                                    for (i of list) player.addTempSkill(i);
                                },
                                subSkill: {
                                    lose: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.storage.jiyinmrfz = false;
                                        },
                                    },
                                    //伤害基数 目标
                                    eff1: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            if (!event.card) return false;
                                            return event.card.name == 'sha' && event.targets.length == 1;
                                        },
                                        content: function () {
                                            'step 0'
                                            var target = trigger.targets[0], buff = 0;
                                            if (!game.hasPlayer(function (current) {
                                                return current != target && current.countCards('h') > target.countCards('h');
                                            })) buff++;
                                            if (!game.hasPlayer(function (current) {
                                                return current != target && current.hp > target.hp;
                                            })) buff++;
                                            if (!game.hasPlayer(function (current) {
                                                return current != target && current.countCards('e') > target.countCards('e');
                                            })) buff++;
                                            if (buff == 3) {
                                                player.storage.jiyinmrfz_eff1 = true
                                                player.addTempSkill('jiyinmrfz_eff1_buff2', 'shaAfter');
                                            }
                                            'step 1'
                                            player.addTempSkill('jiyinmrfz_eff1_buff', 'shaAfter');
                                        },
                                        mod: {
                                            playerEnabled: function (card, player, target) {
                                                if ((target.isMaxHp() || target.isMaxHandcard() || target.isMaxEquip()) && card.name == 'sha') return true;
                                                else if (card.name == 'sha') return false;
                                            },
                                        },
                                    },
                                    eff1_buff: {
                                        audio: 'huangxiangmrfz',
                                        trigger: { source: 'damageBegin1' },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            var target = trigger.player;
                                            if (player.storage.jiyinmrfz_eff1) {
                                                trigger.num = target.hp;
                                            }
                                            else trigger.num = Math.max((Math.min(target.hp - 1, player.countMark('charge'))), 1);
                                            player.removeSkill('jiyinmrfz_eff1_buff');
                                        },
                                    },
                                    eff1_buff2: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'shaEnd' },
                                        content: function () {
                                            player.storage.jiyinmrfz_eff1 = false;
                                        },
                                    },
                                    //闪的次数
                                    eff2: {
                                        trigger: { player: 'useCardToPlayered' },
                                        forced: true,
                                        charlotte: true,
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return event.card.name == 'sha' && !event.getParent().directHit.contains(event.target);
                                        },
                                        logTarget: 'target',
                                        content: function () {
                                            var targets = trigger.target;
                                            var id = trigger.target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (typeof map[id].shanRequired == 'number') {
                                                map[id].shanRequired += (targets.hp - 1);
                                            }
                                            else {
                                                map[id].shanRequired = targets.hp;
                                            }
                                        },
                                        ai: {
                                            directHit_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > player.countMark('charge')) return false;
                                            },
                                        },
                                    },
                                    //提示
                                    eff3: {
                                        charlotte: true,
                                        mark: true,
                                        intro: {
                                            content: function (event, player) {
                                                var list = [];
                                                for (var i = 0; i < game.players.length; i++) {
                                                    if (game.players[i].isMaxHp() && game.players[i].isMaxHandcard() && game.players[i].isMaxEquip()) list.add(get.translation(game.players[i]));
                                                }
                                                return '手牌最多或之一且体力值最多或之一且装备数最多或之一的角色有:</br>' + (list.length ? list : '没有满足条件的角色！');
                                            },
                                        },
                                    },
                                    //消耗蓄力值
                                    eff4: {
                                        forced: true,
                                        charlotte: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.removeMark('charge', trigger.num);
                                        },
                                    },
                                },
                            },
                            //伊芙利特
                            yanmomrfz: {
                                audio: 4,
                                mod: {
                                    attackRange: function (player, num) {
                                        return num + 2;
                                    },
                                    playerEnabled: function (card, player, target) {
                                        var gone = [];
                                        for (var i = 0; i < game.players.length; i++) {
                                            var players = game.players[i];
                                            if (players.isAction()) gone.add(players);
                                        }
                                        if (target != player && _status.currentPhase == player) {
                                            if (!gone.contains(target) && player.storage.yanmomrfz == true) return false;
                                            if (gone.contains(target) && player.storage.yanmomrfz == false) return false;
                                        }
                                    },
                                },
                                trigger: { player: 'phaseBegin' },
                                direct: true,
                                content: function (event, player) {
                                    'step 0'
                                    var num = 0, gone = [], wlgo = [];
                                    for (var i = 0; i < game.players.length; i++) {
                                        var players = game.players[i];
                                        if (players.isAction()) gone.add(players);
                                        else wlgo.add(players);
                                    }
                                    //console.log(player.storage.yanmomrfz_gone);
                                    player.chooseControl().set('choiceList', [
                                        '只能指定本轮<font color=#f61e46>已进行</font>回合的其他角色<br>(' + get.translation(gone) + ')',
                                        '只能指定本轮<font color=#f61e46>未进行</font>回合的其他角色<br>(' + get.translation(wlgo) + ')',
                                    ]).set('ai', function () {
                                        if (num > (game.players.length - num)) return 0;
                                        return 1;
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        player.storage.yanmomrfz = true;
                                    }
                                    else player.storage.yanmomrfz = false;
                                    player.logSkill('yanmomrfz');
                                },
                                group: ['yanmomrfz_add'],
                                subSkill: {
                                    gone: {
                                        charlotte: true,
                                    },
                                    eff: {
                                        init: function (player) {
                                            player.storage.yanmomrfz_eff = false;
                                        },
                                        silent: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            player.storage.yanmomrfz_eff = true;
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                current.storage.yanmomrfz_eff = false;
                                            });
                                        },
                                    },
                                    add: {
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            if (get.type(event.card) == 'delay') return false;
                                            if (get.type(event.card) == 'equip') return false;
                                            return game.hasPlayer(function (current) {
                                                return !event.targets.contains(current) && player.canUse(event.card, current) && current != player;
                                            });
                                        },
                                        check: function (event, player) {
                                            var num = 0;
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i] == player || event.targets.contains(game.players[i])) continue;
                                                if (!player.inRange(game.players[i])) continue;
                                                if (player.canUse(event.card, game.players[i])) {
                                                    num = num + get.attitude(player, game.players[i]);
                                                }
                                            }
                                            return num > -1;
                                        },
                                        prompt: function (event, player) {
                                            var list = [];
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i] == player || event.targets.contains(game.players[i])) continue;
                                                if (!player.inRange(game.players[i])) continue;
                                                if (player.canUse(event.card, game.players[i])) list.add(get.translation(game.players[i]));
                                            }
                                            return '是否增加' + list + '为' + get.translation(event.card) + '的目标？';
                                        },
                                        content: function () {
                                            'step 0'
                                            var list = [], targets = [];
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i] == player || trigger.targets.contains(game.players[i])) continue;
                                                if (!player.inRange(game.players[i])) continue;
                                                if (player.canUse(trigger.card, game.players[i])) {
                                                    targets.push(game.players[i]);
                                                    player.line(game.players[i]);
                                                }
                                            }
                                            if (targets.length > 0) {
                                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                                event.targets = targets;
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 1'
                                            player.logSkill('yanmomrfz');
                                            game.log(event.targets, '成为了', trigger.card, '的目标')
                                            trigger.targets.addArray(event.targets);
                                        },
                                    },
                                },
                            },
                            yanbaomrfz: {
                                intro: {
                                    content: '<span style="text-decoration:line-through">防御力-100</span></br>本轮下次因【杀】受到的伤害+1',
                                },
                                audio: 2,
                                trigger: { source: 'damageEnd' },
                                global: ['yanbaomrfz_eff', 'yanbaomrfz_clear'],
                                filter: function (event, player) {
                                    if (!event.player.isAlive()) return false;
                                    return !event.player.hasMark('yanbaomrfz') && event.player != player && !event.player.storage.yanbaomrfz2;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 2;
                                },
                                content: function () {
                                    trigger.player.addMark('yanbaomrfz', false);
                                    trigger.player.storage.yanbaomrfz2 = true;
                                },
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        firstDo: true,
                                        content: function () {
                                            player.removeMark('yanbaomrfz', false);
                                            player.storage.yanbaomrfz2 = false;
                                        },
                                    },
                                    eff: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'damageBegin' },
                                        filter: function (event, player) {
                                            if (!player.hasMark('yanbaomrfz')) return false;
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            trigger.num++;
                                            player.removeMark('yanbaomrfz', false);
                                            player.logSkill('yanbaomrfz');
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            yanbaomrfz2: {
                                charlotte: true,
                            },
                            huishenmrfz: {
                                audio: 2,
                                usable: 1,
                                trigger: { player: 'useCardToPlayer' },
                                filter: function (event, player) {
                                    return event.target != player;
                                },
                                content: function () {
                                    player.addTempSkill('huishenmrfz_eff', 'useCardAfter');
                                },
                                subSkill: {
                                    eff: {
                                        silent: true,
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            return event.target != player;
                                        },
                                        content: function () {
                                            'step 0'
                                            trigger.target.chooseToDiscard('弃置一张手牌，或令' + get.translation(player) + '摸一张牌').set('ai', function (card) {
                                                var trigger = _status.event.getTrigger();
                                                return -get.attitude(trigger.target, trigger.player) - get.value(card);
                                            });
                                            'step 1'
                                            if (result.bool == false) player.draw();
                                        },
                                    },
                                },
                            },
                            //淬羽赫默
                            renbenmrfz: {
                                mark: true,
                                intro: {
                                    name: '《特里蒙科学伦理宣言》',
                                    content: '本轮游戏不能使用、打出或弃置【$】',
                                },
                                audio: 2,
                                forced: true,
                                trigger: { global: 'roundStart' },
                                //priority:-100,
                                content: function () {
                                    'step 0'
                                    game.countPlayer(function (current) {
                                        if (current.hasSkill('renbenmrfz2')) current.removeSkill('renbenmrfz2');
                                        if (current.hasSkill('renbenmrfz3')) current.removeSkill('renbenmrfz3');
                                    });
                                    var list = lib.inpile;
                                    var list2 = [];
                                    for (var i = 0; i < list.length; i++) {
                                        var name = list[i];
                                        var type = get.type(name);
                                        if (name == 'sha') {
                                            list2.push(['基本', '', 'sha']);
                                        }
                                        else if (type == 'basic') {
                                            list2.push(['基本', '', list[i]]);
                                        }
                                        else if (type == 'trick') {
                                            list2.push(['锦囊', '', list[i]]);
                                        }
                                    }
                                    if (!list.length) event.finish();
                                    else {
                                        event.cards = list2;
                                        event.cards2 = [];
                                        event.num = 0;
                                    }
                                    'step 1'
                                    if (event.num < game.players.length) game.players[event.num].chooseButton(true, ['【人本】:请声明一张牌</br>科学理应注视每一个人', [event.cards, 'vcard']]).set('ai', function (button) {
                                        switch (button.link[2]) {
                                            case 'wuxie': return 0.5 + Math.random();
                                            case 'wuzhong': case 'dongzhuxianji': return 0.3 + Math.random();
                                            case 'guohe': case 'zhujinqiyuan': return 0.3 + Math.random();
                                            case 'sha': return 0.3 + Math.random();
                                            case 'tao': return 0.4 + Math.random();
                                            case 'shan': return 0.3 + Math.random();
                                            default: return Math.random();
                                        }
                                    });
                                    else event.goto(3);
                                    'step 2'
                                    if (result.bool) {
                                        event.cards2.add2(result.links[0][2]);
                                        game.log(game.players[event.num], '声明了', result.links[0][2]);
                                        if (event.num < game.players.length) {
                                            event.num++;
                                            event.goto(1);
                                        }
                                    }
                                    'step 3'
                                    var maxCard = game.mostStr(event.cards2);
                                    if (maxCard.length == 1) {
                                        game.log('本轮游戏不能使用、打出或弃置', maxCard);
                                        player.popup(maxCard);
                                        player.storage.renbenmrfz = maxCard;
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i].storage.renbenmrfz != maxCard) game.players[i].storage.renbenmrfz = maxCard;
                                        }
                                        event.goto(6);
                                    }
                                    else event.cards3 = maxCard;
                                    'step 4'
                                    player.chooseButton([true, '【人本】:请选择一张牌</br>科学理应注视每一个人', [event.cards3, 'vcard']]);
                                    'step 5'
                                    if (result.bool) {
                                        game.log('本轮游戏不能使用、打出或弃置', result.links[0][2]);
                                        player.popup(result.links[0][2]);
                                        player.storage.renbenmrfz = result.links[0][2];
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i].storage.renbenmrfz != result.links[0][2]) game.players[i].storage.renbenmrfz = result.links[0][2];
                                        }
                                    }
                                    'step 6'
                                    event.num2 = 0;
                                    'step 7'
                                    if (event.num2 < game.players.length) {
                                        if (game.players[event.num2] != player) game.players[event.num2].chooseControl('是', '否').set('prompt', '【人本】:是否遵守协议？(不能使用或打出' + get.translation(player.storage.renbenmrfz) + ')').set('ai', function () {
                                            var player = _status.event.player;
                                            if (!player.getEquip(1)) return 0;
                                            if (game.hasPlayer(function (current) {
                                                return get.distance(player, current) <= 1 && player != current && get.attitude(player, current) < 0;
                                            }) || player.storage.renbenmrfz == 'sha' && Math.random() > 0.4) return 1;
                                            return 0;
                                        });
                                        else {
                                            event.num2++;
                                            event.redo();
                                        }
                                    }
                                    else event.finish();
                                    'step 8'
                                    if (result.index == 0) {
                                        game.players[event.num2].addSkill('renbenmrfz2');
                                    }
                                    else if (result.index == 1) {
                                        game.players[event.num2].addSkill('renbenmrfz3');
                                    }
                                    if (event.num2 < game.players.length) {
                                        event.num2++;
                                        event.goto(7);
                                    }
                                },
                                global: 'renbenmrfz_use',
                                subSkill: {
                                    use: {
                                        mod: {
                                            cardDiscardable: function (card, player) {
                                                if (get.name(card) == player.storage.renbenmrfz && (player.hasSkill('renbenmrfz2') || player.hasSkill('renbenmrfz'))) return false;
                                            },
                                            cardEnabled2: function (card, player) {
                                                if (get.name(card) == player.storage.renbenmrfz && (player.hasSkill('renbenmrfz2') || player.hasSkill('renbenmrfz'))) return false;
                                            },
                                            ignoredHandcard: function (card, player) {
                                                if (get.name(card) == player.storage.renbenmrfz && player.hasSkill('renbenmrfz')) {
                                                    return true;
                                                }
                                            },
                                        },
                                    },
                                },
                            },
                            renbenmrfz2: {
                                mark: true,
                                intro: {
                                    content: '接受《特里蒙科学伦理宣言》',
                                },
                                audio: 'renbenmrfz',
                                enable: 'phaseUse',
                                filterCard: function (card, player) {
                                    return card.name == player.storage.renbenmrfz;
                                },
                                discard: false,
                                lose: false,
                                filter: function (event, player) {
                                    return player.hasCard(function (card) {
                                        return card.name == player.storage.renbenmrfz;
                                    }, 'h');
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.hasSkill('renbenmrfz');
                                },
                                content: function () {
                                    player.draw();
                                    player.give(cards, target);
                                },
                                group: 'renbenmrfz2_lose',
                                subSkill: {
                                    lose: {
                                        charlotte: true,
                                        silent: true,
                                        firstDo: true,
                                        priority: 50,
                                        trigger: { global: 'die' },
                                        filter: function (event, player) {
                                            return event.player.hasSkill('renbenmrfz');
                                        },
                                        content: function () {
                                            player.removeSkill('renbenmrfz2');
                                        },
                                    },
                                },
                                ai: {
                                    order: 13,
                                    result: {
                                        player: function (player, target) {
                                            if (get.attitude(player, target) > 0) return 1;
                                            return -1;
                                        },
                                    },
                                },
                            },
                            renbenmrfz3: {
                                mark: true,
                                markimage: 'extension/明日方舟/image/orther/rejecthmmrfz.png',
                                intro: {
                                    content: function (event, player) {
                                        return '不接受《特里蒙科学伦理宣言》</br>当前攻击距离为' + player.getAttackRange();
                                    },
                                },
                                mod: {
                                    attackRange: function (player, num) {
                                        var atk = 0;
                                        for (var i = 0; i < game.players.length; i++) {
                                            if (game.players[i] == player) continue;
                                            if (game.players[i].hasSkill('renbenmrfz2')) atk++;
                                        }
                                        return num - Math.max(2, atk);
                                    }
                                },
                            },
                            dizhumrfz: {
                                audio: 2,
                                trigger: { player: 'phaseUseBegin' },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    game.countPlayer(function (current) {
                                        current.removeSkill('dizhumrfzx');
                                    });
                                    player.chooseTarget('【砥柱】:你可以选择至多两名角色，令其获得‘夜灯’标记', [0, 2]).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target) > 2;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets;
                                        player.logSkill('dizhumrfz');
                                        for (i of targets) {
                                            i.addSkill('dizhumrfzx');
                                            i.storage.dizhumrfz = true;
                                            player.line(i);
                                        }
                                    }
                                },
                            },
                            dizhumrfzx: {
                                mark: true,
                                markimage: 'extension/明日方舟/image/orther/yedengmrfz.png',
                                intro: {
                                    content: function (event, player) {
                                        return '受到的伤害-1，若为致命伤害，则防止之';
                                    },
                                },
                                audio: 2,
                                forced: true,
                                trigger: { player: 'damageBegin3' },
                                content: function () {
                                    if (trigger.num < player.hp) trigger.num--;
                                    else trigger.num = 0;
                                    player.removeMark('dizhumrfz');
                                    player.removeSkill('dizhumrfzx');
                                    player.logSkill('dizhumrfz');
                                },
                            },
                            //塞雷娅
                            fuyuanmrfz: {
                                audio: 2,
                                trigger: { global: 'recoverEnd' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.source == player && event.player != player;
                                },
                                content: function () {
                                    trigger.player.draw();
                                },
                            },
                            gaihuamrfz: {
                                audio: 2,
                                trigger: { global: 'damageBegin' },
                                filter: function (event, player) {
                                    if (event.player == player) return false;
                                    return event.nature && player.inRange(event.player);
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    if (trigger.card) {
                                        var cards = trigger.card;
                                        player.chooseToDiscard('he', get.prompt('gaihuamrfz'), '是否弃置一张非' + get.translation(get.type(cards)) + '牌令此伤害+1', function (card) {
                                            return get.type(card) != get.type(cards);
                                        }).set('goon', get.attitude(player, trigger.player) < 0).set('ai', function (card) {
                                            if (!_status.event.goon) return 0;
                                            return 7 - get.value(card);
                                        });
                                    }
                                    else {
                                        player.chooseToDiscard(get.prompt('gaihuamrfz'), '是否弃置一张牌令此伤害+1').set('goon', get.attitude(player, trigger.player) < 0).set('ai', function (card) {
                                            if (!_status.event.goon) return 0;
                                            return 7 - get.value(card);
                                        });
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        trigger.num++;
                                        player.logSkill('gaihuamrfz', trigger.player);
                                    }
                                },
                            },
                            yaopeimrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.getCardUsable('sha') > 0 && player.countCards('he') > 0;
                                },
                                filterCard: true,
                                position: 'he',
                                prompt: '请弃置一张牌',
                                content: function () {
                                    'step 0'
                                    var num = 0;
                                    var go = false;
                                    if (game.hasPlayer(function (current) {
                                        return get.distance(player, current) <= 1 && get.attitude(player, current) > 2 && current.getDamagedHp() > 2;
                                    })) {
                                        go = true;
                                    }
                                    else if (!game.hasPlayer(function (current) {
                                        return get.distance(player, current) <= 1 && get.attitude(player, current) > 0 && current.getDamagedHp() > 0 && current != player;
                                    }) && player.getDamagedHp() > 0) {
                                        go = true;
                                    }
                                    player.addTempSkill('yaopeimrfz2', 'phaseUseAfter');
                                    player.chooseTarget('【药配】:选择一名与你距离不大于1的角色令其回血，或选择‘取消’令攻击范围内的所有角色回复一点体力', function (card, target, player) {
                                        return get.distance(player, target) <= 1 && target.getDamagedHp() > 0;
                                    }).set('go', go).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (go) return get.attitude(player, target) > 2;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var targets = result.targets[0];
                                        targets.recover();
                                        if (targets.getDamagedHp() >= 3) targets.recover();
                                    }
                                    else {
                                        for (var i = 0; i < game.players.length; i++) {
                                            var targets = game.players;
                                            if (player.inRange(targets[i]) || targets[i] == player) targets[i].recover();
                                        }
                                    }
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 1.5,
                                    order: 13,
                                    result: {
                                        player: function (player) {
                                            var num = 0, player = _status.event.player;
                                            for (var i = 0; i < game.players.length; i++) {
                                                var targetx = game.players;
                                                if (!player.inRange(targetx[i])) continue;
                                                if (get.attitude(player, targetx[i]) > 0 && targetx[i].getDamagedHp() > 0) num++;
                                                if (get.attitude(player, targetx[i]) <= 0 && targetx[i].getDamagedHp() > 0) num--;
                                                if (player.getDamagedHp() > 0) {
                                                    num = 1;
                                                    break;
                                                }
                                            }
                                            if (num > 0) return 1;
                                            return -1;
                                        },
                                    },
                                },
                            },
                            yaopeimrfz2: {
                                charlotte: true,
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num - 1;
                                    }
                                },
                            },
                            //焰影苇草
                            minghuomrfz: {
                                audio: 4,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                direct: true,
                                content: function (event, player) {
                                    'step 0'
                                    if (player.hasSkill('minghuomrfz_buff1')) player.removeSkill('minghuomrfz_buff1');
                                    if (player.hasSkill('minghuomrfz_buff2')) player.removeSkill('minghuomrfz_buff2');
                                    player.chooseControl().set('choiceList', [
                                        '每回合你使用的第一张单一目标的普通锦囊或【杀】可以额外指定一个目标',
                                        '当有‘灼痕’标记的角色进入濒死状态时，你可以令其上家或下家获得一个‘灼痕’标记',
                                        '<span style="text-decoration:line-through">真的会有人选这个选项吗？</span>不发动此技能',
                                    ]).set('ai', function () {
                                        if (game.countPlayer(function (current) {
                                            var curnext = current.getNext(), curpre = current.getPrevious();
                                            return current != player && current.hasMark('zhuohenmrfz') && current.hp < 2 && (get.attitude(player, curnext) || get.attitude(player, curpre));
                                        }) > 0) return 1;
                                        return 0;
                                    });
                                    'step 1'
                                    if (result.index != 2) {
                                        if (result.index == 0) player.addSkill('minghuomrfz_buff1');
                                        else player.addSkill('minghuomrfz_buff2');
                                        player.logSkill('minghuomrfz');
                                    }
                                },
                                subSkill: {
                                    buff1: {
                                        trigger: { player: 'useCard2' },
                                        filter: function (event, player) {
                                            if (player.hasSkill('minghuomrfz_mark')) return false;
                                            if (event.targets.length > 1) return false;
                                            if (get.type(event.card) != 'trick' && event.card.name != 'sha') return false;
                                            return game.hasPlayer(function (current) {
                                                return !event.targets.contains(current) && player.canUse(event.card, current);
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('minghuomrfz'), '为' + get.translation(trigger.card) + '增加一个目标', function (card, player, target) {
                                                return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target);
                                            }).set('sourcex', trigger.targets).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.effect(target, _status.event.card, player, player);
                                            }).set('card', trigger.card);
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                                event.target = result.targets[0];
                                                player.addTempSkill('minghuomrfz_mark', 'phaseEnd');
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 2'
                                            player.logSkill('minghuomrfz', event.target);
                                            trigger.targets.push(event.target);
                                        },
                                    },
                                    buff2: {
                                        trigger: { global: 'dying' },
                                        direct: true,
                                        filter: function (event, player) {
                                            if (event.player.getNext().hasMark('zhuohenmrfz') && event.player.getPrevious().hasMark('zhuohenmrfz')) return false;
                                            return game.players.length > 2 && event.player.hasMark('zhuohenmrfz');
                                        },
                                        content: function () {
                                            'step 0'
                                            var target = trigger.player;
                                            player.chooseTarget(get.prompt('minghuomrfz'), '你可以令' + get.translation(target) + '的上家或下家（不能是你）获得一个‘灼痕’标记', function (card, player, target) {
                                                return !target.hasMark('zhuohenmrfz') && target != player && (target == _status.event.TriPlayer.getNext() || target == _status.event.TriPlayer.getPrevious());
                                            }).set('TriPlayer', trigger.player).set('ai', function (player, target) {
                                                if (get.attitude(player, targetx.getNext()) > 2 && get.attitude(player, targetx.getNext()) > 2) return 0;
                                                return get.attitude(player, target) < 2;
                                            }).set('targetx', trigger.player);
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                target.addMark('zhuohenmrfz');
                                                player.logSkill('zhuohenmrfz', target);
                                                if (target.countCards('h') > 0) target.chooseToDiscard('h', true, '【灼痕】:请选择弃置一张手牌');
                                            }
                                        },
                                    },
                                    mark: {
                                        charlotte: true,
                                    },
                                },
                            },
                            yingyaomrfz: {
                                intro: {
                                    content: function (event, player) {
                                        return '剩余使用次数:' + (game.totalmark('zhuohenmrfz') - player.countMark('yingyaomrfz'));
                                    },
                                },
                                audio: 2,
                                trigger: { source: 'damageEnd' },
                                filter: function (event, player) {
                                    if (game.totalmark('zhuohenmrfz') <= player.countMark('yingyaomrfz')) return false;
                                    return event.player != player && game.hasPlayer(function (current) {
                                        return current != player && player.inRange(current);
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(true, get.prompt('yingyaomrfz'), '你可以选择一名在你攻击范围内的角色，令其回复一点体力，若其为你，你摸一张牌', function (card, player, target) {
                                        return (player.inRange(target) && target.getDamagedHp() > 0) || target == player;
                                    }).set('ai', function (target) {
                                        return get.attitude(_status.event.player, target) > 2;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        target.recover();
                                        player.addMark('yingyaomrfz', false);
                                        if (target == player) player.draw();
                                    }
                                },
                                group: 'yingyaomrfz_clear',
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.removeMark('yingyaomrfz', player.countMark('yingyaomrfz'), false);
                                        },
                                    },
                                },
                            },
                            zhuohenmrfz: {
                                intro: {
                                    content: '·被德拉克的火焰灼伤</br>·手牌上限-1</br>·受到伤害时需弃置一张手牌',
                                },
                                global: 'zhuohenmrfz_debuff2',
                                audio: 2,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    return event.target != player && !event.target.hasMark('zhuohenmrfz') && !event.target.hasSkill('zhuohenmrfz2');
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.target) + '获得一个‘灼痕’标记？';
                                },
                                content: function () {
                                    var target = trigger.target;
                                    target.addMark('zhuohenmrfz');
                                    target.addSkill('zhuohenmrfz_clear');
                                    target.addTempSkill('zhuohenmrfz2')
                                    if (target.countCards('h') > 0) target.chooseToDiscard('h', true, '【灼痕】:请选择弃置一张手牌');
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + game.totalmark('zhuohenmrfz');
                                    },
                                },
                                group: ['zhuohenmrfz_debuff', 'zhuohenmrfz_draw'],
                                subSkill: {
                                    draw: {
                                        audio: 'zhuohenmrfz',
                                        forced: true,
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return event.player.hasMark('zhuohenmrfz') && !player.isMaxHandcard(true);
                                        },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        firstDo: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeMark('zhuohenmrfz');
                                            player.removeSkill('zhuohenmrfz_clear');
                                        },
                                    },
                                    debuff: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { global: 'damageBegin' },
                                        filter: function (event, player) {
                                            return event.player != player && event.player.hasMark('zhuohenmrfz') && event.player.countCards('h') > 0;
                                        },
                                        content: function () {
                                            trigger.player.chooseToDiscard('h', true, '【灼痕】:请选择弃置一张手牌');
                                        },
                                    },
                                    debuff2: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                if (player.hasMark('zhuohenmrfz')) return num - 1;
                                            },
                                        },
                                    },
                                },
                            },
                            zhuohenmrfz2: {
                                charlotte: true,
                            },
                            //霍尔海雅
                            chuangzhongmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    for (var i = 0; i < event.targets.length; i++) {
                                        if (event.targets[i].hasMark('kuangyumrfz')) {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                content: function () {
                                    for (var i = 0; i < trigger.targets.length; i++) {
                                        if (trigger.targets[i].hasMark('kuangyumrfz')) {
                                            trigger.targets[i].addTempSkill('fengyin');
                                            trigger.targets[i].addSkill('chuangzhongmrfz_eff');
                                        }
                                    }
                                },
                                subSkill: {
                                    eff: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseDiscardEnd' },
                                        content: function () {
                                            player.removeSkill('chuangzhongmrfz_eff')
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                if (player.hasMark('kuangyumrfz')) return num - player.hp;
                                            },
                                        },
                                    },
                                },
                            },
                            kuangyumrfz: {
                                intro: {
                                    name: '风起',
                                    content: function (event, player) {
                                        if (player.hasSkill('chuangzhongmrfz_eff')) return '·回合开始时，随机跳过两个阶段</br>·手牌上限-' + player.hp;
                                        return '·回合开始时，随机跳过两个阶段';
                                    },
                                },
                                audio: 4,
                                derivation: ['kuangyumrfz_rewirte'],
                                trigger: { player: 'useCardToPlayered' },
                                firstDo: true,
                                filter: function (event, player) {
                                    var nost = get.type(event.card) != 'trick' && get.type(event.card) != 'delay';
                                    var hast = get.type(event.card) != 'trick' && event.card.name != 'sha';
                                    if (!event.targets || event.targets.length > 1) return false;
                                    if (event.cards && (player.storage.kuangyumrfz ? (nost) : (hast))) return false;
                                    return event.target != player && !event.target.hasMark('kuangyumrfz');
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.target) + '获得一个‘风起’标记？';
                                },
                                content: function () {
                                    var target = trigger.target;
                                    target.addMark('kuangyumrfz');
                                    target.addSkill('kuangyumrfz_clear');
                                    target.addTempSkill('kuangyumrfz2')
                                    target.addSkill('kuangyumrfz_skip');
                                    if (player.inRange(target)) player.addTempSkill('kuangyumrfz_damage', 'useCardAfter');
                                },
                                group: 'kuangyumrfz_clear2',
                                subSkill: {
                                    clear2: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.storage.kuangyumrfz;
                                        },
                                        content: function () {
                                            player.storage.kuangyumrfz = false;
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.removeMark('kuangyumrfz');
                                            player.removeSkill('kuangyumrfz_clear');
                                        },
                                    },
                                    skip: {
                                        audio: 'kuangyumrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            var phase = ['phaseBegin', 'phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard', 'phaseJieshu'].randomGet2(2);
                                            for (var i = 0; i < phase.length; i++) {
                                                player.skip(phase[i]);
                                            }
                                            game.log(player, '因【狂语】将会跳过', get.tranPhase(phase[0]), '和', get.tranPhase(phase[1]));
                                            player.removeSkill('kuangyumrfz_skip');
                                        },
                                    },
                                    damage: {
                                        audio: 'kuangyumrfz',
                                        trigger: { source: 'damageBegin' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.player.hasMark('kuangyumrfz');
                                        },
                                        content: function () {
                                            trigger.num++;
                                            player.storage.kuangyumrfz = true;
                                        },
                                    },
                                },
                            },
                            kuangyumrfz2: {
                                charlotte: true,
                            },
                            //新棘刺
                            jihumrfz: {
                                audio: 2,
                                intro: {
                                    content: '荆棘护身',
                                },
                                trigger: { player: 'phaseZhunbeiBegin' },
                                check: function (event, player) {
                                    if (player.countCards('h', function (card) {
                                        return get.tag(card, 'damage') || (get.type(card) == 'trick' && !get.tag(card, 'damage')) || get.type(card) == 'delay';
                                    }) > 1) return false;
                                    return true;
                                },
                                content: function () {
                                    if (!player.hasMark('jihumrfz')) player.addMark('jihumrfz', false);
                                    player.addTempSkill('zishou2');
                                },
                                group: ['jihumrfz_clear', 'jihumrfz_buff'],
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) { return player.hasMark('jihumrfz') },
                                        content: function () { player.removeMark('jihumrfz', false) },
                                    },
                                    buff: {
                                        trigger: { target: 'useCardToTargeted' },
                                        usable: 1,
                                        filter: function (event, player) {
                                            if (get.type(event.card) == 'delay' || get.type(event.card) == 'equip') return false;
                                            if (!player.hasMark('jihumrfz')) return false;
                                            return event.player != player && (player.canUse(event.card, event.player, false) || game.hasPlayer(function (current) {
                                                return current != player && get.distance(player, current) <= 1 && player.canUse(event.card, current, 'nodistance');
                                            }));
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(function (card, player, target) {
                                                return (player.canUse(trigger.card, target, false) && target != player) && (get.distance(player, target) <= 1 || target == _status.event.TriPlayer);
                                            }).set('TriPlayer', trigger.player).set('prompt', get.prompt('jihumrfz')).set('prompt2', '【棘护】:你可以使用一张【' + get.translation(trigger.card.name) + '】').ai = function (target) {
                                                return -get.attitude(player, target);
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                player.useCard({ name: trigger.card.name, isCard: true }, result.targets[0], false);
                                                player.logSkill('jihumrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            re_jianshumrfz: {
                                audio: 'jianshumrfz',
                                derivation: ['re_chaoshengmrfz'],
                                intro: {
                                    content: function (event, player) {
                                        var num = player.countMark('re_jianshumrfz')
                                        if (num == 20) return '出牌阶段开始时可以使用一张【杀】</br>摸牌阶段摸牌数+1;攻击距离和【杀】的使用次数各+2';
                                        else if (num >= 10) return '已累计指定' + num + '次</br>出牌阶段开始时可以使用一张【杀】</br>摸牌阶段摸牌数、攻击距离和【杀】的使用次数各+1';
                                        return '已累计指定' + num + '次';
                                    },
                                },
                                direct: true,
                                trigger: { player: 'useCardToTargeted' },
                                filter: function (event, player) {
                                    return player.countMark('re_jianshumrfz') < 20;
                                },
                                content: function () {
                                    'step 0'
                                    player.addMark('re_jianshumrfz', false);
                                    'step 1'
                                    var num = player.countMark('re_jianshumrfz')
                                    if (num % 10 == 0) {
                                        player.logSkill('jianshumrfz');
                                        //--第一次使用至高之术--//
                                        if (num == 10) {
                                            player.addSkill('re_jianshumrfz_usesha');
                                            player.addMark('re_jianshumrfz_time', false);
                                            player.addMark('re_jianshumrfz_draw', false);
                                            player.addMark('re_jianshumrfz_range', false);
                                        }
                                        //--第二次使用至高之术--//
                                        if (num == 20) {
                                            player.addMark('re_jianshumrfz_time', false);
                                            player.addMark('re_jianshumrfz_range', false);
                                            player.removeSkill('jihumrfz');
                                            player.addSkill('re_chaoshengmrfz');
                                        }

                                    }
                                },
                                group: ['re_jianshumrfz_time', 're_jianshumrfz_range', 're_jianshumrfz_draw'],
                                subSkill: {
                                    time: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('re_jianshumrfz_time');
                                            }
                                        },
                                    },
                                    range: {
                                        charlotte: true,
                                        onremove: true,
                                        mod: {
                                            attackRange: function (player, num) {
                                                return num + player.countMark('re_jianshumrfz_range');
                                            },
                                        },
                                    },
                                    draw: {
                                        silent: true,
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: "phaseDrawBegin2" },
                                        filter: function (event, player) {
                                            return player.hasMark('re_jianshumrfz_draw');
                                        },
                                        content: function () {
                                            trigger.num++;
                                            player.logSkill('jianshumrfz');
                                        },
                                    },
                                    usesha: {
                                        direct: true,
                                        trigger: { player: "phaseUseBegin" },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('选择一名其他角色视为对其使用一张【杀】', function (card, player, target) {
                                                return target != player && player.inRange(target);
                                            }).ai = function (target) {
                                                return -get.attitude(player, target);
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                player.useCard({ name: 'sha' }, true, false, target);
                                                player.logSkill('jianshumrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            re_chaoshengmrfz: {
                                audio: 'chaoshengmrfz',
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return !player.getStat('damage');
                                },
                                frequent: true,
                                content: function () {
                                    player.draw(2);
                                    player.recover();
                                },
                            },
                            //煌
                            yanxunmrfz: {
                                audio: 4,
                                trigger: { player: 'damageBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return event.parent.name == '_lianhuan' || event.parent.name == '_lianhuan2';
                                },
                                content: function () {
                                    trigger.num--;
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + 2;
                                    },
                                },
                                group: ['yanxunmrfz_kaishi', 'yanxunmrfz_draw', 'yanxunmrfz_use', 'yanxunmrfz_judge'],
                                subSkill: {
                                    judge: {
                                        audio: 'yanxunmrfz',
                                        trigger: { player: 'damageBegin' },
                                        forced: true,
                                        filter: function (event, player) {
                                            return event.getParent('phaseJudge') && event.getParent('phaseJudge').player == player;
                                        },
                                        content: function () {
                                            trigger.num -= 2;
                                        },
                                    },
                                    kaishi: {
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        popup: false,
                                        content: function () {
                                            'step 0'
                                            if (player.isLinked()) {
                                                player.link();
                                                player.logSkill('yanxunmrfz');
                                            }
                                            if (player.isTurnedOver()) {
                                                player.chooseBool().set('prompt', get.prompt('yanxunmrfz')).set('prompt2', '【严训】:是否翻面并跳过下个出牌阶段？').set('ai', function () {
                                                    var player = _status.event.player;
                                                    return player.countCards('h') < (player.getHandcardLimit() * 2);
                                                });
                                            }
                                            'step 1'
                                            if (result.bool) {
                                                player.turnOver();
                                                player.addSkill('yanxunmrfz_skipped');
                                                player.logSkill('yanxunmrfz');
                                            }
                                        },
                                    },
                                    skipped: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '跳过下个出牌阶段',
                                        },
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            player.skip('phaseUse');
                                            game.log(player, '的出牌阶段将被跳过');
                                            player.removeSkill('yanxunmrfz_skipped');
                                        },
                                    },
                                    draw: {
                                        audio: 'yanxunmrfz',
                                        trigger: { player: 'phaseUseBegin' },
                                        filter: function (event, player) {
                                            return player.getHistory('skipped').contains('phaseDraw');
                                        },
                                        frequent: true,
                                        prompt: '【严训】:是否摸一张牌?',
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                    use: {
                                        audio: 'yanxunmrfz',
                                        trigger: { player: 'phaseDiscardBefore' },
                                        filter: function (event, player) {
                                            var cardh = player.getCards('h'), canuse = false;
                                            for (var i = 0; i < cardh.length; i++) {
                                                if (player.canUseToAnyone(cardh[i])) {
                                                    canuse = true;
                                                    break;
                                                }
                                            }
                                            return player.getHistory('skipped').contains('phaseUse') && canuse == true;
                                        },
                                        prompt: '【严训】:是否使用至多两张手牌?',
                                        content: function () {
                                            'step 0'
                                            event.num = 0;
                                            'step 1'
                                            var cardh = player.getCards('h'), list = [], cards = [];
                                            event.num++;
                                            for (var i = 0; i < cardh.length; i++) {
                                                cards.push(cardh[i].name);
                                            }
                                            for (var name of lib.inpile) {
                                                if (!cards.contains(name)) continue;
                                                var card = { name: name, isCard: true };
                                                if (!player.canUseToAnyone(card)) continue;
                                                if (get.type(card) == 'basic') {
                                                    list.push(['基本', '', name])
                                                }
                                                else if ((get.type(card) == 'trick' || get.type(card) == 'delay')) {
                                                    list.push(['锦囊', '', name]);
                                                }
                                                else if (get.type(card) == 'equip') {
                                                    list.push(['装备', '', name]);
                                                }
                                            }
                                            if (list.length) player.chooseButton(['【严训】:请选择你要使用的手牌(' + event.num + '/2)', [list, 'vcard']], 'hidden');
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) {
                                                var name = result.links[0][2];
                                                player.chooseToUse(function (card, player, event) {
                                                    return get.name(card) == name;
                                                }, '【严训】:你可以使用一张' + get.translation(name));
                                                if (event.num < 2) event.goto(1);
                                            }

                                        },
                                    },
                                },
                            },
                            chuchanmrfz: {
                                intro: {
                                    content: function (event, player) {
                                        if (!player.storage.chuchanmrfz) return '未发动';
                                        if (player.storage.chuchanmrfz && player.hasSkill('chuchanmrfz_buff1')) return '本轮受到伤害后回复一点体力';
                                        return '已发动';
                                    },
                                },
                                audio: 2,
                                trigger: { player: 'changeHp' },
                                forced: true,
                                unique: true,
                                mark: true,
                                limited: true,
                                skillAnimation: true,
                                animationStr: '除颤',
                                animationColor: 'fire',
                                init: function (player) {
                                    player.storage.chuchanmrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.chuchanmrfz && player.hp < 2;
                                },
                                content: function () {
                                    player.storage.chuchanmrfz = true;
                                    player.recoverTo(2);
                                    player.addSkill('chuchanmrfz_buff1');
                                    player.addSkill('chuchanmrfz_buff2');
                                },
                                subSkill: {
                                    buff1: {
                                        audio: 'chuchanmrfz',
                                        trigger: { player: 'damageEnd' },
                                        firstDo: true,
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            player.recover();
                                        },
                                        ai: {
                                            effect: {
                                                target: function (card, player, target, current) {
                                                    if (get.tag(card, 'damage')) return 'zerotarget';
                                                    if (get.type(card) == 'trick' && get.tag(card, 'damage')) {
                                                        return 'zeroplayertarget';
                                                    }
                                                },
                                            },
                                        },
                                    },
                                    buff2: {
                                        charlotte: true,
                                        silent: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            player.removeSkill(['chuchanmrfz_buff1', 'chuchanmrfz_buff2']);
                                        },
                                    },
                                },
                            },
                            feixuemrfz: {
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.storage.feixuemrfz;
                                    }
                                },
                                init: function (player) {
                                    player.storage.feixuemrfz = 0;
                                },
                                onremove: true,
                                audio: 4,
                                trigger: { player: ['loseHpEnd', 'damageEnd'] },
                                content: function () {
                                    'step 0'
                                    event.num = trigger.num;
                                    'step 1'
                                    event.num--;
                                    var card = get.cardPile2(function (card) {
                                        return get.name(card) == 'sha' && card.nature == 'fire';
                                    });
                                    if (card) player.gain(card, 'gain2', 'log');
                                    else {
                                        player.draw();
                                    }
                                    'step 2'
                                    if (trigger.source && trigger.source.countCards('e') > 0) {
                                        player.storage.feixuemrfz += 1;
                                        player.discardPlayerCard(trigger.source, 'e', false).set('forceAuto', true).boolline = true;;
                                    }
                                    if (event.num > 0) event.goto(1);
                                },
                                group: 'feixuemrfz_clear',
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.storage.feixuemrfz = 0;
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 0.8,
                                },
                            },
                            //铃兰
                            hualaomrfz: {
                                marktext: '脆弱',
                                intro: {
                                    name: '脆弱',
                                    content: '下次受到的伤害+#',
                                },
                                audio: 2,
                                trigger: { source: 'damageBegin' },
                                filter: function (event, player) {
                                    return event.player != player;
                                },
                                check: function (event, player) {
                                    if (get.attitude(player, event.player) > 0) return false;
                                    if ((event.num + event.player.countMark('hualaomrfz')) - event.player.hp >= 0) return false;
                                    return true;
                                },
                                content: function () {
                                    var target = trigger.player;
                                    target.addMark('hualaomrfz', trigger.num + 1, false);
                                    target.addSkill('hualaomrfz_eff');
                                    trigger.num = 0;
                                },
                                subSkill: {
                                    eff: {
                                        trigger: { player: 'damageBegin2' },
                                        filter: function (event, player) {
                                            return player.hasMark('hualaomrfz');
                                        },
                                        charlotte: true,
                                        direct: true,
                                        content: function () {
                                            trigger.num += player.countMark('hualaomrfz');
                                            player.removeAllmark('hualaomrfz', false);
                                            player.logSkill('hualaomrfz');
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 1.2,
                                },
                            },
                            huhuomrfz: {
                                intro: {
                                    content: '摸牌阶段摸牌数-#,出牌阶段结束时摸#张牌',
                                },
                                audio: 2,
                                trigger: { source: 'damageZero' },
                                content: function () {
                                    trigger.player.addMark('huhuomrfz', false);
                                    trigger.player.addSkill('huhuomrfz2');
                                },
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return player.hasMark('huhuomrfz');
                                        },
                                        content: function () {
                                            player.removeAllmark('huhuomrfz', false);
                                            trigger.player.removeSkill('huhuomrfz2');
                                        },
                                    },
                                },
                            },
                            huhuomrfz2: {
                                direct: true,
                                charlotte: true,
                                trigger: { player: 'phaseDrawBegin2' },
                                content: function () {
                                    trigger.num -= player.countMark('huhuomrfz');
                                },
                                group: ['huhuomrfz2_draw', 'huhuomrfz_clear'],
                                subSkill: {
                                    draw: {
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        content: function () {
                                            player.draw(player.countMark('huhuomrfz'));
                                        },
                                    },
                                },
                            },
                            wuyuemrfz: {
                                mod: {
                                    targetInRange: function (card, player, target, now) {
                                        if (card.name == 'sha' && get.color(card) == 'black') return true;
                                    },
                                    selectTarget: function (card, player, range) {
                                        if (card.name == 'sha' && range[1] != -1 && get.color(card) == 'red') range[1]++;
                                    },
                                },
                            },
                            //闪灵
                            lichangmrfz: {
                                marktext: '屏障',
                                markimage: 'extension/明日方舟/image/orther/slmrfzimage.png',
                                intro: {
                                    name: '屏障',
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 6,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h') > 0 && game.hasPlayer(function (current) {
                                        return !current.hasSkill('lichangmrfz2');
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return !target.hasSkill('lichangmrfz2');
                                },
                                filterCard: true,
                                lose: false,
                                discard: false,
                                delay: 0,
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (player.countCards('h', function (card) {
                                        return get.type(card) == 'equip';
                                    }) > 0) return get.type(card) == 'equip';
                                    return 6 - get.value(card);
                                },
                                content: function () {
                                    target.addTempSkill('lichangmrfz2');
                                    target.addToExpansion(cards, target, 'giveAuto').gaintag.add('lichangmrfz');
                                    if (get.type(cards[0]) == 'equip' && target.hujia < 5) target.changeHujia();
                                    if (target.hujia < 5) target.changeHujia();
                                },
                                group: ['lichangmrfz_rem', 'lichangmrfz_dam', 'lichangmrfz_da'],
                                subSkill: {
                                    rem: {
                                        audio: 'lichangmrfz',
                                        chargeSkill: true,
                                        forced: true,
                                        trigger: { global: 'gainAfter' },
                                        filter: function (event, player) {
                                            if (event.getParent(1).name != 'lichangmrfz_dam') return false;
                                            return event.fromStorage == true || game.hasPlayer2(function (current) {
                                                var evt = event.getl(current);
                                                return evt && evt.xs && evt.xs.length > 0;
                                            });
                                        },
                                        content: function () {
                                            player.addMark('charge');
                                            //var str='';
                                            //str+=get.translation(event)+'</br>';
                                            //for(var i=1;i<=10;i++) str+=get.translation(event.getParent(i))+'</br>';
                                            //game.log(str);
                                            //player.popup(str);
                                        },
                                    },
                                    dam: {
                                        audio: 'lichangmrfz',
                                        forced: true,
                                        trigger: { global: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.hujia && event.player.getExpansions('lichangmrfz').length > 0;
                                        },
                                        content: function () {
                                            var cards = trigger.player.getExpansions('lichangmrfz');
                                            trigger.player.gain(cards, 'gain2');
                                        },
                                    },
                                    da: {
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return player.countMark('charge') >= 3;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(get.prompt('lichangmrfz'), '【力场】:你可以选择三名角色，令其各从牌堆或弃牌堆中获得一张装备牌', [1, 3]).ai = function (target) {
                                                return get.attitude(player, target) > 0;
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                player.removeMark('charge', player.countMark('charge'));
                                                player.logSkill('lichangmrfz');
                                                event.targets = result.targets;
                                                event.num = 0;
                                                event.num2 = result.targets.length;
                                            }
                                            else event.finish();
                                            'step 2'
                                            var card = get.cardPile(function (card) {
                                                return get.type(card) == 'equip';
                                            });
                                            event.card = card;
                                            var list = game.filterPlayer(function (target) {
                                                return target != player && target.hasSkill('lichangmrfz');
                                            });
                                            var str = '【力场】:你可以将此牌交给' + get.translation(list);
                                            if (list.length > 1) str += '其中一人';
                                            str += ',或取消自己装备此牌';
                                            event.targets[event.num].gain(card, 'gain');
                                            event.targets[event.num].chooseTarget(str, function (card, player, target) {
                                                return target != event.targets[event.num] && target.hasSkill('lichangmrfz');
                                            }).ai = function (target) {
                                                var player = event.targets[event.num];
                                                if (get.attitude(player, target) <= 0) return 0;
                                                return get.attitude(player, target) >= 0;
                                            };
                                            'step 3'
                                            if (result.bool) {
                                                if (event.targets[event.num].hasCard(function (card) {
                                                    return card == event.card;
                                                }, 'h')) event.targets[event.num].give(event.card, player);
                                                event.targets[event.num].recover();
                                            }
                                            else if (event.targets[event.num].hasCard(function (card) {
                                                return card == event.card;
                                            }, 'h')) event.targets[event.num].chooseUseTarget(event.card, true);
                                            if (event.num < event.num2 - 1) {
                                                event.num++;
                                                event.goto(2);
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.2,
                                    order: function () {
                                        var player = _status.event.player;
                                        if (player.hp <= 2) return 13;
                                        return 1;
                                    },
                                    result: {
                                        player: 1,
                                        target: 1,
                                    },
                                },
                            },
                            lichangmrfz2: {
                                charlotte: true,
                            },
                            jiushumrfz: {
                                audio: 2,
                                enable: 'chooseToUse',
                                filter: function (event, player) {
                                    if (player.countCards('he', function (card) {
                                        return get.color(card) == 'black';
                                    }) == 0) return false;
                                    return player.isPhase('phaseJudge', false) || player.isPhase('phaseZhunbei', false);
                                },
                                filterCard: function (card) {
                                    return get.color(card) == 'black';
                                },
                                viewAsFilter: function (player) {
                                    if (!player.isPhase('phaseJudge', false) && !player.isPhase('phaseZhunbei', false)) return false;
                                    return player.countCards('he', { color: 'black' }) > 0;
                                },
                                viewAs: { name: 'wuxie' },
                                position: 'he',
                                prompt: '将一张黑色牌当无懈可击使用',
                                check: function (card) {
                                    var tri = _status.event.getTrigger();
                                    if (tri && tri.card && tri.card.name == 'chiling') return -1;
                                    return 8 - get.value(card)
                                },
                            },
                            yubimrfz: {
                                global: 'yubimrfz_eff',
                                subSkill: {
                                    eff: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + Math.min(player.hujia, 5);
                                            },
                                        },
                                    },
                                },
                            },
                            //麦哲伦
                            kanchamrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('h') > 0;
                                },
                                filterCard: true,
                                intro: {
                                    content: '已发动#次【勘查】',
                                },
                                check: function (card) {
                                    var player = _status.event.player;
                                    if (player.hasCard(function (card) {
                                        return get.type(card) == 'equip';
                                    })) return get.type(card) == 'equip';
                                    if (player.hasCard(function (card) {
                                        return get.type(card) == 'trick';
                                    })) return get.type(card) == 'trick';
                                    return 6 - get.value(card);
                                },
                                content: function () {
                                    'step 0'
                                    event.cards2 = cards[0];
                                    player.chooseControl('顶部', '底部').set('prompt', get.prompt('kanchamrfz')).set('prompt2', '【勘查】:请选择展示牌堆顶还是牌堆底' + (player.countMark('kanchamrfz') + 3) + '张牌').set('ai', function () {
                                        return [0, 1].randomGet();
                                    });
                                    'step 1'
                                    var num = player.countMark('kanchamrfz') + 3;
                                    if (result.index == 0) {
                                        var cards = game.cardsGotoOrdering(get.cards(num)).cards;
                                        event.cards = cards;
                                    }
                                    else if (result.index == 1) event.cards = get.bottomCards(num);
                                    else event.finish();
                                    'step 2'
                                    var list = [];
                                    player.showCards(event.cards, get.translation(player) + '发动了【勘查】');
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (get.type(event.cards2, 'trick') != get.type(event.cards[i], 'trick')) list.push(event.cards[i]);
                                    }
                                    if (list.length) player.gain(list, 'gain2');
                                    'step 3'
                                    if (player.countMark('kanchamrfz') < 3) player.addMark('kanchamrfz', false);
                                },
                                ai: {
                                    order: 13,
                                    threaten: 1.1,
                                    result: {
                                        player: 1,
                                    },
                                },
                            },
                            longtengmrfz: {
                                markimage: "extension/明日方舟/image/orther/mrfz_LTF.png",
                                //markimage:function(){
                                //    var player=_status.event.player;
                                //    if(player.isTypeExpansions('longtengmrfz','basic')) return 'extension/明日方舟/mzlmrfz1.png';
                                //    if(player.isTypeExpansions('longtengmrfz','trick')) return 'extension/明日方舟/mzlmrfz2.png';
                                //    if(player.isTypeExpansions('longtengmrfz','equip')) return 'extension/明日方舟/mzlmrfz3.png';
                                //},
                                //marktext:function(){
                                //    var player=_status.event.player;
                                //    if(player.getTypeExpansions('longtengmrfz','basic')) return '龙腾F';
                                //    if(player.getTypeExpansions('longtengmrfz','trick')) return '龙腾L';
                                //    if(player.getTypeExpansions('longtengmrfz','equip')) return '龙腾A';
                                //},
                                intro: {
                                    //name:function(){
                                    //    var player=_status.event.player;
                                    //    if(player.isTypeExpansions('longtengmrfz','basic')) return '龙腾F';
                                    //    if(player.isTypeExpansions('longtengmrfz','trick')) return '龙腾L';
                                    //    if(player.isTypeExpansions('longtengmrfz','equip')) return '龙腾A';
                                    //},
                                    content: 'expansion',
                                    markcount: 'expansion',
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 8,
                                trigger: {
                                    player: 'loseAfter',
                                    global: 'loseAsyncAfter',
                                },
                                filter: function (event, player) {
                                    if (player.isPhase('phaseDiscard', false)) return false;
                                    if (event.type != 'discard' || event.getlx === false) return;
                                    var evt = event.getl(player);
                                    for (var i = 0; i < evt.cards2.length; i++) {
                                        if (get.position(evt.cards2[i], evt.hs.contains(evt.cards2[i]) ? evt.player : false) == 'd') {
                                            return true;
                                        }
                                    }
                                    return false;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var cards = [];
                                    var evt = trigger.getl(player);
                                    for (var i = 0; i < evt.cards2.length; i++) {
                                        if (get.position(evt.cards2[i]) == 'd') {
                                            cards.push(evt.cards2[i]);
                                        }
                                    }
                                    if (!cards.length) {
                                        event.finish();
                                    }
                                    else {
                                        if (cards.length > 1) player.chooseButton(['【龙腾】:请选择一张牌', cards]).set('ai', button => {
                                            var player = _status.event.player;
                                            if (game.hasPlayer(function (current) {
                                                return get.attitude(player, current) > 2;
                                            })) return get.type(button.link) == 'equip' || get.type(button.link, 'trick') == 'trick';
                                            return get.type(button.link) == 'basic';
                                        });
                                        else {
                                            event.cards = cards;
                                            event.goto(2);
                                        }
                                    }
                                    'step 1'
                                    if (result.links && result.links.length) {
                                        event.cards = result.links;
                                    }
                                    'step 2'
                                    player.chooseTarget('【龙腾】:请选择一名角色，并将' + get.translation(event.cards) + '(' + get.translation(get.type(event.cards[0], 'trick')) + '牌)置于该角色武将牌上', function (card, player, target) {
                                        return target.getExpansions('longtengmrfz').length == 0;
                                    }).ai = function (target) {
                                        var player = _status.event.player;
                                        var type = get.type2(event.cards[0]);
                                        if (type == 'basic') return -get.attitude(player, target);
                                        else return get.attitude(player, target) > 2;
                                    };
                                    'step 3'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        var type = get.type2(event.cards[0]);
                                        target.addToExpansion(event.cards, target, 'give').gaintag.add('longtengmrfz');
                                        target.addSkill('longtengmrfz_changeI');
                                        player.logSkill('longtengmrfz', target);
                                    }
                                },
                                group: 'longtengmrfz_clear',
                                global: ['longtengmrfz_basic_1', 'longtengmrfz_basic_2', 'longtengmrfz_trick', 'longtengmrfz_equip'],
                                subSkill: {
                                    changeI: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'longtengmrfzAfter' },
                                        content: function () {
                                            player.removeSkill('longtengmrfz_changeI');
                                            if (player.isTypeExpansions('longtengmrfz', 'basic')) player.changeMarkImage('longtengmrfz', 'mrfz_LTF');
                                            if (player.isTypeExpansions('longtengmrfz', 'trick')) player.changeMarkImage('longtengmrfz', 'mrfz_LTL');
                                            if (player.isTypeExpansions('longtengmrfz', 'equip')) player.changeMarkImage('longtengmrfz', 'mrfz_LTA');
                                        },
                                    },
                                    basic_1: {
                                        charlotte: true,
                                        forced: true,
                                        trigger: { player: 'phaseDrawBegin' },
                                        filter: function (event, player) {
                                            return player.isTypeExpansions('longtengmrfz', 'basic');
                                        },
                                        content: function () {
                                            trigger.num--;
                                            player.logSkill('longtengmrfz');
                                        },
                                    },
                                    basic_2: {
                                        charlotte: true,
                                        forced: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        filter: function (event, player) {
                                            return player.isTypeExpansions('longtengmrfz', 'basic');
                                        },
                                        content: function () {
                                            player.draw();
                                            player.logSkill('longtengmrfz');
                                        },
                                    },
                                    trick: {
                                        direct: true,
                                        trigger: { player: 'useCard2' },
                                        filter: function (event, player) {
                                            if (get.type(event.card, 'trick') != 'trick') return false;
                                            if (player.hasSkill('longtengmrfz_trick2')) return false;
                                            if (player.isTypeExpansions('longtengmrfz', 'trick') == false) return false;
                                            var info = get.info(event.card);
                                            if (info.allowMultiple == false) return false;
                                            if (event.targets && !info.multitarget) {
                                                if (game.hasPlayer(function (current) {
                                                    return lib.filter.targetEnabled2(event.card, player, current) && !event.targets.contains(current);
                                                })) {
                                                    return true;
                                                }
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('【龙腾】:你可以为此牌(' + get.translation(trigger.card) + ')额外指定一个目标', function (card, player, target) {
                                                var player = _status.event.player;
                                                if (_status.event.targets.contains(target)) return false;
                                                if (player.canUse(trigger.card, target, true) == false) return false;
                                                return lib.filter.targetEnabled2(_status.event.card, player, target);
                                            }).set('ai', function (target) {
                                                var trigger = _status.event.getTrigger();
                                                var player = _status.event.player;
                                                return get.effect(target, trigger.card, player, player);
                                            }).set('targets', trigger.targets).set('card', trigger.card);
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                                event.targets = result.targets;
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 2'
                                            player.logSkill('longtengmrfz', event.targets);
                                            trigger.targets.addArray(event.targets);
                                            'step 3'
                                            if (get.tag(trigger.card, 'damage')) {
                                                player.chooseBool('【龙腾】:是否令此牌伤害+1？');
                                            }
                                            else event.finish();
                                            'step 4'
                                            trigger.baseDamage++;
                                            player.addTempSkill('longtengmrfz_trick2');
                                        },
                                    },
                                    trick2: {
                                        charlotte: true,
                                    },
                                    equip: {
                                        trigger: { player: 'useCard2' },
                                        firstDo: true,
                                        filter: function (event, player) {
                                            if (get.type(event.card) != 'basic') return false;
                                            if (player.isTypeExpansions('longtengmrfz', 'equip') == false) return false;
                                            return true;
                                        },
                                        content: function () {
                                            'step 0'
                                            var list = ['不计入次数限制'];
                                            if (game.hasPlayer(function (current) {
                                                return !trigger.targets.contains(current) && player.canUse(trigger.card, current, false);
                                            })) list.add('增加目标');
                                            if (trigger.card.name == 'sha') list.add('伤害基数+1');
                                            player.chooseControl(list).set('prompt', '【龙腾】:请选择一项').set('ai', function () {
                                                var player = _status.event.player, num = [];
                                                for (var i = 0; i < list.length; i++) {
                                                    num.add(i);
                                                }
                                                if (get.name(_status.event.TriCard) == 'sha' && player.getCardUsable('sha') == 0 && player.countCards('h', 'sha') > 0) return 0;
                                                if (get.name(_status.event.TriCard) == 'sha' && (player.countCards('h', 'sha') == 0 || player.getCardUsable('sha') > 0)) return list.length - 1;
                                                if (get.name(_status.event.TriCard) == 'jiu') return 0;
                                                return num.randomGet();
                                            }).set('TriCard', trigger.card);
                                            'step 1'
                                            game.log(player, '选择了', result.control);
                                            player.popup(result.control);
                                            player.logSkill('longtengmrfz');
                                            if (result.control == '不计入次数限制') {
                                                if (trigger.addCount !== false && (trigger.card.name == 'sha' || trigger.card.name == 'jiu')) {
                                                    trigger.addCount = false;
                                                    if (trigger.card.name == 'sha') trigger.player.getStat().card.sha--;
                                                    else trigger.player.getStat().card.jiu--;
                                                }
                                                event.finish();
                                            }
                                            else if (result.control == '增加目标') {
                                                player.chooseTarget([1, 2], '【龙腾】:你可以为此牌(' + get.translation(trigger.card) + ')额外指定两个目标', function (card, player, target) {
                                                    var player = _status.event.player;
                                                    if (_status.event.targets.contains(target)) return false;
                                                    if (player.canUse(trigger.card, target, true) == false) return false;
                                                    return lib.filter.targetEnabled2(_status.event.card, player, target);
                                                }).set('ai', function (target) {
                                                    var trigger = _status.event.getTrigger();
                                                    var player = _status.event.player;
                                                    return get.effect(target, trigger.card, player, player);
                                                }).set('targets', trigger.targets).set('card', trigger.card);
                                            }
                                            else if (result.control == '伤害基数+1') {
                                                if (!trigger.baseDamage) trigger.baseDamage = 1;
                                                trigger.baseDamage += 1;
                                                event.finish();
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) {
                                                for (var i = 0; i < result.targets.length; i++) {
                                                    trigger.targets.push(result.targets[i]);
                                                    player.line(result.targets[i]);
                                                }
                                            }
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { player: ['phaseZhunbeiBegin', 'dieBegin'] },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                var cards = current.getExpansions('longtengmrfz');
                                                if (current.getExpansions('longtengmrfz').length) current.loseToDiscardpile(cards);
                                            });
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            //嵯峨
                            quanshanmrfz: {
                                audio: 2,
                                trigger: { global: 'phaseEnd' },
                                filter: function (event, player) {
                                    return event.player.countCards('h') == 0 && event.player != player;
                                },
                                prompt: function (event, player) {
                                    return '是否令' + get.translation(event.player) + '将手牌补至3张并令其获得一些负面效果？';
                                },
                                check: function (event, player) {
                                    if (event.player.hp < 2 && get.attitude(player, event.player) > 0) return true;
                                    if (get.attitude(player, event.player) > 2 && event.player.maxHp > 2) return Math.random() > 0.6;
                                    if (event.player.hp < 2) return false;
                                    return get.attitude(player, event.player) < 2;
                                },
                                content: function () {
                                    var target = trigger.player;
                                    target.drawTo(Math.min(3, target.maxHp));
                                    target.addSkill('quanshanmrfz_eff');
                                },
                                group: ['quanshanmrfz_clear', 'quanshanmrfz_clear2'],
                                subSkill: {
                                    clear2: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return event.player.hasSkill('quanshanmrfz_eff');
                                        },
                                        content: function () {
                                            var target = trigger.player;
                                            target.removeMark('quanshanmrfz_eff', target.countMark('quanshanmrfz_eff'));
                                            target.removeSkill('quanshanmrfz_eff');
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'dieBegin' },
                                        filter: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current.hasMark('quanshanmrfz') || current.hasSkill('quanshanmrfz_eff');
                                            });
                                        },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                current.removeMark('quanshanmrfz_eff', current.countMark('quanshanmrfz_eff'));
                                                current.removeSkill('quanshanmrfz_eff');
                                            });
                                        },
                                    },
                                    eff: {
                                        marktext: '恶',
                                        intro: {
                                            name: '恶',
                                            content: '·当你造成伤害时，你获得一个‘恶’</br>·你共有#个‘恶’',
                                        },
                                        mark: true,
                                        trigger: { source: 'damageEnd' },
                                        content: function () {
                                            'step 0'
                                            player.logSkill('quanshanmrfz');
                                            player.addMark('quanshanmrfz_eff');
                                            'step 1'
                                            if (player.getHandcardLimit() <= 0) {
                                                event.getParent('phaseUse').skipped = true;
                                            }
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num - player.countMark('quanshanmrfz_eff');
                                            },
                                        },
                                    },
                                },
                            },
                            chuemrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h') > 0 && player.inRange(current);
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return player.inRange(target) && target != player && target.countCards('h') > 0;
                                },
                                check: function () { return -1; },
                                selectTarget: [1, 2],
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    'step 0'
                                    event.num = 0;
                                    'step 1'
                                    var target = targets[event.num];
                                    var hs = target.getCards('h');
                                    var colred = false;
                                    for (var i = 0; i < hs.length; i++) {
                                        if (get.color(hs[i]) == 'red') {
                                            colred = true;
                                            break;
                                        }
                                    }
                                    player.viewHandcards(target);
                                    game.log(player, '观看了', target, '的手牌');
                                    if (colred) {
                                        var list = [];
                                        for (var i = 0; i < hs.length; i++) {
                                            if (list.length == 2) break;
                                            if (get.suit(hs[i]) == 'club' && !list.contains('梅花')) list.add('梅花');
                                            if (get.suit(hs[i]) == 'spade' && !list.contains('黑桃')) list.add('黑桃');
                                        }
                                        list.add('cancel2');
                                        if (list.length > 1) player.chooseControl(list).set('prompt', '【除恶】:请选择一个花色，然后其(' + get.translation(target) + ')弃置该花色的所有牌').set('ai', function () {
                                            var player = _status.event.player, hs = target.getCards(), num = 0;
                                            for (var i = 0; i < hs.length; i++) {
                                                if (get.suit(hs[i]) == 'club') num++;
                                                if (get.suit(hs[i]) == 'spade') num--;
                                            }
                                            if (list.length == 1) return 0;
                                            if (num > 0) return 0;
                                            return 1;
                                        });
                                    }
                                    else if (!colred) {
                                        player.chooseBool('【除恶】:是否弃置其(' + get.translation(target) + ')所有手牌？');
                                        event.goto(3);
                                    }
                                    else event.finish();
                                    'step 2'
                                    var target = targets[event.num];
                                    if (result.control != 'cancel2') {
                                        var hs = target.getCards();
                                        var dis = [];
                                        for (var i = 0; i < hs.length; i++) {
                                            if (get.suit(hs[i]) == (result.control == '黑桃' ? 'spade' : 'club')) dis.push(hs[i]);
                                        }
                                        target.discard(dis);
                                        player.draw(dis.length);
                                    }
                                    if (event.num < targets.length - 1) {
                                        event.num++;
                                        event.goto(1);
                                    }
                                    else event.finish();
                                    'step 3'
                                    var target = targets[event.num];
                                    if (result.bool) {
                                        var dis = target.getCards();
                                        target.discard(dis);
                                        if (target.hasMark('quanshanmrfz_eff')) {
                                            target.damage(target.countMark('quanshanmrfz_eff'));
                                            target.removeMark('quanshanmrfz_eff', target.countMark('quanshanmrfz_eff'));
                                        }
                                        else event.goto(5);
                                    }
                                    'step 4'
                                    if (event.num < targets.length - 1) {
                                        event.num++;
                                        event.goto(1);
                                    }
                                    else event.finish();
                                    'step 5'
                                    var target = targets[event.num];
                                    if (!target.hasSkill('quanshanmrfz_eff')) {
                                        target.drawTo(Math.min(3, target.maxHp));
                                        target.addSkill('quanshanmrfz_eff');
                                        player.popup('劝善');
                                        player.logSkill('quanshanmrfz', target);
                                    }
                                    event.goto(4);
                                },
                                ai: {
                                    order: 13,
                                    result: {
                                        player: 1,
                                        target: -1,
                                    },
                                },
                            },
                            //保存者 弗里斯顿
                            shouwangmrfz: {
                                audio: 2,
                                trigger: {
                                    global: 'phaseBefore',
                                    player: 'enterGame',
                                },
                                forced: true,
                                unique: true,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(true, '【守望】:请选择一名其他角色', function (card, player, target) {
                                        return target != player;
                                    }).ai = function (target) {
                                        return get.attitude(player, target) > 0;
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        result.targets[0].addSkill('shouwangmrfz2');
                                    }
                                },
                                group: ['shouwangmrfz_die', 'shouwangmrfz_recover', 'shouwangmrfz_draw'],
                                subSkill: {
                                    die: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { global: 'dieBegin' },
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return event.player.hasSkill('shouwangmrfz2');
                                        },
                                        content: function () {
                                            //player.die()._triggered=null;
                                            player.loseMaxHp(player.maxHp);
                                            player.logSkill('shouwangmrfz');
                                        },
                                    },
                                    recover: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'dying' },
                                        content: function () {
                                            player.recoverTo(1);
                                            player.logSkill('shouwangmrfz');
                                        },
                                    },
                                    draw: {
                                        audio: 2,
                                        trigger: { player: 'drawAfter' },
                                        filter: function (event, player) {
                                            return event.getParent().name != 'shouwangmrfz2';
                                        },
                                        check: function (event, player) {
                                            var target = game.findPlayer(function (current) {
                                                return current.hasSkill('shouwangmrfz2');
                                            });
                                            return get.attitude(player, target) > 0;
                                        },
                                        prompt: function (event, player) {
                                            var target = game.findPlayer(function (current) {
                                                return current.hasSkill('shouwangmrfz2');
                                            });
                                            return '是否令' + get.translation(target) + '摸一张牌？';
                                        },
                                        content: function () {
                                            player.logSkill('shouwangmrfz');
                                            game.countPlayer(function (current) {
                                                if (current.hasSkill('shouwangmrfz2')) current.draw();
                                            });
                                        },
                                    },
                                },
                            },
                            shouwangmrfz2: {
                                mark: true,
                                intro: {
                                    content: '文明的消亡',
                                },
                                trigger: { player: 'drawAfter' },
                                filter: function (event, player) {
                                    return event.getParent().name != 'shouwangmrfz_draw';
                                },
                                prompt: function (event, player) {
                                    var target = game.findPlayer(function (current) {
                                        return current.hasSkill('shouwangmrfz');
                                    });
                                    return '是否令' + get.translation(target) + '摸一张牌？';
                                },
                                check: function (event, player) {
                                    var target = game.findPlayer(function (current) {
                                        return current.hasSkill('shouwangmrfz');
                                    });
                                    return get.attitude(player, target) > 0;
                                },
                                content: function () {
                                    player.logSkill('shouwangmrfz');
                                    game.countPlayer(function (current) {
                                        if (current.hasSkill('shouwangmrfz')) current.draw();
                                    });
                                },
                            },
                            xijimrfz: {
                                audio: 2,
                                trigger: { player: 'dieBegin' },
                                filter: function (event, player) {
                                    return player.countCards('hej') > 0;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('【希冀】:你可以将你区域内所有的牌交给一名其他角色', function (card, player, target) {
                                        return target != player;
                                    }).ai = function (target) {
                                        return get.attitude(player, target) > 2 && target.hp > 0;
                                    };
                                    'step 1'
                                    if (result.bool) {
                                        var hej = player.getCards('hej'), target = result.targets[0];
                                        player.give(hej, target);
                                        player.logSkill('xijimrfz', target);
                                        target.addSkill('xijimrfz_eff');
                                        target.addMark('xijimrfz_eff', hej.length, false);
                                    }
                                },
                                group: 'xijimrfz_die',
                                subSkill: {
                                    die: {
                                        audio: 'xijimrfz',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            return player.maxHp <= 5;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseBool('【希冀】:是否失去所有体力上限？');
                                            'step 1'
                                            if (result.bool) {
                                                var num = Math.floor(player.maxHp / 2);
                                                player.draw(Math.min(3, num > 1 ? num : 1));
                                                player.loseMaxHp(player.maxHp);
                                            }
                                        },
                                    },
                                    eff: {
                                        charlotte: true,
                                        intro: {
                                            content: '攻击距离、使用【杀】的次数+#',
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + player.countMark('xijimrfz_eff');
                                            },
                                            attackRange: function (player, num) {
                                                return num + player.countMark('xijimrfz_eff');
                                            },
                                        },
                                        trigger: { player: 'phaseEnd' },
                                        silent: true,
                                        content: function () {
                                            player.removeMark('xijimrfz_eff', player.countMark('xijimrfz_eff'), false);
                                            player.removeSkill('xijimrfz_eff');
                                        },
                                    },
                                },
                            },
                            jingmomrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { global: 'roundStart' },
                                content: function () {
                                    player.loseMaxHp();
                                },
                                mod: {
                                    maxHandcardBase: function (player, num) {
                                        return 5;
                                    },
                                },
                            },
                            //新银灰
                            xuebianmrfz: {
                                intro: {
                                    content: '已造成#点伤害',
                                },
                                onremove: true,
                                audio: 2,
                                usable: 1,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('h') > 0 && game.hasPlayer(function (current) {
                                        return current != player && current.countCards('h') > 0;
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h') > 0;
                                },
                                selectTarget: [1, 2],
                                check: function () {
                                    return -1;
                                },
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    'step 0'
                                    event.cards1 = [];
                                    event.cards2 = [];
                                    event.cards3 = [];
                                    for (i of targets) i.addTempSkill('xuebianmrfz2', { player: 'phaseEnd' });
                                    targets.push(player);
                                    targets.sortBySeat();
                                    var next = player.chooseCardOL(targets, '请选择要展示的牌', true, [1, 3]).set('ai', function (card) {
                                        return -get.value(card);
                                    }).set('source', player);
                                    next.aiCard = function (target) {
                                        var hs = target.getCards('h');
                                        return { bool: true, cards: [hs.randomGet()] };
                                    };
                                    next._args.remove('glow_result');
                                    'step 1'
                                    var cards = [];
                                    var num = 0;
                                    event.videoId = lib.status.videoId++;
                                    for (var i = 0; i < targets.length; i++) {
                                        for (var j = 0; j < result[i].cards.length; j++) {
                                            cards.push(result[i].cards[j]);
                                        }
                                    }
                                    event.cards = cards;
                                    game.log(player, '展示了', targets, '的', cards);
                                    game.broadcastAll(function (targets, cards, id, player) {
                                        var dialog = ui.create.dialog(get.translation(player) + '发动了【雪变】', cards);
                                        dialog.videoId = id;
                                        var getName = function (target) {
                                            if (target._tempTranslate) return target._tempTranslate;
                                            var name = target.name;
                                            if (lib.translate[name + '_ab']) return lib.translate[name + '_ab'];
                                            return get.translation(name);
                                        }
                                        for (var i = 0; i < targets.length; i++) {
                                            if (i == 0) event.cards1 = result[i].cards;
                                            if (i == 1) event.cards2 = result[i].cards;
                                            if (i == 2) event.cards3 = result[i].cards;
                                            for (var j = 0; j < result[i].cards.length; j++) {
                                                if (i == 0) dialog.buttons[j].querySelector('.info').innerHTML = getName(targets[i]);
                                                else if (i == 1) dialog.buttons[j + result[i - 1].cards.length].querySelector('.info').innerHTML = getName(targets[i]);
                                                else dialog.buttons[j + result[i - 2].cards.length + result[i - 1].cards.length].querySelector('.info').innerHTML = getName(targets[i]);
                                                if (get.color(result[i].cards[j]) == 'red') num++;
                                                else num--;
                                            }
                                        }
                                    }, targets, cards, event.videoId, player);
                                    game.delay(4);
                                    //红多
                                    if (num > 0) {
                                        player.chooseTarget('【雪变】：你可以对其中一名角色造成一点伤害并令其弃置其展示的牌', function (card, player, target) {
                                            return target != player && target.hasSkill('xuebianmrfz2');
                                        }).set('ai', function (target) {
                                            var player = _status.event.player;
                                            return get.attitude(player, target) < 0;
                                        });
                                        event.targets = result;
                                    }
                                    else {
                                        for (var i = 0; i < targets.length; i++) {
                                            targets[i].discard(result[i].cards);
                                        }
                                    }
                                    'step 2'
                                    var list = [event.cards1, event.cards2, event.cards3];
                                    game.broadcastAll('closeDialog', event.videoId);
                                    if (result.bool) {
                                        result.targets[0].damage();
                                        for (var i = 0; i < event.targets.length; i++) {
                                            if (event.targets[i] == result.targets[0]) var cards = list[i];
                                        }
                                        result.targets[0].discard(cards);
                                    }
                                },
                                group: 'xuebianmrfz_dam',
                                subSkill: {
                                    dam: {
                                        silent: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.getParent().name == 'xuebianmrfz';
                                        },
                                        content: function () {
                                            player.addMark('xuebianmrfz', trigger.num, false);
                                        },
                                    },
                                },
                                ai: {
                                    order: 12,
                                    expose: 0.1,
                                    result: {
                                        player: 1,
                                        target: -1,
                                    },
                                },
                            },
                            xuebianmrfz2: {
                                charlotte: true,
                            },
                            tonghemrfz: {
                                audio: 2,
                                derivation: ['xinyingshimrfz', 'new_xinbangmrfz'],
                                skillAnimation: true,
                                animationColor: 'thunder',
                                unique: true,
                                juexingji: true,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countMark('xuebianmrfz') >= 2 || game.roundNumber > 2;
                                },
                                content: function () {
                                    player.addMark('xinyingshimrfz', player.countMark('xuebianmrfz'), false);
                                    player.removeSkill('xuebianmrfz');
                                    player.addSkill('xinyingshimrfz');
                                    player.addSkill('new_xinbangmrfz');
                                    player.loseMaxHp();
                                    player.recoverTo();
                                    player.awakenSkill('tonghemrfz');
                                },
                            },
                            xinyingshimrfz: {
                                audio: 'yingshimrfz',
                                enable: "phaseUse",
                                usable: 1,
                                filter: function (event, player) {
                                    return game.hasPlayer((current) => lib.skill.xinyingshimrfz.filterTarget(null, player, current));
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h') > 0;
                                },
                                content: function () {
                                    var num = player.countMark('xinyingshimrfz') + 1;
                                    var max = target.countCards('h');
                                    if (max > num) return player.discardPlayerCard(num, target, 'h', true, 'visible');
                                    if (num >= max) return player.discardPlayerCard(max, target, 'h', true, 'visible');
                                    game.log(player, '观看了', target, '的手牌');
                                },
                                ai: {
                                    order: 13,
                                    expose: 0.1,
                                    threaten: 1.1,
                                    result: {
                                        player: 1,
                                        target: -1,
                                    },
                                },
                            },
                            xinbangmrfz: {
                                audio: 2,
                                trigger: {
                                    player: "phaseDrawBegin2",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return event.num > 0 && !event.numFixed;
                                },
                                content: function () {
                                    "step 0"
                                    player.storage.xinbangmrfz = [];
                                    var num = get.copy(trigger.num);
                                    player.chooseTarget(get.prompt('xinbangmrfz'), '选择至多' + get.translation(num) + '名其他角色，其选择让你定向摸牌，然后你少摸等量的牌', [1, num], function (card, player, target) {
                                        return player != target;
                                    }, function (target) {
                                        var att = get.attitude(_status.event.player, target);
                                        return att > 0;
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        event.targets = result.targets;
                                        event.num = 0;
                                        trigger.num -= result.targets.length;
                                    }
                                    else {
                                        event.finish();
                                    }
                                    "step 2"
                                    var target = event.targets[event.num];
                                    var att = get.attitude(target, player);
                                    target.addTempSkill('xinbangmrfz2', { player: 'phaseUseEnd' });
                                    target.chooseControl('basic', 'trick', 'equip').set('prompt', "【兴邦】：请让" + get.translation(player) + '摸一张指定类型牌，当此牌造成伤害时，你与其各摸一张牌').set('ai', function (player) {
                                        if (att > 0) return [1, 2].randomGet();
                                        return 0;
                                    });
                                    'step 3'
                                    var card = get.cardPile2(function (card) {
                                        return get.type(card, 'trick') == result.control;
                                    });
                                    if (card) {
                                        player.gain(card, 'gain2').gaintag = ['xinbangmrfz'];
                                    }
                                    else player.chat('牌堆中没有' + get.translation(result.control) + '牌了！');
                                    'step 4'
                                    var cards = player.getCards('h', function (card) {
                                        return card.hasGaintag('xinbangmrfz');
                                    });
                                    for (i of cards) {
                                        i.storage.xinbangmrfz = true;
                                    }
                                    if (event.num < event.targets.length - 1) {
                                        event.num++;
                                        event.goto(2);
                                    }
                                    'step 5'
                                    if (trigger.num <= 0) game.delay();
                                },
                                group: ['xinbangmrfz_draw', 'xinbangmrfz_lose'],
                                subSkill: {
                                    draw: {
                                        audio: 'xinbangmrfz',
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            if (!event.cards || event.cards.length > 1) return false;
                                            return event.card.storage && event.card.storage.xinbangmrfz == true;
                                        },
                                        forced: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('【兴邦】:请选择一名其他角色，然后你与其各摸一张牌', true, function (card, player, target) {
                                                return target != player && target.hasSkill('xinbangmrfz2');
                                            }).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.attitude(player, target) > 0;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                result.targets[0].draw();
                                                player.draw();
                                            }
                                        },
                                    },
                                    lose: {
                                        silent: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        filter: function (event, player) {
                                            return player.countCards('h', function (card) {
                                                return card.hasGaintag('xinbangmrfz');
                                            }) > 0;
                                        },
                                        content: function () {
                                            player.removeGaintag('xinbangmrfz');
                                        },
                                    },
                                },
                            },
                            xinbangmrfz2: {
                                charlotte: true,
                                silent: true,
                                onremove: true,
                            },
                            new_xinbangmrfz: {
                                audio: 'xinbangmrfz',
                                frequent: true,
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    if (!player.isPhaseUsing()) return false;
                                    var list = player.getStorage('xinbangmrfz2');
                                    if (!list.contains(get.type2(event.card, player))) return true;
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.xinbangmrfz2) {
                                        player.addTempSkill('xinbangmrfz2');
                                        player.storage.xinbangmrfz2 = [];
                                    }
                                    player.storage.xinbangmrfz2.add(get.type2(trigger.card, player));
                                    player.draw();
                                    'step 1'
                                    if (Array.isArray(result) && result.length > 0) {
                                        var card = result[0], cards = player.getCards('h'), list = [];
                                        for (var i of cards) {
                                            if (i == result[0]) continue;
                                            list.add(get.suit(i, player));
                                        }
                                        if (!list.contains(get.suit(card, player))) player.draw();
                                    }
                                },
                            },
                            //帕拉斯
                            yingzhumrfz: {
                                audio: 2,
                                trigger: { player: 'phaseBegin' },
                                direct: true,
                                filter: function (event, player) {
                                    return !player.storage.yingzhumrfz;
                                },
                                content: function () {
                                    'step 0'
                                    var next = player.chooseControl('准备', '判定', '摸牌', '出牌', '弃牌', '结束', 'cancel2').set('prompt', get.prompt('yingzhumrfz'));
                                    next.set('prompt2', '你可以令自己在任意阶段结束后额外执行一个该阶段');
                                    next.set('ai', function () {
                                        var player = _status.event.player;
                                        if (player.countCards('h', 'sha') > player.getCardUsable('sha') && game.hasPlayer(function (current) {
                                            return current != player && player.inRange(current) && get.attitude(player, current) < 0;
                                        })) return 3;
                                        return 2;
                                    });
                                    'step 1'
                                    if (result.control != 'cancel2') {
                                        var list = ['yingzhumrfz_Zhunbei', 'yingzhumrfz_judge', 'yingzhumrfz_draw', 'yingzhumrfz_use', 'yingzhumrfz_discard', 'yingzhumrfz_jieshu'];
                                        player.addTempSkill(list[result.index]);
                                        player.logSkill('yingzhumrfz');
                                    }
                                },
                                group: 'yingzhumrfz_phase',
                                subSkill: {
                                    phase: {
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            'step 0'
                                            player.storage.yingzhumrfz = false;
                                            player.chooseTarget(get.prompt('yingzhumrfz'), '你可以选择一名其他角色，令其于任一阶段结束后额外执行一次此阶段', function (card, player, target) {
                                                return target != player;
                                            }).set('ai', function (target) {
                                                var player = _status.event.player;
                                                var att = get.attitude(player, target);
                                                return att > 0;
                                            });
                                            'step 1'
                                            if (result.bool) {
                                                var att = get.attitude(player, result.targets[0]);
                                                var next = player.chooseControl('准备', '判定', '摸牌', '出牌', '弃牌', '结束');
                                                next.set('prompt', '【英祝】:请选择一个阶段,' + get.translation(result.targets[0]) + '于此阶段结束后额外执行一次此阶段');
                                                next.set('ai', function () {
                                                    var target = result.targets[0];
                                                    return 2;
                                                });
                                                player.storage.yingzhumrfz = true;
                                                event.target = result.targets[0];
                                            }
                                            else event.finish();
                                            'step 2'
                                            var list = ['yingzhumrfz_Zhunbei', 'yingzhumrfz_judge', 'yingzhumrfz_draw', 'yingzhumrfz_use', 'yingzhumrfz_discard', 'yingzhumrfz_jieshu'];
                                            event.target.addSkill(list[result.index]);
                                            player.logSkill('yingzhumrfz', event.target);
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                    },
                                    Zhunbei: {
                                        direct: true,
                                        trigger: { player: 'phaseZhunbeiAfter' },
                                        mark: true,
                                        intro: {
                                            content: '于准备阶段结束后额外执行一个准备阶段',
                                        },
                                        content: function () {
                                            event.next.remove(player.phaseZhunbei());
                                            trigger.next.push(player.phaseZhunbei());
                                            player.removeSkill('yingzhumrfz_Zhunbei');
                                        },
                                    },
                                    judge: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '于判定阶段结束后额外执行一个判定阶段',
                                        },
                                        trigger: { player: 'phaseJudgeAfter' },
                                        content: function () {
                                            event.next.remove(player.phaseJudge());
                                            trigger.next.push(player.phaseJudge());
                                            player.removeSkill('yingzhumrfz_judge');
                                        },
                                    },
                                    draw: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '于摸牌阶段结束后额外执行一个摸牌阶段',
                                        },
                                        trigger: { player: 'phaseDrawAfter' },
                                        content: function () {
                                            event.next.remove(player.phaseDraw());
                                            trigger.next.push(player.phaseDraw());
                                            player.removeSkill('yingzhumrfz_draw');
                                        },
                                    },
                                    use: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '于出牌阶段结束后额外执行一个出牌阶段',
                                        },
                                        trigger: { player: 'phaseUseAfter' },
                                        content: function () {
                                            event.next.remove(player.phaseUse());
                                            trigger.next.push(player.phaseUse());
                                            player.removeSkill('yingzhumrfz_use');
                                        },
                                    },
                                    discard: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '于弃牌阶段结束后额外执行一个弃牌阶段',
                                        },
                                        trigger: { player: 'phaseDiscardAfter' },
                                        content: function () {
                                            event.next.remove(player.phaseDiscard());
                                            trigger.next.push(player.phaseDiscard());
                                            player.removeSkill('yingzhumrfz_discard');
                                        },
                                    },
                                    jieshu: {
                                        direct: true,
                                        mark: true,
                                        intro: {
                                            content: '于结束阶段结束后额外执行一个结束阶段',
                                        },
                                        trigger: { player: 'phaseJieshuAfter' },
                                        content: function () {
                                            event.next.remove(player.phaseJieshu());
                                            trigger.next.push(player.phaseJieshu());
                                            player.removeSkill('yingzhumrfz_jieshu');
                                        },
                                    },
                                },
                            },
                            yingdanmrfz: {
                                audio: 2,
                                silent: true,
                                trigger: {
                                    global: ['phaseZhunbeiAfter', 'phaseJudgeAfter', 'phaseDrawAfter', 'phaseUseAfter', 'phaseDiscardAfter', 'phaseJieshuAfter'],
                                },
                                content: function () {
                                    trigger.player.addMark('yingdanmrfz', false);
                                },
                                group: 'yingdanmrfz_draw',
                                subSkill: {
                                    draw: {
                                        direct: true,
                                        trigger: { global: 'phaseEnd' },
                                        content: function () {
                                            'step 0'
                                            var target = trigger.player;
                                            if (target.countMark('yingdanmrfz') > 6) {
                                                var next = player.chooseBool('【英诞】:是否令' + (target == player ? '自己' : get.translation(target)) + '摸' + (target.countMark('yingdanmrfz') - 6) + '张牌？');
                                                next.set('ai', function () {
                                                    var player = _status.event.player;
                                                    var target = trigger.player;
                                                    return get.attitude(player, target) > 0;
                                                });
                                            }
                                            'step 1'
                                            var target = trigger.player;
                                            if (result.bool) {
                                                target.draw(target.countMark('yingdanmrfz') - 6);
                                                player.logSkill('yingdanmrfz', target);
                                            }
                                            target.removeMark('yingdanmrfz', target.countMark('yingdanmrfz'), false);
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            yingfenmrfz: {
                                audio: 2,
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    if (player.storage.yingfenmrfz) return false;
                                    return event.card.name == 'tao';
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget(get.prompt('yingfenmrfz'), '你可以令一名其他角色恢复一点体力', function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.attitude(player, target) > 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.storage.yingfenmrfz = true;
                                        result.targets[0].recover();
                                        player.logSkill('yingfenmrfz', result.targets[0]);
                                    }
                                },
                                group: 'yingfenmrfz_clear',
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        firstDo: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return player.storage.yingfenmrfz;
                                        },
                                        content: function () {
                                            player.storage.yingfenmrfz = false;
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            //瑕光
                            rencimrfz: {
                                audio: 2,
                                trigger: {
                                    global: 'phaseEnd',
                                },
                                filter: function (event, player) {
                                    if (event.player == player || event.player.getHistory('skipped').length == 0) return false;
                                    return lib.filter.targetEnabled({ name: 'sha' }, player, event.player) && (player.hasSha() || _status.connectMode && player.countCards('h') > 0);
                                },
                                direct: true,
                                content: function () {
                                    player.addTempSkill('rencimrfz_dam', 'useCardAfter');
                                    player.chooseToUse(function (card, player, event) {
                                        if (get.name(card) != 'sha') return false;
                                        return lib.filter.filterCard.apply(this, arguments);
                                    }, '【仁慈】:是否对' + get.translation(trigger.player) + '使用一张杀？').set('logSkill', 'rencimrfz').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                        if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                        return lib.filter.targetEnabled.apply(this, arguments);
                                    }).set('sourcex', trigger.player);
                                },
                                subSkill: {
                                    dam: {
                                        silent: true,
                                        trigger: {
                                            source: 'damageBegin',
                                            player: 'shaMiss',
                                        },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            if (trigger.name == 'damage') trigger.num++;
                                            player.removeSkill('rencimrfz_dam');
                                        },
                                    },
                                },
                            },
                            huiguangmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseEnd' },
                                filter: function (event, player) {
                                    return player.hasMark('huiguangmrfz') && player.countMark('huiguangmrfz') <= 6;
                                },
                                direct: true,
                                content: function () {
                                    'step 0'
                                    var num = player.countMark('huiguangmrfz') - 1;
                                    var list = ['准备', '判定', '摸牌', '出牌', '弃牌', '结束'];
                                    player.chooseTarget('【辉光】:你可以令一名其他角色跳过下个' + list[num] + '阶段', function (card, player, target) {
                                        return target != player && !target.hasSkill('huiguangmrfz_skip');
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(target, player), num = player.countMark('huiguangmrfz');
                                        if (num == 2 || num == 5) return att > 0;
                                        return att < 0;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0], num = player.countMark('huiguangmrfz') - 1;
                                        target.addSkill('huiguangmrfz_skip');
                                        target.addMark('huiguangmrfz_skip', num + 1, false);
                                        player.logSkill('huiguangmrfz', target);
                                    }
                                    'step 2'
                                    player.removeMark('huiguangmrfz', player.countMark('huiguangmrfz'), false);
                                },
                                ai: {
                                    expose: 0.1,
                                },
                                group: ['huiguangmrfz_mark'],
                                subSkill: {
                                    skip: {
                                        markimage: 'extension/明日方舟/image/orther/sleepmrfz.png',
                                        intro: {
                                            name: '睡眠',
                                            content: function (event, player) {
                                                var phase = ['phaseZhunbei', 'phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard', 'phaseJieshu'];
                                                var num = player.countMark('huiguangmrfz_skip') - 1;
                                                return '跳过下个' + get.tranPhase(phase[num]);
                                            },
                                        },
                                        silent: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            var phase = ['phaseZhunbei', 'phaseJudge', 'phaseDraw', 'phaseUse', 'phaseDiscard', 'phaseJieshu'];
                                            var num = player.countMark('huiguangmrfz_skip') - 1;
                                            player.skip(phase[num]);
                                            game.log(player, '跳过了', get.tranPhase(phase[num]));
                                            player.removeAllmark('huiguangmrfz_skip', false);
                                            player.removeSkill('huiguangmrfz_skip');
                                        },
                                    },
                                    mark: {
                                        silent: true,
                                        trigger: {
                                            player: "useCardAfter",
                                        },
                                        filter: function (event, player) {
                                            return _status.currentPhase == player;
                                        },
                                        content: function () {
                                            player.addMark('huiguangmrfz', false);
                                        },
                                    },
                                },
                            },
                            jiandunmrfz: {
                                audio: 2,
                                enable: ["chooseToRespond", "chooseToUse"],
                                hiddenCard: function (player, name) {
                                    if (get.type(name) != 'basic') return false;
                                    return player.hasCard(function (card) {
                                        return get.type2(card) == 'trick';
                                    }, 'hs');
                                },
                                filter: function (event, player) {
                                    if (!player.hasCard(function (card) {
                                        return get.type2(card) == 'trick';
                                    }, 'hs')) return false;
                                    for (var name of lib.inpile) {
                                        if (get.type(name) != 'basic') continue;
                                        if (event.filterCard({ name: name }, player, event)) return true;
                                        if (name == 'sha') {
                                            for (var nature of lib.inpile_nature) {
                                                if (event.filterCard({ name: 'sha', nature: nature }, player, event)) return true;
                                            }
                                        }
                                    }
                                    return false;
                                },
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var list = [];
                                        for (var name of lib.inpile) {
                                            if (get.type(name) != 'basic') continue;
                                            if (event.filterCard({ name: name }, player, event)) {
                                                list.push(['基本', '', name]);
                                            }
                                            if (name == 'sha') {
                                                for (var nature of lib.inpile_nature) {
                                                    if (event.filterCard({ name: name, nature: nature }, player, event)) list.push(['基本', '', 'sha', nature]);
                                                }
                                            }
                                        }
                                        return ui.create.dialog('剑盾', [list, 'vcard'], 'hidden');
                                    },
                                    check: function (button) {
                                        var player = _status.event.player;
                                        var card = { name: button.link[2], nature: button.link[3] };
                                        if (_status.event.getParent().type != 'phase' || game.hasPlayer(function (current) {
                                            return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                                        })) {
                                            switch (button.link[2]) {
                                                case 'tao': case 'shan': return 5;
                                                case 'jiu': {
                                                    if (player.countCards('hs', { type: 'trick' }) > 2) return 3;
                                                };
                                                case 'sha':
                                                    if (button.link[3] == 'fire') return 2.95;
                                                    else if (button.link[3] == 'thunder' || button.link[3] == 'ice') return 2.92;
                                                    else return 2.9;
                                            }
                                        }
                                        return 0;
                                    },
                                    backup: function (links, player) {
                                        return {
                                            audio: 'jiandunmrfz',
                                            filterCard: function (card, player, target) {
                                                return get.type2(card) == 'trick';
                                            },
                                            complexCard: true,
                                            selectCard: 1,
                                            check: function (card, player, target) {
                                                return 6 - get.value(card);
                                            },
                                            viewAs: { name: links[0][2], nature: links[0][3] },
                                            position: 'hes',
                                            popname: true,
                                        }
                                    },
                                    prompt: function (links, player) {
                                        return '你可以将一张锦囊牌当任意基本牌使用或打出'
                                    },
                                },
                                ai: {
                                    order: 3.1,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'fireAttack') return true;
                                        if (!player.hasCard(function (card) {
                                            return get.type2(card) == 'trick';
                                        }, 'hes')) {
                                            return false;
                                        }
                                    },
                                    result: {
                                        player: 1,
                                    },
                                    respondSha: true,
                                    respondShan: true,
                                    fireAttack: true,
                                },
                            },
                            //新星熊
                            xinboremrfz: {
                                audio: "banruomrfz",
                                mark: false,
                                markimage: 'extension/明日方舟/image/orther/xinboremrfz.png',
                                intro: {
                                    content: function (player) {
                                        var playerhas = game.findPlayer(function (current) {
                                            return current.hasSkill('xinboremrfz');
                                        });
                                        return get.translation(playerhas) + '正在保护你';
                                    },
                                },
                                group: ['xinboremrfz_choose', 'xinboremrfz_card', 'xinboremrfz_betarget'],
                                subSkill: {
                                    betarget: {
                                        audio: 'banruomrfz',
                                        trigger: {
                                            global: 'useCardToPlayer'
                                        },
                                        filter: function (event, player) {
                                            if (event.targets > 1 || get.type(event.card) == 'equip') return false;
                                            return event.target.hasMark('xinboremrfz') && player.getHandcardLimit() > 0;
                                        },
                                        prompt: function (event, player) {
                                            return '【般若】：是否令' + get.translation(event.card) + '的目标由' + get.translation(event.target) + '改为你？';
                                        },
                                        check: function (event, player) {
                                            var att = get.attitude(event.target, player);
                                            if ((event.card.name == 'wuzhong' || event.card.name == 'dongzhuxianji' || event.card.name == 'zenbing') && att < 0) return true;
                                            return att > 0 && get.tag(event.card, 'damage');
                                        },
                                        content: function () {
                                            'step 0'
                                            var target = trigger.target;
                                            trigger.targets.remove(target);
                                            trigger.getParent().triggeredTargets1.remove(target);
                                            trigger.untrigger();
                                            game.delayx();
                                            'step 1'
                                            trigger.targets.push(player);
                                            trigger.player.line(player, 'fire');
                                            game.log(trigger.card, '的目标被改为', player);
                                            player.addMark('xinboremrfz_losehdlimit', false);
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                    },
                                    choose: {
                                        direct: true,
                                        trigger: {
                                            global: 'phaseBefore',
                                            player: 'enterGame',
                                        },
                                        filter: function (event, player) {
                                            return (event.name != 'phase' || game.phaseNumber == 0);
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget(true, '【般若】：请选择一名其他角色，令其获得‘般若’标记', function (card, player, target) {
                                                return target != player;
                                            }).ai = function (target) {
                                                return get.attitude(player, target);
                                            };
                                            'step 1'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                target.addMark('xinboremrfz');
                                                player.logSkill('xinboremrfz', target);
                                                player.disableEquip('equip2');
                                                target.disableEquip('equip2');
                                                player.addSkill('xinboremrfz_handlit');
                                                target.addSkill('xinboremrfz_handlit');
                                            }
                                            player.addSkill('xinboremrfz_losehdlimit');
                                            player.removeSkill('xinboremrfz_choose');
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                    },
                                    card: {
                                        audio: 'xinboremrfz',
                                        enable: "chooseToUse",
                                        filter: function (event, player) {
                                            if (player.hasSkill('xinboremrfz_usedwuxie') && player.hasSkill('xinboremrfz_usedsha') && player.hasSkill('xinboremrfz_usedshan')) return false;
                                            return player.getHandcardLimit() > 0 || player.countDisabledSlot() < 5;
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                var vcards = [];
                                                for (var name of ['sha', 'shan', 'wuxie']) {
                                                    var card = { name: name, isCard: true };
                                                    if (name == 'wuxie' && player.hasSkill('xinboremrfz_usedwuxie')) continue;
                                                    if (name == 'shan' && player.hasSkill('xinboremrfz_usedshan')) continue;
                                                    if (name == 'sha' && player.hasSkill('xinboremrfz_usedsha')) continue;
                                                    if (name == 'sha') {
                                                        vcards.push(['基本', '', 'sha']);
                                                        for (var j of lib.inpile_nature) vcards.push(['基本', '', 'sha', j]);
                                                    }
                                                    else if (get.type(name) == 'trick') vcards.push(['锦囊', '', name]);
                                                    else if (get.type(name) == 'basic' && event.filterCard({ name: name }, player, event)) vcards.push(['基本', '', name]);
                                                }
                                                var dialog = ui.create.dialog('般若', [vcards, 'vcard'], 'hidden');
                                                dialog.direct = true;
                                                return dialog;
                                            },
                                            filter: function (button, player) {
                                                return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    filterCard: () => false,
                                                    selectCard: -1,
                                                    viewAs: {
                                                        name: links[0][2],
                                                        nature: links[0][3],
                                                        isCard: true,
                                                    },
                                                    popname: true,
                                                    precontent: function () {
                                                        'step 0'
                                                        var card = event.result.card.name;
                                                        if (card == 'sha') {
                                                            event.getParent().addCount = false;
                                                            player.addSkill('xinboremrfz_usedsha');
                                                        }
                                                        if (card == 'shan') player.addSkill('xinboremrfz_usedshan');
                                                        if (card == 'wuxie') player.addSkill('xinboremrfz_usedwuxie');
                                                        player.logSkill('xinboremrfz');
                                                        'step 1'
                                                        var list = [];
                                                        if (player.getHandcardLimit() > 0) list.push('手牌上限-1');
                                                        if (player.countDisabledSlot() < 5) list.push('废除一个装备栏');
                                                        if (list.length > 1) player.chooseControl(list).set('prompt', '【般若】：请选择一项').set('ai', function () {
                                                            return 0;
                                                        });
                                                        else {
                                                            if (player.getHandcardLimit() == 0) player.chooseToDisable().ai = function (event, player, list) {
                                                                if (list.contains('equip5')) return 'equip5';
                                                                return list.randomGet();
                                                            };
                                                            else player.addMark('xinboremrfz_losehdlimit', false);
                                                        }
                                                        'step 2'
                                                        if (result.index == 0) player.addMark('xinboremrfz_losehdlimit', false);
                                                        else player.chooseToDisable().ai = function (event, player, list) {
                                                            if (list.contains('equip5')) return 'equip5';
                                                            return list.randomGet();
                                                        };
                                                    },
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '【般若】：视为使用一张【' + get.translation(links[0][2]) + '】';
                                            },
                                        },
                                        ai: {
                                            order: function (item, player) {
                                                var player = _status.event.player;
                                                var event = _status.event;
                                                if (event.filterCard({ name: 'sha' }, player, event)) {
                                                    return 5;
                                                }
                                            },
                                            respondSha: true,
                                            respondShan: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (player.hasSkill('xinboremrfz_usedwuxie') && player.hasSkill('xinboremrfz_usedsha') && player.hasSkill('xinboremrfz_usedshan')) return false;
                                                if (arg != 'use') return false;
                                            },
                                            result: {
                                                player: 1,
                                            },
                                        },
                                    },
                                    losehdlimit: {
                                        silent: true,
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num - player.countMark('xinboremrfz_losehdlimit');
                                            },
                                        },
                                    },
                                    usedshan: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseZhunbeiBegin' },
                                        content: function () { player.removeSkill('xinboremrfz_usedshan') },
                                    },
                                    usedwuxie: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseZhunbeiBegin' },
                                        content: function () { player.removeSkill('xinboremrfz_usedwuxie') },
                                    },
                                    usedsha: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'phaseZhunbeiBegin' },
                                        content: function () { player.removeSkill('xinboremrfz_usedsha') },
                                    },
                                    handlit: {
                                        silent: true,
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + 1;
                                            },
                                        },
                                    },
                                },
                            },
                            xinyizhongmrfz: {
                                audio: "yizhongmrfz",
                                forced: true,
                                trigger: { player: "phaseZhunbeiBegin" },
                                filter: function (event, player) {
                                    return player.hp >= player.getHandcardLimit();
                                },
                                content: function () {
                                    var num = 5 - player.countDisabledSlot() - 1;
                                    player.addMark('xinyizhongmrfz', num, false);
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('xinyizhongmrfz');
                                    },
                                },
                                group: 'xinyizhongmrfz_lose',
                                subSkill: {
                                    lose: {
                                        audio: 'yizhongmrfz',
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.source != undefined && event.num > 0 && event.source.hasMark('xinboremrfz');
                                        },
                                        content: function () {
                                            player.removeSkill('xinboremrfz');
                                            player.removeSkill('xinyizhongmrfz_lose');
                                        },
                                    },
                                },
                            },
                            //剑兔 近卫阿米娅
                            amy_qingyanmrfz: {
                                audio: 2,
                                trigger: { player: "phaseUseEnd" },
                                intro: {
                                    content: function (event, player) {
                                        var str = '';
                                        var list = [player.hasSkill('amy_qingyanmrfz_damage'), player.hasSkill('amy_qingyanmrfz_time'), player.hasSkill('amy_qingyanmrfz_direct')];
                                        var text = ['·你每回合使用的第一张【杀】的伤害基数+1</br>', '·你使用【杀】的次数+1</br>', '·你使用的【杀】需要两张【闪】才可抵消</br>'];
                                        for (var i = 0; i < list.length; i++) {
                                            if (list[i]) str = str + text[i];
                                        }
                                        return str;
                                    },
                                },
                                filter: function (event, player) {
                                    return !player.storage.amy_qingyanmrfz_time || !player.storage.amy_qingyanmrfz_damage || !player.storage.amy_qingyanmrfz_direct;
                                },
                                check: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && get.attitude(current, player) > 2;
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseTarget('【青焱】：请选择一名其他角色', true, function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(_status.event.player, target);
                                        //if(game.hasPlayer(current=>{current!=player&&current.hasSkill('shengcaimrfz')&&get.attitude(player,current)>2})) return game.findPlayer(current=>{current!=player&&current.hasSkill('shengcaimrfz')});
                                        return att > 2;
                                    })
                                    'step 1'
                                    if (result.bool) {
                                        var target = result.targets[0], list = [];
                                        event.target = target;
                                        if (!player.storage.amy_qingyanmrfz_time) list.push('你使用【杀】的次数+1');
                                        if (!player.storage.amy_qingyanmrfz_damage) list.push('你每回合使用的第一张【杀】的伤害基数+1');
                                        if (!player.storage.amy_qingyanmrfz_direct) list.push('你使用的【杀】需要两张【闪】才可抵消');
                                        if (list.length == 1) {
                                            if (!player.storage.amy_qingyanmrfz_time) {
                                                player.storage.amy_qingyanmrfz_time = true;
                                                target.addSkill('amy_qingyanmrfz_time');
                                            }
                                            if (!player.storage.amy_qingyanmrfz_damage) {
                                                player.storage.amy_qingyanmrfz_damage = true;
                                                target.addSkill('amy_qingyanmrfz_damage', false);
                                                target.addMark('amy_qingyanmrfz');
                                            }
                                            if (!player.storage.amy_qingyanmrfz_direct) {
                                                player.storage.amy_qingyanmrfz_direct = true;
                                                target.addSkill('amy_qingyanmrfz_direct', false);
                                                target.addMark('amy_qingyanmrfz');
                                            }
                                            event.finish();
                                        }
                                        else {
                                            player.chooseControl(list).set('prompt', '请选择删除一句话并令' + get.translation(target) + '获得该效果').set('ai', function () {
                                                return [0, 1, 2].randomGet();
                                            });
                                        }
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.control == '你使用【杀】的次数+1') {
                                        event.target.addMark('amy_qingyanmrfz', false);
                                        player.storage.amy_qingyanmrfz_time = true;
                                        event.target.addSkill('amy_qingyanmrfz_time');
                                    }
                                    if (result.control == '你每回合使用的第一张【杀】的伤害基数+1') {
                                        event.target.addMark('amy_qingyanmrfz', false);
                                        player.storage.amy_qingyanmrfz_damage = true;
                                        event.target.addSkill('amy_qingyanmrfz_damage');
                                    }
                                    if (result.control == '你使用的【杀】需要两张【闪】才可抵消') {
                                        event.target.addMark('amy_qingyanmrfz', false);
                                        player.storage.amy_qingyanmrfz_direct = true;
                                        event.target.addSkill('amy_qingyanmrfz_direct');
                                    }
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 1.1,
                                },
                                group: ['amy_qingyanmrfz_damage', 'amy_qingyanmrfz_time', 'amy_qingyanmrfz_direct'],
                                subSkill: {
                                    direct: {
                                        audio: 'amy_qingyanmrfz',
                                        trigger: {
                                            player: "useCardToPlayered",
                                        },
                                        forced: true,
                                        filter: function (event, player) {
                                            if (player.storage.amy_qingyanmrfz_direct == true && player.hasSkill('amy_qingyanmrfz_mark')) return false;
                                            return event.card.name == 'sha' && !event.getParent().directHit.contains(event.target) && get.distance(player, event.target) <= 1;
                                        },
                                        logTarget: "target",
                                        content: function () {
                                            var id = trigger.target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (typeof map[id].shanRequired == 'number') {
                                                map[id].shanRequired++;
                                            }
                                            else {
                                                map[id].shanRequired = 2;
                                            }
                                        },
                                        ai: {
                                            "directHit_ai": true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1 || get.distance(player, arg.target) > 1) return false;
                                            },
                                        },
                                        group: 'amy_qingyanmrfz_remove2',
                                    },
                                    remove2: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return !player.hasSkill('amy_qingyanmrfz');
                                        },
                                        content: function () {
                                            player.removeSkill('amy_qingyanmrfz_direct');
                                            player.removeMark('amy_qingyanmrfz', false);
                                            game.countPlayer(function (current) {
                                                if (current.hasSkill('amy_qingyanmrfz')) current.storage.amy_qingyanmrfz_direct = false;
                                            });
                                        },
                                    },
                                    time: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return !player.hasSkill('amy_qingyanmrfz');
                                        },
                                        content: function () {
                                            player.removeMark('amy_qingyanmrfz', false);
                                            player.removeSkill('amy_qingyanmrfz_time');
                                            game.countPlayer(function (current) {
                                                if (current.hasSkill('amy_qingyanmrfz')) current.storage.amy_qingyanmrfz_time = false;
                                            });
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha' && (!player.storage.amy_qingyanmrfz || player.hasMark('amy_qingyanmrfz'))) return num + 1;
                                            }
                                        },
                                    },
                                    damage: {
                                        audio: 'amy_qingyanmrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            if (player.storage.amy_qingyanmrfz_damage && player.hasSkill('amy_qingyanmrfz_mark')) return false;
                                            if (player.hasSkill('amy_qingyanmrfz_mark')) return false;
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            if (!trigger.baseDamage) trigger.baseDamage = 1;
                                            trigger.baseDamage++;
                                            player.addTempSkill('amy_qingyanmrfz_mark', 'phaseEnd');
                                        },
                                        ai: {
                                            damageBonus: true,
                                        },
                                        group: 'amy_qingyanmrfz_remove1',
                                    },
                                    remove1: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return !player.hasSkill('amy_qingyanmrfz');
                                        },
                                        content: function () {
                                            player.removeSkill('amy_qingyanmrfz_damage');
                                            player.removeMark('amy_qingyanmrfz', false);
                                            game.countPlayer(function (current) {
                                                if (current.hasSkill('amy_qingyanmrfz')) current.storage.amy_qingyanmrfz_damage = false;
                                            });
                                        },
                                    },
                                    mark: {
                                        silent: true,
                                        charlotte: true,
                                    },
                                },
                            },
                            yingxiaomrfz: {
                                audio: 4,
                                intro: {
                                    content: function (event, player) {
                                        if (player.storage.yingxiaomrfz) return '已发动';
                                        if (!player.storage.yingxiaomrfz) {
                                            if (player.countMark('yingxiaomrfz_mark') < 5) return '未发动（不满足发动条件）</br>已累计使用' + player.countMark("yingxiaomrfz_mark") + '张【杀】';
                                            else return '未发动（已满足发动条件）';
                                        }
                                    },
                                },
                                mark: true,
                                limited: true,
                                animationStr: '影宵',
                                animationColor: 'gold',
                                trigger: { player: 'phaseZhunbeiBegin' },
                                check: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && get.attitude(current, player) < 0 && player.inRange(current);
                                    });
                                },
                                init: function (player) {
                                    player.storage.yingxiaomrfz = false;
                                },
                                filter: function (event, player) {
                                    return !player.storage.yingxiaomrfz && player.countMark('yingxiaomrfz_mark') >= 5;
                                },
                                content: function () {
                                    'step 0'
                                    player.storage.yingxiaomrfz = true;
                                    event.num = 0
                                    'step 1'
                                    if (event.num < 3) {
                                        if (event.num == 2) {
                                            player.addTempSkill('yingxiaomrfz_damage', 'useCardAfter');
                                            player.addTempSkill('yingxiaomrfz_wushi', 'useCardAfter');
                                            player.addTempSkill('yingxiaomrfz_total', 'useCardAfter');
                                            player.chooseUseTarget({
                                                name: 'sha',
                                                isCard: true,
                                            }, '请选择【杀】的目标', false);
                                        }
                                        else {
                                            player.addTempSkill('yingxiaomrfz_total', 'useCardAfter');
                                            player.chooseUseTarget({
                                                name: 'sha',
                                                nature: event.num == 0 ? 'thunder' : 'fire',
                                                isCard: true,
                                            }, '请选择' + (event.num == 0 ? '雷【杀】' : '火【杀】') + '的目标(下一张使用的牌为：' + (event.num == 0 ? '火【杀】' : '伤害基数为翻倍且无视防具的【杀】') + ')', false);
                                            player.logSkill('yingxiaomrfz');
                                        }
                                        event.num++;
                                        if (event.num < 3) event.redo();
                                    }
                                    'step 2'
                                    player.draw(player.countMark('yingxiaomrfz_total'));
                                    player.addSkill('yingxiaomrfz_handlit');
                                    player.addSkill('yingxiaomrfz_round2');
                                },
                                group: 'yingxiaomrfz_time',
                                subSkill: {
                                    mark: {
                                        charlotte: true,
                                    },
                                    time: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha' && player.countMark('yingxiaomrfz_mark') < 5;
                                        },
                                        content: function () {
                                            player.addMark('yingxiaomrfz_mark', false);
                                        },
                                    },
                                    damage: {
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard2' },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            if (!trigger.baseDamage) trigger.baseDamage = 1;
                                            trigger.baseDamage += 2;
                                        },
                                        ai: {
                                            damageBonus: true,
                                        },
                                    },
                                    wushi: {
                                        trigger: {
                                            player: 'useCardToPlayered',
                                        },
                                        filter: function (event) {
                                            return event.card.name == 'sha';
                                        },
                                        silent: true,
                                        logTarget: 'target',
                                        content: function () {
                                            trigger.target.addTempSkill('qinggang2');
                                            trigger.target.storage.qinggang2.add(trigger.card);
                                            trigger.target.markSkill('qinggang2');
                                        },
                                        ai: {
                                            unequip_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha') return true;
                                                return false;
                                            }
                                        },
                                    },
                                    total: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { source: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.addMark('yingxiaomrfz_total', trigger.num, false);
                                        },
                                    },
                                    handlit: {
                                        silent: true,
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('yingxiaomrfz_total');
                                            },
                                        },
                                    },
                                    round1: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: {
                                            global: 'roundStart',
                                        },
                                        content: function () {
                                            player.addMark('yingxiaomrfz_round1', false);
                                            if (player.countMark('yingxiaomrfz_round1') > 2) {
                                                player.removeSkill('yingxiaomrfz_round2');
                                                player.removeAllmark('yingxiaomrfz_round1', false);
                                            }
                                        },
                                    },
                                    round2: {
                                        audio: 'yingxiaomrfz',
                                        trigger: { source: 'damageBefore' },
                                        forced: true,
                                        charlotte: true,
                                        mark: true,
                                        intro: {
                                            content: function (event, player) {
                                                return '你造成的伤害均视为体力流失</br>效果剩余时间：' + (2 - player.countMark('yingxiaomrfz_round1')) + '轮';
                                            },
                                        },
                                        check: function () { return false; },
                                        content: function () {
                                            trigger.cancel();
                                            trigger.player.loseHp(trigger.num);
                                        },
                                        ai: {
                                            jueqing: true
                                        },
                                        group: 'yingxiaomrfz_round1',
                                    },
                                },
                            },
                            //新缪尔赛思
                            yuanliumrfz: {
                                audio: 'kaiyuanmrfz',
                                trigger: {
                                    player: 'enterGame',
                                    global: 'phaseBefore',
                                },
                                direct: true,
                                locked: false,
                                markimage: 'extension/明日方舟/image/orther/miumiuliuxingmrfz.png',
                                intro: {
                                    name: '流形',
                                    content: '#/3',
                                },
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseControl().set('choiceList', [
                                        '令一名角色摸两张牌',
                                        '获得一个‘流形’',
                                    ]).set('ai', function () {
                                        return [0, 1].randomGet();
                                    });
                                    'step 1'
                                    if (result.index == 0) {
                                        player.chooseTarget(true, '【源流】：令一名角色摸两张牌').ai = function (target) {
                                            return get.attitude(player, target) > 2;
                                        };
                                    }
                                    else {
                                        player.logSkill('kaiyuanmrfz');
                                        player.addMark('yuanliumrfz');
                                        event.finish();
                                    }
                                    'step 2'
                                    if (result.bool) {
                                        var target = result.targets[0];
                                        target.draw(2);
                                        player.logSkill('kaiyuanmrfz')
                                    }
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + (player.countMark('yuanliumrfz'));
                                    },
                                },
                                group: 'yuanliumrfz_get',
                                subSkill: {
                                    get: {
                                        direct: true,
                                        trigger: {
                                            player: "phaseUseEnd",
                                        },
                                        filter: function (event, player) {
                                            return player.getHistory('useCard', function (evt) {
                                                return evt.getParent('phaseUse') == event;
                                            }).length > 0 && player.countMark('yuanliumrfz') < 3;
                                        },
                                        content: function () {
                                            var list = [], mark = player.countMark('yuanliumrfz');
                                            player.getHistory('useCard', function (evt) {
                                                if (evt.getParent('phaseUse') == trigger) list.add(get.type2(evt.card));
                                            });
                                            if (mark + list.length > 3) player.addMark('yuanliumrfz', 3 - mark);
                                            else player.addMark('yuanliumrfz', list.length);
                                            player.logSkill('yuanliumrfz');
                                        },
                                    },
                                },
                            },
                            xinjingshuimrfz: {
                                audio: 'jingshuimrfz',
                                trigger: {
                                    player: "useCardToPlayered",
                                },
                                usable: 1,
                                filter: function (event, player) {
                                    var evt = event.getParent('phaseUse'), type = get.type(event.card);
                                    if (type != 'basic' && type != 'trick') return false;
                                    if (!evt || evt.player != player) return false;
                                    if (!player.hasMark('yuanliumrfz')) return false;
                                    return event.targets && event.targets.length == 1;
                                },
                                prompt: function (event, player) {
                                    return '是否移除所有‘源流’并令【' + get.translation(event.card.name) + '】额外结算' + player.countMark('yuanliumrfz') + '次？';
                                },
                                check: function (event, player) {
                                    return !get.tag(event.card, 'norepeat')
                                },
                                content: function () {
                                    var num = player.countMark('yuanliumrfz');
                                    trigger.getParent().effectCount += num;
                                    player.removeAllmark('yuanliumrfz');
                                },
                            },
                            shuilingmrfz: {
                                audio: 'liuxingmrfz',
                                forced: true,
                                trigger: { player: 'damageBegin3' },
                                filter: function (event, player) {
                                    if (player.hasSkill('shuilingmrfz_ban')) return false;
                                    return !event.nature && player.countCards('h') >= player.hp;
                                },
                                content: function () {
                                    trigger.num--;
                                    player.addTempSkill('shuilingmrfz_ban', 'phaseEnd');
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                        mark: true,
                                        intro: {
                                            content: "本回合已发动过【水灵】",
                                        },
                                    },
                                },
                            },
                            //新归溟幽灵鲨
                            xinyongwomrfz: {
                                audio: 'yongwomrfz',
                                zhuanhuanji: true,
                                locked: false,
                                mark: true,
                                marktext: '☯',
                                intro: {
                                    content: function (storage, player, skill) {
                                        if (player.storage.xinyongwomrfz) return '阳：当你进入濒死状态时，你可以回复至一点体力';
                                        return '阴：当你武将牌从正面朝上至背面朝上时，你可以摸两张牌，然后选择一项：1.弃置你攻击范围内一名其他角色区域内各一张牌；2.对你攻击范围内的一名其他角色造成一点伤害'
                                    },
                                },
                                init: function (player) {
                                    player.storage.xinyongwomrfz = true;
                                },
                                trigger: { player: 'dying' },
                                filter: function (event, player) {
                                    return player.storage.xinyongwomrfz;
                                },
                                prompt: '【拥我】：是否将体力回复至1点',
                                content: function () {
                                    player.recoverTo(1);
                                    player.changeZhuanhuanji('xinyongwomrfz');
                                },
                                group: 'xinyongwomrfz_ying',
                                subSkill: {
                                    //阴
                                    ying: {
                                        audio: 'xinyongwomrfz',
                                        trigger: { player: 'turnOverAfter' },
                                        filter: function (event, player) {
                                            return event.player.isTurnedOver() && !player.storage.xinyongwomrfz;
                                        },
                                        prompt: '【拥我】：你可以摸两张牌，然后选择一项：1.弃置你攻击范围内一名其他角色区域内各一张牌；2.对你攻击范围内的一名其他角色造成一点伤害。',
                                        check: function (event, player) {
                                            return game.hasPlayer(function (current) {
                                                return current != player && get.attitude(player, current) < 0;
                                            })
                                        },
                                        content: function () {
                                            'step 0'
                                            var choice = 0, max = 0;
                                            for (var i = 0; i < game.players.length; i++) {
                                                var target = game.players[i], tmp1 = 0;
                                                if (target == player) continue;
                                                if (!player.inRange(target)) continue;
                                                if (get.attitude(player, target) > 0) continue;
                                                if (target.countCards('e') > 0) tmp1++;
                                                if (target.countCards('h') > 0) tmp1++;
                                                if (target.countCards('j') > 0) tmp1--;
                                                if (tmp1 > max) max = tmp1;
                                            }
                                            if (game.hasPlayer(function (current) {
                                                return current != player && get.attitude(player, current) < 0 && current.hp <= 1;
                                            }) || max < 2) choice = 1;
                                            player.draw(2);
                                            player.chooseControl().set('choiceList', [
                                                '弃置你攻击范围内一名其他角色区域内各一张牌',
                                                '对你攻击范围内的一名其他角色造成一点伤害',
                                            ]).set('ai', function () {
                                                return choice;
                                            });
                                            event.choice = choice;
                                            'step 1'
                                            event.index = result.index;
                                            if (game.hasPlayer(function (current) {
                                                return current != player && player.inRange(current);
                                            })) {
                                                player.chooseTarget('【拥我】:请选择一名其他角色', true, function (rd, player, target) {
                                                    return target != player && player.inRange(target);
                                                }).set('ai', function (target) {
                                                    var player = _status.event.player, att = get.attitude(player, target);
                                                    if (event.choice == 0) {
                                                        if (target.countCards('e') > 0) return att < 0 && target.countCards('e') > 0;
                                                        else return att < 0;
                                                    }
                                                    else return get.damageEffect(target, player, player) > 0;
                                                });
                                            }
                                            else event.finish();
                                            'step 2'
                                            if (result.bool) {
                                                var target = result.targets[0];
                                                if (event.index == 0) {
                                                    var num = 0;
                                                    if (target.countCards('h')) num++;
                                                    if (target.countCards('e')) num++;
                                                    if (target.countCards('j')) num++;
                                                    if (num) {
                                                        player.discardPlayerCard(target, num, 'hej', true).set('filterButton', function (button) {
                                                            for (var i = 0; i < ui.selected.buttons.length; i++) {
                                                                if (get.position(button.link) == get.position(ui.selected.buttons[i].link)) return false;
                                                            }
                                                            return true;
                                                        });
                                                    }
                                                }
                                                else target.damage('player');
                                                player.logSkill('yongwomrfz', target);
                                                player.changeZhuanhuanji('xinyongwomrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            douzhenmrfz: {
                                audio: 2,
                                trigger: { global: 'phaseEnd' },
                                prompt: function (event, player) {
                                    return '【斗争】：是否失去所有体力并视为对' + get.translation(event.player) + '使用一张【杀】？';
                                },
                                filter: function (event, player) {
                                    return event.player != player;
                                },
                                check: function (event, player) {
                                    if (get.attitude(player, event.player) > 0) return false;
                                    return player.countCards('h', function (card) {
                                        return card.name == 'tao' || card.name == 'jiu';
                                    }) > 0 || player.storage.xinyongwomrfz == true;
                                },
                                content: function () {
                                    player.loseHp(player.hp);
                                    player.useCard({ name: 'sha', isCard: true }, false, trigger.player);
                                    player.turnOver();
                                },
                                ai: {
                                    expose: 0.1,
                                },
                            },
                            shensuimrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'loseHpEnd' },
                                filter: function (event, player) {
                                    return event.num > 1;
                                },
                                content: function () {
                                    player.changeHujia(trigger.num);
                                },
                                group: 'shensuimrfz_change',
                                subSkill: {
                                    change: {
                                        direct: true,
                                        trigger: { global: 'roundStart' },
                                        filter: function (event, player) {
                                            return !player.storage.xinyongwomrfz;
                                        },
                                        content: function () {
                                            player.changeZhuanhuanji('xinyongwomrfz');
                                        },
                                    },
                                },
                            },
                            //早露
                            zhongxiemrfz: {
                                audio: 2,
                                forced: true,
                                trigger: {
                                    player: 'useCardToPlayered',
                                },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha' || typeof get.number(event.card) != 'number') return false;
                                    return event.target.countCards('h') <= get.number(event.card);
                                },
                                content: function () {
                                    trigger.getParent().directHit.add(trigger.target);
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function (player, tag, arg) {
                                        if (tag == 'directHit_ai') {
                                            if (arg.card.name == 'sha' && typeof get.number(arg.card) == 'number') return arg.card.name == 'sha' && arg.target.countCards('h') <= get.number(arg.card);
                                        }
                                        return false;
                                    },
                                },
                                mod: {
                                    attackRange: function (player, num) {
                                        return num += 2;
                                    },
                                },
                                group: ['zhongxiemrfz_damage', 'zhongxiemrfz_wushi'],
                                subSkill: {
                                    damage: {
                                        audio: 'zhongxiemrfz',
                                        forced: true,
                                        trigger: { source: 'damageBegin' },
                                        filter: function (event, player) {
                                            return event.player.hujia > 0;
                                        },
                                        content: function () {
                                            trigger.num += trigger.player.hujia;
                                        },
                                    },
                                    wushi: {
                                        trigger: {
                                            player: 'useCardToPlayered',
                                        },
                                        filter: function (event) {
                                            return event.card.name == 'sha';
                                        },
                                        direct: true,
                                        logTarget: 'target',
                                        content: function () {
                                            trigger.target.addTempSkill('qinggang2');
                                            trigger.target.storage.qinggang2.add(trigger.card);
                                            trigger.target.markSkill('qinggang2');
                                        },
                                        ai: {
                                            unequip_ai: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg && arg.name == 'sha') return true;
                                                return false;
                                            }
                                        }
                                    },
                                },
                            },
                            rusuimrfz: {
                                audio: 2,
                                trigger: { source: 'damageBegin2' },
                                filter: function (event, player) {
                                    var num = 0, target = event.player;
                                    if (target.countCards('h') >= target.hp) num++;
                                    if (target.countCards('e') > 0) num++;
                                    if (target.getDamagedHp() <= target.hp) num++;
                                    return event.player != player && event.card.name == 'sha' && num != 0;
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.player) < 0;
                                },
                                prompt: function (event, player) {
                                    var num = 0, target = event.player;
                                    if (target.countCards('h') >= target.hp) num++;
                                    if (target.countCards('e') > 0) num++;
                                    if (target.getDamagedHp() <= target.hp) num++;
                                    if (num < 3) return '【入髓】：是否令' + get.translation(target) + '弃置' + num + '张牌';
                                    else return '【入髓】：是否令' + get.translation(target) + '弃置' + num + '张牌并令此杀伤害+1';
                                },
                                prompt2: false,
                                content: function () {
                                    var num = 0, target = trigger.player;
                                    if (target.countCards('h') >= target.hp) num++;
                                    if (target.countCards('e') > 0) num++;
                                    if (target.getDamagedHp() <= target.hp) num++;
                                    target.chooseToDiscard('he', true, '【入髓】：请弃置' + num + '张牌', num);
                                    if (num == 3) trigger.num++;
                                },
                            },
                            //伊祖米克 水月
                            chanshimrfz: {
                                audio: false,
                                trigger: {
                                    source: 'damageEnd',
                                    global: 'roundStart',
                                },
                                filter: function (event, player) {
                                    return !player.hasSkill('chanshimrfz_ban');
                                },
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('chanshimrfz_ban', 'phaseEnd');
                                    var list;
                                    if (_status.characterlist) {
                                        list = [];
                                        for (var i = 0; i < _status.characterlist.length; i++) {
                                            var name = _status.characterlist[i];
                                            list.push(name);
                                        }
                                    }
                                    else if (_status.connectMode) {
                                        list = get.charactersOL();
                                    }
                                    else {
                                        list = get.gainableCharacters();
                                    }
                                    var players = game.players.concat(game.dead);
                                    for (var i = 0; i < players.length; i++) {
                                        list.remove(players[i].name);
                                        list.remove(players[i].name1);
                                        list.remove(players[i].name2);
                                    }
                                    list = list.randomGets(2);
                                    var skills = [];
                                    for (var i of list) {
                                        skills.addArray(lib.character[i][3]);
                                    }
                                    if (!list.length || !skills.length) { event.finish(); return; }
                                    if (player.isUnderControl()) {
                                        game.swapPlayerAuto(player);
                                    }
                                    var switchToAuto = function () {
                                        _status.imchoosing = false;
                                        event._result = {
                                            bool: true,
                                            skills: skills.randomGets(1),
                                        };
                                        if (event.dialog) event.dialog.close();
                                        if (event.control) event.control.close();
                                    };
                                    var chooseButton = function (list, skills) {
                                        var event = _status.event;
                                        if (!event._result) event._result = {};
                                        event._result.skills = [];
                                        var rSkill = event._result.skills;
                                        var dialog = ui.create.dialog('请获得一个技能', [list, 'character'], 'hidden');
                                        event.dialog = dialog;
                                        var table = document.createElement('div');
                                        table.classList.add('add-setting');
                                        table.style.margin = '0';
                                        table.style.width = '100%';
                                        table.style.position = 'relative';
                                        for (var i = 0; i < skills.length; i++) {
                                            var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                            td.link = skills[i];
                                            table.appendChild(td);
                                            td.innerHTML = '<span>' + get.translation(skills[i]) + '</span>';
                                            td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                                if (_status.dragged) return;
                                                if (_status.justdragged) return;
                                                _status.tempNoButton = true;
                                                setTimeout(function () {
                                                    _status.tempNoButton = false;
                                                }, 500);
                                                var link = this.link;
                                                if (!this.classList.contains('bluebg')) {
                                                    if (rSkill.length >= 1) return;
                                                    rSkill.add(link);
                                                    this.classList.add('bluebg');
                                                }
                                                else {
                                                    this.classList.remove('bluebg');
                                                    rSkill.remove(link);
                                                }
                                            });
                                        }
                                        dialog.content.appendChild(table);
                                        dialog.add('　　');
                                        dialog.open();

                                        event.switchToAuto = function () {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        };
                                        event.control = ui.create.control('ok', function (link) {
                                            event.dialog.close();
                                            event.control.close();
                                            game.resume();
                                            _status.imchoosing = false;
                                        });
                                        for (var i = 0; i < event.dialog.buttons.length; i++) {
                                            event.dialog.buttons[i].classList.add('selectable');
                                        }
                                        game.pause();
                                        game.countChoose();
                                    };
                                    if (event.isMine()) {
                                        chooseButton(list, skills);
                                    }
                                    else if (event.isOnline()) {
                                        event.player.send(chooseButton, list, skills);
                                        event.player.wait();
                                        game.pause();
                                    }
                                    else {
                                        switchToAuto();
                                    }
                                    'step 1'
                                    var map = event.result || result;
                                    if (map && map.skills && map.skills.length) {
                                        for (var i of map.skills) player.addSkillLog(i);
                                    }
                                    game.broadcastAll(function (list) {
                                        game.expandSkills(list);
                                        for (var i of list) {
                                            var info = lib.skill[i];
                                            if (!info) continue;
                                            if (!info.audioname2) info.audioname2 = {};
                                            info.audioname2.old_yuanshu = 'weidi';
                                        }
                                    }, map.skills);
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                    },
                                },
                            },
                            //琳琅诗怀雅
                            zhijinmrfz: {
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (typeof card == 'object' && player.isPhaseUsing()) {
                                            var evt = lib.skill.zhijinmrfz.getLastUsed(player);
                                            if (evt && evt.card && (get.suit(evt.card) && get.suit(evt.card) == get.suit(card))) {
                                                return num + 10;
                                            }
                                        }
                                    },
                                },
                                marktext: '钱',
                                intro: {
                                    name: '钱',
                                    content: '共有#个钱',
                                },
                                audio: 4,
                                trigger: { player: 'useCard' },
                                forced: true,
                                getLastUsed: function (player, event) {
                                    var history = player.getAllHistory('useCard');
                                    var index;
                                    if (event) index = history.indexOf(event) - 1;
                                    else index = history.length - 1;
                                    if (index >= 0) return history[index];
                                    return false;
                                },
                                filter: function (event, player) {
                                    var evt = lib.skill.dcjianying.getLastUsed(player, event);
                                    if (!evt || !evt.card) return false;
                                    return lib.suit.contains(get.suit(evt.card)) && get.suit(evt.card) == get.suit(event.card);
                                },
                                content: function () {
                                    player.addMark('zhijinmrfz');
                                },
                                group: ['zhijinmrfz_round', 'zhijinmrfz_use'],
                                subSkill: {
                                    use: {
                                        audio: 'zhijinmrfz',
                                        enable: ["chooseToUse", "chooseToRespond"],
                                        filter: function (event, player) {
                                            var vcards = [], list = [], mark = player.countMark('zhijinmrfz');
                                            if (mark >= 1) list.push('sha');
                                            if (mark >= 2) list.push('juedou');
                                            if (mark >= 3) list.push('wuzhong');
                                            if (mark >= 4) list.push('tao');
                                            if (mark >= 5) list.push('wanjian');
                                            if (!player.isPhaseUsing() || player.countMark('zhijinmrfz') == 0 || list.length == 0) return false;
                                            for (var name of list) {
                                                if (event.filterCard({ name: name, isCard: false }, player, event)) return true;
                                            }
                                            return false;
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                var vcards = [], list = [], mark = player.countMark('zhijinmrfz');
                                                if (mark >= 1) list.push('sha');
                                                if (mark >= 2) list.push('juedou');
                                                if (mark >= 3) list.push('wuzhong');
                                                if (mark >= 4) list.push('tao');
                                                if (mark >= 5) list.push('wanjian');
                                                for (var name of list) {
                                                    var card = { name: name, isCard: false };
                                                    if (name == 'sha') {
                                                        for (var j of lib.inpile_nature) {
                                                            if (j != 'fire') continue;
                                                            vcards.push(['基本', '', 'sha', j]);
                                                        }
                                                    }
                                                    else if (get.type(name) == 'trick') vcards.push(['锦囊', '', name]);
                                                    else if (get.type(name) == 'basic' && event.filterCard({ name: name }, player, event)) vcards.push(['基本', '', name]);
                                                }
                                                var dialog = ui.create.dialog('掷金', [vcards, 'vcard'], 'hidden');
                                                dialog.direct = true;
                                                return dialog;
                                            },
                                            check: function (button) {
                                                var player = _status.event.player;
                                                var recover = 0, lose = 1, players = game.filterPlayer(), choose = button.link[2];
                                                var mark = player.countMark('zhijinmrfz');
                                                if (mark >= 5) {
                                                    if (player.hp < 3) return (choose == 'tao') ? 2 : -1;
                                                    for (var i = 0; i < players.length; i++) {
                                                        var att = get.attitude(player, players[i]);
                                                        if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                                            return (button.link[2] == 'juedou') ? 2 : -1;
                                                        }
                                                        if (att < 0) lose++;
                                                        if (att > 0 && players[i].hp > 2) lose = lose - 0.5;
                                                        if (att > 0 && players[i].hp < 2) lose--;
                                                        if (att > 2 && players[i] == 1) lose -= 3;
                                                    }
                                                    if (lose > 0) return (choose == 'wanjian') ? 1 : -1;
                                                    if (player.countCards('h', function (card) {
                                                        return card.name = 'sha';
                                                    }) >= player.getCardUsable('sha') || player.getCardUsable('sha') == 0) return (choose == 'wuzhong') ? 1 : -1;
                                                    return (choose == 'sha') ? 1 : -1;
                                                }
                                                if (mark >= 4) {
                                                    if (player.hp < 3) return (choose == 'tao') ? 1 : -1;
                                                    for (var i = 0; i < players.length; i++) {
                                                        var att = get.attitude(player, players[i]);
                                                        if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                                            return (button.link[2] == 'juedou') ? 2 : -1;
                                                        }
                                                    }
                                                    if (player.countCards('h', function (card) {
                                                        return card.name = 'sha';
                                                    }) >= player.getCardUsable('sha') || player.getCardUsable('sha') == 0) return (choose == 'wuzhong') ? 1 : -1;
                                                    return (choose == 'sha') ? 1 : -1;
                                                }
                                                if (mark >= 3) {
                                                    for (var i = 0; i < players.length; i++) {
                                                        var att = get.attitude(player, players[i]);
                                                        if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                                            return (button.link[2] == 'juedou') ? 2 : -1;
                                                        }
                                                    }
                                                    if (player.countCards('h', function (card) {
                                                        return card.name = 'sha';
                                                    }) >= player.getCardUsable('sha') || player.getCardUsable('sha') == 0) return (choose == 'wuzhong') ? 1 : -1;
                                                    return (choose == 'sha') ? 1 : -1;
                                                }
                                                if (mark >= 2) {
                                                    for (var i = 0; i < players.length; i++) {
                                                        var att = get.attitude(player, players[i]);
                                                        if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                                            return (button.link[2] == 'juedou') ? 2 : -1;
                                                        }
                                                    }
                                                    return (choose == 'sha') ? 1 : -1;
                                                }
                                                return (choose == 'sha') ? 1 : -1;
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    filterCard: () => true,
                                                    selectCard: 1,
                                                    viewAs: {
                                                        name: links[0][2],
                                                        nature: links[0][3],
                                                        isCard: false,
                                                    },
                                                    position: 'h',
                                                    popname: true,
                                                    precontent: function () {
                                                        var card = event.result.card.name, mark = player.countMark('zhijinmrfz');
                                                        if (card == 'sha') {
                                                            if (mark == 1) player.draw()
                                                            player.removeMark('zhijinmrfz');
                                                        }
                                                        if (card == 'juedou') {
                                                            if (mark == 2) player.draw()
                                                            player.removeMark('zhijinmrfz', 2);
                                                        }
                                                        if (card == 'wuzhong') {
                                                            if (mark == 3) player.draw()
                                                            player.removeMark('zhijinmrfz', 3);
                                                        }
                                                        if (card == 'tao') {
                                                            if (mark == 4) player.draw()
                                                            player.removeMark('zhijinmrfz', 4);
                                                        }
                                                        if (card == 'wanjian') {
                                                            if (mark == 5) player.draw()
                                                            player.removeMark('zhijinmrfz', 5);
                                                        }
                                                    },
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '【掷金】：视为使用一张' + (links[0][3] == undefined ? '' : '火') + '【' + get.translation(links[0][2]) + '】';
                                            },
                                        },
                                        ai: {
                                            respondSha: true,
                                            fireAttack: true,
                                            order: function (item, player) {
                                                var player = _status.event.player;
                                                var event = _status.event;
                                                var mark = player.countMark('zhijinmrfz');
                                                if (event.filterCard({ name: 'tao' }, player, event) && mark >= 4) {
                                                    return 10;
                                                }
                                                if (event.filterCard({ name: 'wuzhong' }, player, event) && mark >= 3) {
                                                    return 13;
                                                }
                                                if (event.filterCard({ name: 'juedou' }, player, event) && mark >= 2) {
                                                    return 4.95;
                                                }
                                                if (event.filterCard({ name: 'sha' }, player, event) && mark >= 1) {
                                                    return 2.95;
                                                }
                                            },
                                            skillTagFilter: function (player, tag, arg) {
                                                return player.countMark('zhijinmrfz') > 0;
                                            },
                                            result: {
                                                player: 1,
                                            },
                                        },
                                    },
                                    round: {
                                        audio: 'zhijinmrfz',
                                        trigger: { global: 'roundStart' },
                                        forced: true,
                                        charlotte: true,
                                        content: function () {
                                            player.addMark('zhijinmrfz');
                                        },
                                    },
                                },
                            },
                            mianzaimrfz: {
                                markimage: 'extension/明日方舟/image/orther/mianzaimrfz_money.png',
                                intro: {
                                    content: '累计点数：#',
                                },
                                audio: 2,
                                trigger: {
                                    player: "dying",
                                },
                                forced: true,
                                content: function () {
                                    var cards = game.cardsGotoOrdering(get.cards(6)).cards, num = 0;
                                    for (var i = 0; i < cards.length; i++) {
                                        num = num + cards[i].number;
                                    }
                                    player.showCards(cards, get.translation(player) + '发动了【免灾】</br>点数之和为：' + num);
                                    if (num <= player.countMark('mianzaimrfz')) {
                                        player.recoverTo(3);
                                        player.drawTo(3);
                                        player.removeAllmark('mianzaimrfz', false);
                                    }

                                },
                                group: ['mianzaimrfz_number'],
                                subSkill: {
                                    number: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            return event.cards && event.cards.length == 1;
                                        },
                                        content: function () {
                                            var num = trigger.card.number;
                                            player.addMark('mianzaimrfz', num, false);
                                        },
                                    },
                                },
                            },
                            //圣约送葬人
                            chongdanmrfz: {
                                audio: 2,
                                frequent: true,
                                subfrequent: ['chongdanmrfz_player'],
                                trigger: {
                                    source: "damageSource",
                                },
                                filter: function (event, player) {
                                    if (player.countCards('h') == 0 && player.getDamagedHp() == 0) return false;
                                    return !player.storage.chongdanmrfz;
                                },
                                content: function () {
                                    'step 0'
                                    player.storage.chongdanmrfz = true;
                                    if (player.getDamagedHp() == 0) player.draw(player.hp);
                                    else {
                                        player.chooseBool('【铳弹】：是否摸' + player.hp + '张牌？').set('prompt2', '选择取消则为回复' + player.countCards('h') + '点体力').set('ai', function () {
                                            var player = _status.event.player;
                                            var hp = player.hp;
                                            if (player.countCards('h') == 0) return 0;
                                            if (hp < 2) return 1;
                                            if (player.countCards('j') > 0) return 1;
                                            if (player.isPhaseUsing() && player.countCards('h', function (card) {
                                                return card.name == 'tao';
                                            }) >= player.getDamagedHp()) return 1;
                                            return 0;
                                        })
                                    }
                                    'step 1'
                                    if (result.bool) {
                                        player.draw(player.hp);
                                    }
                                    else {
                                        player.recover(player.countCards('h'));
                                    }
                                },
                                mod: {
                                    cardEnabled: function (card, player) {
                                        if (player.countMark('chongdanmrfz_lim') >= (2 * player.maxHp)) return false;
                                    },
                                    cardUsable: function (card, player) {
                                        if (player.countMark('chongdanmrfz_lim') >= (2 * player.maxHp)) return false;
                                    },
                                    cardSavable: function (card, player) {
                                        if (player.countMark('chongdanmrfz_lim') >= (2 * player.maxHp)) return false;
                                    },
                                },
                                ai: {
                                    presha: true,
                                    pretao: true,
                                },
                                group: ['chongdanmrfz_clear', 'chongdanmrfz_player', 'chongdanmrfz_lim'],
                                subSkill: {
                                    lim: {
                                        mark: true,
                                        intro: {
                                            content: '已使用：#张牌'
                                        },
                                        silent: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: {
                                            player: 'useCard',
                                        },
                                        filter: function (event, player) {
                                            return player.countMark('chongdanmrfz_lim') < (2 * player.maxHp);
                                        },
                                        content: function () {
                                            player.addMark('chongdanmrfz_lim', false);
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            if (player.storage.chongdanmrfz_player) player.storage.chongdanmrfz_player = false;
                                            if (player.storage.chongdanmrfz) player.storage.chongdanmrfz = false;
                                            if (player.countMark('chongdanmrfz_lim') > 0) player.removeAllmark('chongdanmrfz_lim', false);
                                        },
                                    },
                                    player: {
                                        audio: 'chongdanmrfz',
                                        trigger: {
                                            player: "damageEnd",
                                        },
                                        filter: function (event, player) {
                                            if (player.countCards('h') == 0 && player.getDamagedHp() == 0) return false;
                                            return !player.storage.chongdanmrfz_player;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.storage.chongdanmrfz_player = true;
                                            if (player.getDamagedHp() == 0) player.draw(player.hp);
                                            else {
                                                player.chooseBool('【铳弹】：是否摸' + player.hp + '张牌？').set('prompt2', '选择取消则为回复' + player.countCards('h') + '点体力').set('ai', function () {
                                                    var player = _status.event.player;
                                                    var hp = player.hp;
                                                    if (player.countCards('h') == 0) return 0;
                                                    if (hp < 3) return 1;
                                                    if (player.countCards('j') > 0) return 1;
                                                    if (player.isPhaseUsing() && player.countCards('h', function (card) {
                                                        return card.name == 'tao';
                                                    }) >= player.getDamagedHp()) return 1;
                                                    return 0;
                                                })
                                            }
                                            'step 1'
                                            if (result.bool) {
                                                player.draw(player.hp);
                                            }
                                            else {
                                                player.recover(player.countCards('h'));
                                            }
                                        },
                                    },
                                },
                            },
                            tianxuanmrfz: {
                                audio: 2,
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        return '已有的花色：' + get.translation(player.storage.tianxuanmrfz);
                                    },
                                },
                                trigger: {
                                    player: 'useCard1',
                                },
                                filter: function (event, player) {
                                    return get.tag(event.card, 'damage') > 0 && player.isPhaseUsing();
                                },
                                init: function (player) {
                                    player.storage.tianxuanmrfz = ['heart'];
                                },
                                prompt: function (event, player) {
                                    var list = player.storage.tianxuanmrfz;
                                    return '【天选】：是否进行判定，若为' + get.translation(list) + ',则' + get.translation(event.card) + '结算两次';
                                },
                                content: function () {
                                    'step 0'
                                    var list = player.storage.tianxuanmrfz;
                                    player.judge(function (card) {
                                        for (var i = 0; i < list.length; i++) {
                                            var suit = get.suit(card);
                                            if (suit == list[i]) return -4;
                                        }
                                        return 0;
                                    }).judge2 = function (result) {
                                        return result.bool == false ? true : false;
                                    };
                                    'step 1'
                                    if (result.bool == false) {
                                        trigger.effectCount++;
                                        player.storage.tianxuanmrfz = [];
                                        event.finish();
                                    }
                                    else {
                                        var suit = player.storage.tianxuanmrfz, list = [];
                                        for (i of lib.suit) {
                                            if (suit.contains(i)) continue;
                                            list.push(i);
                                        }
                                        player.chooseControl(list).set('prompt', '【天选】：请选择为[]内增加一个花色').set('ai', function () {
                                            if (list.contains('diamond')) return 'diamond';
                                            return list.randomGet();
                                        });
                                    }
                                    'step 2'
                                    if (result.control) {
                                        player.storage.tianxuanmrfz.add(result.control);
                                        player.storage.tianxuanmrfz.sort();
                                    }
                                },
                            },
                            shengcaimrfz: {
                                audio: 2,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (!get.tag(event.card, 'damage') || !player.isPhaseUsing()) return false;
                                    return player.getHistory('useCard', function (evt) {
                                        return get.tag(evt.card, 'damage') > 0;
                                    }).length > 1;
                                },
                                prompt: function (event, player) {
                                    return '【圣裁】：是否令' + get.translation(event.card) + '伤害基数+1？';
                                },
                                content: function () {
                                    if (!trigger.baseDamage) trigger.baseDamage = 1;
                                    trigger.baseDamage++;
                                },
                                group: 'shengcaimrfz_damage',
                                subSkill: {
                                    damage: {
                                        direct: true,
                                        trigger: { player: 'phaseEnd' },
                                        filter: function (event, player) {
                                            return game.countPlayer(current => {
                                                return current != player && current.getHistory('damage').length > 0;
                                            }) > 0;
                                        },
                                        content: function () {
                                            'step 0'
                                            var next = player.chooseTarget([1, Infinity], '【圣裁】：你可以对本回合造成过伤害的其他角色造成一点伤害', function (card, player, target) {
                                                return target != player && target.getHistory('damage').length > 0;
                                            });
                                            next.ai = function (target) {
                                                return get.attitude(player, target) < 0;
                                            };
                                            'step 1'
                                            if (result.targets) {
                                                player.logSkill('shengcaimrfz');
                                                for (i of result.targets) {
                                                    i.damage('player');
                                                    player.line(i);
                                                }
                                            }
                                        },
                                    },
                                },
                            },
                            //澄闪废案
                            fuxiemrfz: {
                                mod: {
                                    targetInRange: function (card, player, target) {
                                        if (target.hasMark('fuxiemrfzx')) {
                                            return true;
                                        }
                                    },
                                    maxHandcard: function (player, num) {
                                        return num += player.countMark('fuxiemrfzx');
                                    },
                                },
                                audio: 2,
                                trigger: {
                                    global: "phaseBefore",
                                    player: "enterGame",
                                },
                                forced: true,
                                locked: false,
                                filter: function (event, player) {
                                    return (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    player.addMark('fuxiemrfzx', 2);
                                },
                                group: ['fuxiemrfz_thu', 'fuxiemrfz_give', 'fuxiemrfz_get'],
                                subSkill: {
                                    thu: {
                                        trigger: { source: "damageBefore" },
                                        forced: true,
                                        charlotte: true,
                                        filter: function (event, player) {
                                            return event.nature != 'thunder';
                                        },
                                        content: function () {
                                            trigger.cancel();
                                            trigger.player.damage(trigger.num, player, 'thunder');
                                            player.logSkill('fuxiemrfz');
                                        },
                                    },
                                    give: {
                                        audio: 'fuxiemrfz',
                                        trigger: { player: 'useCardToPlayered' },
                                        filter: function (event, player) {
                                            if (!player.isPhaseUsing()) return false;
                                            if (event.targets.length > 1) return false;
                                            return player.countMark('fuxiemrfzx') > 0 && event.target != player;
                                        },
                                        prompt: function (event, player) {
                                            return '【浮械】：是否令' + get.translation(event.target) + '获得一个‘浮标’(剩余‘浮标’数：' + player.countMark('fuxiemrfzx') + ')';
                                        },
                                        check: function (event, player) {
                                            var att = get.attitude(player, event.target);
                                            if (att > 2) return false;
                                            return !event.target.hasMark('fuxiemrfzx') || game.countPlayer(function (current) {
                                                return current != player && att < 2 && !current.hasMark('fuxiemrfzx');
                                            }) < 2;
                                        },
                                        content: function () {
                                            trigger.target.addMark('fuxiemrfzx');
                                            player.removeMark('fuxiemrfzx');
                                        },
                                    },
                                    get: {
                                        audio: 'fuxiemrfz',
                                        enable: 'phaseUse',
                                        filterCard: function (card) {
                                            return get.suit(card) == 'diamond';
                                        },
                                        selectCard: function (event, player) {
                                            var num = game.getGlobalmark('fuxiemrfzx');
                                            return [1, 4 - num];
                                        },
                                        filter: function (event, player) {
                                            if (game.getGlobalmark('fuxiemrfzx') > 3) return false;
                                            return player.countCards('he', function (card) {
                                                return get.suit(card) == 'diamond';
                                            }) > 0;
                                        },
                                        check: function (card) {
                                            return 6 - get.value(card)
                                        },
                                        position: 'he',
                                        prompt: function (event, player) {
                                            return '【浮械】：你可以弃置任意张♦的牌并获得等量的‘浮标’';
                                        },
                                        content: function () {
                                            player.addMark('fuxiemrfzx', cards.length);
                                        },
                                        ai: {
                                            order: 13,
                                            result: {
                                                player: 1,
                                            },
                                        },
                                    },
                                },
                            },
                            fuxiemrfzx: {
                                charlotte: true,
                                intro: {
                                    content: '当前有#个‘浮标’',
                                },
                            },
                            dianyongmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseUseBegin' },
                                filter: function (event, player) {
                                    return game.getGlobalmark('fuxiemrfzx') >= 4;
                                },
                                content: function () {
                                    'step 0'
                                    event.marknum = player.countMark('fuxiemrfzx');
                                    player.removeAllmark('fuxiemrfzx');
                                    event.num = 0;
                                    player.addTempSkill('dianyongmrfz_extra', 'phaseEnd');
                                    player.addTempSkill('dianyongmrfz_nolim', 'phaseEnd');
                                    'step 1'
                                    if (event.num < event.marknum) {
                                        event.num++;
                                        var next = player.chooseTarget(true, '【电涌】：请选择一名其他角色，为其分配一个‘浮标’', function (card, player, target) {
                                            return target != player;
                                        });
                                        next.ai = function (target) {
                                            var att = get.attitude(player, target);
                                            if (!target.hasMark('fuxiemrfzx')) return att < 2;
                                            return att < 2;
                                        };
                                    }
                                    else {
                                        event.finish();
                                    }
                                    'step 2'
                                    if (result.targets) {
                                        var target = result.targets[0];
                                        target.addMark('fuxiemrfzx');
                                        event.goto(1);
                                    }
                                },
                                subSkill: {
                                    extra: {
                                        trigger: {
                                            player: "useCard2",
                                        },
                                        filter: function (event, player) {
                                            if (event.targets.length > 1) return false;
                                            if (event.card.name == 'wuzhong') return false;
                                            if (event.card.name != 'sha' && get.type(event.card) != 'trick') return false;
                                            return game.hasPlayer(function (current) {
                                                return !event.targets.contains(current) && player.canUse(event.card, current) && current.hasMark('fuxiemrfzx');
                                            });
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget([1, Infinity], get.prompt('dianyongmrfz'), '你可以额外指定任意个有‘浮标’标记的角色令其成为' + get.translation(trigger.card) + '的目标', function (card, player, target) {
                                                return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target) && target.hasMark('fuxiemrfzx') && target != player;
                                            }).set('sourcex', trigger.targets).set('ai', function (target) {
                                                var player = _status.event.player;
                                                return get.effect(target, _status.event.card, player, player);
                                            }).set('card', trigger.card);
                                            'step 1'
                                            if (result.bool) {
                                                if (!event.isMine() && !event.isOnline()) game.delayx();
                                                event.target = result.targets;
                                            }
                                            else {
                                                event.finish();
                                            }
                                            'step 2'
                                            for (var i = 0; i < event.target.length; i++) {
                                                var target = event.target[i];
                                                player.line(target);
                                                trigger.targets.push(target);
                                            }
                                            player.logSkill('dianyongmrfz');
                                            var cards = trigger.card;
                                            if (cards.name == 'sha') {
                                                player.chooseTarget(true, '【电涌】：请移除场上一个‘浮标’标记', function (card, player, target) {
                                                    return target != player && target.hasMark('fuxiemrfzx');
                                                });
                                            }
                                            else event.finish();
                                            'step 3'
                                            if (result.targets) {
                                                result.targets[0].removeMark('fuxiemrfzx');
                                            }
                                        },
                                    },
                                    nolim: {
                                        charlotte: true,
                                        mod: {
                                            cardUsableTarget: function (card, player, target) {
                                                if (target.hasMark('fuxiemrfzx') && card.name == 'sha') return true;
                                            },
                                        },
                                    },
                                },
                            },
                            shizhunmrfz: {
                                audio: 2,
                                forced: true,
                                charlotte: true,
                                trigger: { global: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return event.player != player && event.player.hasMark('fuxiemrfzx');
                                },
                                callback: function () {
                                    for (i of game.players) {
                                        if (i.hasSkill('shizhunmrfz')) {
                                            var us = i;
                                            break;
                                        }
                                    }
                                    if (event.judgeResult.color == 'black') {
                                        player.damage('thunder', us);
                                        player.removeMark('fuxiemrfzx');
                                    }
                                    else us.gain(card, 'gain2');
                                },
                                content: function () {
                                    trigger.player.judge(function (card) {
                                        if (get.color(card) == 'red') return -4;
                                        return 0;
                                    }).set('callback', lib.skill.shizhunmrfz.callback);
                                },
                            },
                            //涤火杰西卡
                            yijiemrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    if (player.countCards('he') == 0) return false;
                                    return game.countPlayer(function (current) {
                                        return current != player && current.countCards('h') > 0;
                                    }) > 0;
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                targetprompt: ["被出杀(A)", "出杀(B)", "出杀(B)"],
                                selectTarget: [2, 3],
                                multitarget: true,
                                line: false,
                                content: function () {
                                    'step 0'
                                    event.num = 0;
                                    targets.push(player);
                                    var frsTargets = targets[0], secTargets = targets.slice(1);
                                    for (var i of secTargets) i.line(frsTargets);
                                    'step 1'
                                    var frsTargets = targets[0], secTargets = targets.slice(1);
                                    if (event.num < secTargets.length) {
                                        secTargets[event.num].storage.yijiemrfz = frsTargets;
                                        secTargets[event.num].addTempSkill('yijiemrfz_gain', 'shaMiss');
                                        secTargets[event.num].chooseToUse(function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.filterCard.apply(this, arguments);
                                        }, '【义劫】：是否对' + get.translation(frsTargets) + '使用一张杀？').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.frsTargets && !ui.selected.targets.contains(_status.event.frsTargets)) return false;
                                            return lib.filter.targetEnabled.apply(this, arguments);
                                        }).set('addCount', false).set('frsTargets', frsTargets);
                                        event.num++;
                                        event.redo();
                                    }
                                },
                                ai: {
                                    order: 4.1,
                                    expose: 0.1,
                                    result: {
                                        player: 1,
                                        target: function (player, target) {
                                            if (ui.selected.targets.length == 0) {
                                                return -3;
                                            }
                                            else return 1;
                                        },
                                    },
                                },
                                //group:'tuohuangmrfz',
                                subSkill: {
                                    gain: {
                                        direct: true,
                                        charlotte: true,
                                        trigger: {
                                            source: 'damageEnd',
                                        },
                                        onremove: function (player) {
                                            delete player.storage.yijiemrfz;
                                        },
                                        filter: function (event, player) {
                                            return event.card && event.card.name == 'sha' && event.player == player.storage.yijiemrfz;
                                        },
                                        content: function () {
                                            if (trigger.player.countCards('he') > 0) player.gainPlayerCard(trigger.player, true, 'he');
                                            else trigger.player.damage('player');
                                            player.removeSkill('yijiemrfz_gain');
                                            delete player.storage.yijiemrfz;
                                        },
                                    },
                                },
                            },
                            fuhuangmrfz: {
                                audio: 2,
                                derivation: ["tuohuangmrfz", "weihumrfz"],
                                skillAnimation: true,
                                animationColor: "fire",
                                unique: true,
                                juexingji: true,
                                forced: true,
                                trigger: {
                                    player: "gainAfter",
                                    global: "loseAsyncAfter",
                                },
                                filter: function (event, player) {
                                    return player.countMark('fuhuangmrfz_mark') >= 2;
                                },
                                content: function () {
                                    player.removeAllmark('fuhuangmrfz_mark', false);
                                    player.awakenSkill('fuhuangmrfz');
                                    player.removeSkill('yijiemrfz');
                                    player.addSkill('tuohuangmrfz');
                                    player.addSkill('weihumrfz');
                                    player.draw(2);
                                    player.changeHujia(1);
                                    player.loseMaxHp(1);
                                },
                                group: 'fuhuangmrfz_mark',
                                subSkill: {
                                    mark: {
                                        intro: {
                                            content: '已获得#张牌',
                                        },
                                        silent: true,
                                        firstDo: true,
                                        trigger: {
                                            player: 'gainAfter',
                                            global: 'loseAsyncAfter',
                                        },
                                        filter: function (event, player) {
                                            if (player.countMark('fuhuangmrfz_mark') >= 2) return false;
                                            return event.getg(player).length && event.getParent('phaseDraw').player != player;
                                        },
                                        content: function () {
                                            player.addMark('fuhuangmrfz_mark', false, trigger.num);
                                        },
                                    },
                                },
                            },
                            tuohuangmrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current.countCards('he') > 0;
                                    });
                                },
                                multitarget: true,
                                multiline: true,
                                filterTarget: function (card, player, target) {
                                    return target.countCards('h') > 0;
                                },
                                selectTarget: [1, 3],
                                content: function () {
                                    'step 0'
                                    var num = 4 - targets.length;
                                    var cards = game.cardsGotoOrdering(get.cards(num)).cards;
                                    event.cards = cards;
                                    player.showCards(event.cards, get.translation(player) + '发动了【拓荒】');
                                    event.num = 0;
                                    'step 1'
                                    if (event.num < targets.length) {
                                        var suit = [];
                                        for (var i of event.cards) {
                                            if (!suit.contains(get.suit(i)) && lib.suit.contains(get.suit(i))) suit.push(get.suit(i));
                                        }
                                        targets[event.num].chooseToDiscard('h', '【拓荒】：你可以弃置' + get.translation(suit) + '花色的手牌并摸等量+1张牌', [1, Infinity], function (card) {
                                            var suitcard = get.suit(card);
                                            if (suit.contains('diamond') && suitcard == 'diamond') return true;
                                            if (suit.contains('heart') && suitcard == 'heart') return true;
                                            if (suit.contains('spade') && suitcard == 'spade') return true;
                                            if (suit.contains('club') && suitcard == 'club') return true;
                                        }).set('ai', function (card) {
                                            return 8 - get.value(card);
                                        });
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.cards) {
                                        targets[event.num].draw(1 + result.cards.length);
                                    }
                                    event.num++;
                                    event.goto(1);
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 1.35,
                                    order: 1,
                                    result: {
                                        player: 1,
                                        target: 1,
                                    },
                                },
                            },
                            weihumrfz: {
                                mod: {
                                    maxHandcard: function (player, num) {
                                        if (player.hujia > 0) return num + 1;
                                    },
                                },
                                audio: 2,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) {
                                    return player.hujia < 1;
                                },
                                forced: true,
                                content: function () {
                                    player.changeHujia();
                                },
                                group: 'weihumrfz_give',
                                subSkill: {
                                    give: {
                                        trigger: { player: 'phaseUseEnd' },
                                        filter: function (event, player) {
                                            return player.hujia > 0;
                                        },
                                        direct: true,
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget([1, player.hujia + 1], '【卫护】：你可以失去至少一点护甲，然后令等量+1名没有护甲的其他角色获得一点护甲', function (card, player, target) {
                                                return target != player && target.hujia < 1;
                                            }).ai = function (target) {
                                                return get.attitude(player, target) > 2;
                                            };
                                            'step 1'
                                            if (result.targets) {
                                                player.logSkill('weihumrfz');
                                                player.changeHujia(Math.min(-1, -result.targets.length + 1));
                                                for (i of result.targets) {
                                                    i.changeHujia();
                                                    player.line(i);
                                                }
                                            }
                                        },
                                    },
                                },
                            },
                            //提丰 小台风
                            ruiyamrfz: {
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        return '上一个成为一唯一目标的【杀】的角色：' + (player.storage.ruiyamrfz ? get.translation(player.storage.ruiyamrfz) : '无');
                                    },
                                },
                                audio: 2,
                                trigger: {
                                    player: 'useCard2',
                                },
                                filter: function (event, player) {
                                    if (!event.cards || event.card.name != 'sha') return false;
                                    if (!event.targets || event.targets > 1) return false;
                                    return event.targets[0] == player.storage.ruiyamrfz;
                                },
                                prompt: '【锐牙】：是否令此杀伤害+1？',
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 2;
                                },
                                content: function () {
                                    var target = trigger.targets[0];
                                    target.addTempSkill('ruiyamrfz_dam');
                                    target.storage.ruiyamrfz_dam = {
                                        card: trigger.card,
                                    };
                                },
                                group: 'ruiyamrfz_mark',
                                subSkill: {
                                    mark: {
                                        charlotte: true,
                                        silent: true,
                                        direct: true,
                                        trigger: {
                                            player: 'useCardToPlayered',
                                        },
                                        filter: function (event, player) {
                                            if (!event.targets || event.targets > 1) return false;
                                            return event.card && event.card.name == 'sha';
                                        },
                                        content: function () {
                                            player.storage.ruiyamrfz = trigger.target;
                                        },
                                    },
                                    dam: {
                                        onremove: function (player) {
                                            delete player.storage.ruiyamrfz_dam;
                                        },
                                        trigger: {
                                            player: "damageBegin3",
                                        },
                                        filter: function (event, player) {
                                            var info = player.storage.ruiyamrfz_dam;
                                            return event.card && event.card == info.card;
                                        },
                                        silent: true,
                                        popup: false,
                                        forced: true,
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                },
                            },
                            shouliemrfz: {
                                marktext: '矢',
                                intro: {
                                    name: '矢',
                                    content: "expansion",
                                    markcount: "expansion",
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 4,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    if (player.getExpansions('shouliemrfz').length >= 3) return false;
                                    return player.countCards('he', function (card) {
                                        return get.tag(card, 'damage') > 0;
                                    }) > 0;
                                },
                                filterCard: function (card) {
                                    return get.tag(card, 'damage');
                                },
                                selectCard: function () {
                                    var player = _status.event.player;
                                    return [1, 3 - player.getExpansions('shouliemrfz').length];
                                },
                                check: function (card) {
                                    return 8 - get.value(card) || card.name == 'sha';
                                },
                                prompt: '【狩猎】：将任意张带有伤害标签的牌置于你的武将牌上，称之为‘矢’',
                                discard: false,
                                lose: false,
                                content: function () {
                                    player.addToExpansion(cards, player, 'giveAuto').gaintag.add('shouliemrfz');
                                },
                                group: ['shouliemrfz_use', 'shouliemrfz_shasha'],
                                ai: {
                                    order: 13,
                                    threaten: function () {
                                        var player = _status.event.player;
                                        return 1.4 + (player.getExpansions('shouliemrfz').length * 0.2);
                                    },
                                },
                                subSkill: {
                                    ban: {
                                        charlotte: true,
                                    },
                                    use: {
                                        audio: 'shouliemrfz',
                                        enable: ['chooseToRespond', 'chooseToUse'],
                                        filter: function (event, player) {
                                            if (player.getExpansions('shouliemrfz').length < 1 || player.hasSkill('shouliemrfz_ban')) return false;
                                            return event.filterCard({ name: 'sha' }, player, event);
                                        },
                                        chooseButton: {
                                            dialog: function (event, player) {
                                                return ui.create.dialog('狩猎', player.getExpansions('shouliemrfz'), 'hidden');
                                            },
                                            backup: function (links, player) {
                                                return {
                                                    viewAs: {
                                                        name: 'sha',
                                                        nature: 'stab',
                                                    },
                                                    cards: links,
                                                    selectCard: -1,
                                                    position: 'x',
                                                    filterCard: (card) => lib.skill['shouliemrfz_use_backup'].cards.contains(card),
                                                    popname: true,
                                                    precontent: function () {
                                                        player.addTempSkill('shouliemrfz_ban', 'phaseEnd');
                                                    },
                                                }
                                            },
                                            prompt: function (links, player) {
                                                return '【狩猎】：将' + get.translation(links.name) + '当做一张刺【杀】使用或打出';
                                            },
                                        },
                                        ai: {
                                            order: 2.95,
                                            respondSha: true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (player.getExpansions('shouliemrfz').length < 1) return false;
                                            },
                                        },
                                    },
                                    shasha: {
                                        markimage: 'extension/明日方舟/image/orther/taifengmrfz.png',
                                        intro: {
                                            content: function (event, player) {
                                                return '你成为了' + get.translation(game.findPlayer(function (current) {
                                                    return current != player && current.hasSkill('shouliemrfz');
                                                })) + '的猎物';
                                            },
                                        },
                                        audio: 'shouliemrfz',
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            if (player.getHistory('skipped').contains('phaseUse') || player.getHistory('skipped').contains('phaseDiscard')) return false;
                                            return true;
                                        },
                                        check: function (event, player) {
                                            if (player.countCards('j', function (card) {
                                                return get.name(card) == 'lebu';
                                            }) > 0 && player.countCards('h') + 2 > player.getHandcardLimit()) return true;
                                            return player.getExpansions('shouliemrfz').length + player.countCards('h', function (card) {
                                                return get.name(card) == 'sha';
                                            }) > 3 && game.countPlayer() > 2;
                                        },
                                        prompt: '【狩猎】：是否跳过出牌阶段和弃牌阶段，然后选择一名其他角色，直到你的下个回合开始时，每个其他角色的结束阶段，你都可以对其使用一张【杀】？',
                                        content: function () {
                                            'step 0'
                                            player.skip('phaseUse');
                                            player.skip('phaseDiscard');
                                            player.addSkill('shouliemrfz_usesha');
                                            player.chooseTarget('【狩猎】：请选择一名其他角色', function (card, player, target) {
                                                return target != player;
                                            }, true).ai = function (target) {
                                                return get.attitude(player, target) < 2;
                                            };
                                            'step 1'
                                            if (result.targets) {
                                                var target = result.targets[0];
                                                player.storage.shouliemrfz_shasha = target;
                                                target.addMark('shouliemrfz_shasha', false);
                                                player.line(target);
                                            }
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                    },
                                    rem: {
                                        silent: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            game.countPlayer(function (current) {
                                                if (current.hasMark('shouliemrfz_shasha')) current.removeAllmark('shouliemrfz_shasha', false);
                                            });
                                            player.removeSkill('shouliemrfz_usesha');
                                            delete player.storage.shouliemrfz_shasha;
                                        },
                                    },
                                    usesha: {
                                        trigger: {
                                            global: "phaseJieshuBegin",
                                        },
                                        direct: true,
                                        filter: function (event, player) {
                                            if (event.player == player) return false;
                                            return event.player.isIn() &&
                                                lib.filter.targetEnabled({ name: 'sha' }, player, event.player) && (player.hasSha() || _status.connectMode || player.getExpansions('shouliemrfz').length > 0);
                                        },
                                        content: function () {
                                            var target = game.findPlayer(function (current) {
                                                return current != player && player.storage.shouliemrfz_shasha == current;
                                            });
                                            player.chooseToUse(function (card, player, event) {
                                                if (get.name(card) != 'sha') return false;
                                                return lib.filter.filterCard.apply(this, arguments);
                                            }, '【狩猎】：是否对' + get.translation(target) + '使用一张【杀】？').set('logSkill', 'shouliemrfz').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                                if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                                return lib.filter.targetEnabled.apply(this, arguments);
                                            }).set('sourcex', target);
                                        },
                                        group: 'shouliemrfz_rem',
                                    },
                                },
                            },

                            //克丽斯腾莱特 总辖
                            xingtumrfz: {
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        var list = ['手牌上限+1', '额定摸牌数+1', '使用【杀】的次数+1', '将手牌和体力值补至体力上限'];
                                        var show = {
                                            handlit: [],
                                            draw: [],
                                            sha: [],
                                            recover: []
                                        };

                                        for (var i = 0; i < game.players.length; i++) {
                                            var player = game.players[i];
                                            if (!player.storage.xingtumrfz) continue;

                                            if (player.storage.xingtumrfz.includes('手牌上限+1')) {
                                                show.handlit.push(player);
                                            }
                                            if (player.storage.xingtumrfz.includes('额定摸牌数+1')) {
                                                show.draw.push(player);
                                            }
                                            if (player.storage.xingtumrfz.includes('使用【杀】的次数+1')) {
                                                show.sha.push(player);
                                            }
                                            if (player.storage.xingtumrfz.includes('将手牌和体力值补至体力上限')) {
                                                show.recover.push(player);
                                            }
                                        }
                                        return '【星途】已选择选项的角色</br>手牌上限:' + get.translation(show.handlit) + '</br>额定摸牌:' + get.translation(show.draw) + '</br>使用【杀】:' + get.translation(show.sha) + '</br>补牌和体力:' + get.translation(show.recover);

                                    },
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                selectTarget: [0, 3],
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('he') > 0;
                                },
                                multitarget: true,
                                multiline: true,
                                content: function () {
                                    'step 0'
                                    event.targetx = targets.add(player);
                                    event.num = 0;
                                    event.cards = [];
                                    'step 1'
                                    if (event.num < event.targetx.length) {
                                        event.targetx[event.num].chooseCard('【星途】：你可以重铸一张牌', 'he', lib.filter.cardRecastable).set('ai', function (card) {
                                            var player = _status.event.player;
                                            if (player.hasCard(function (card) {
                                                return get.color(card) == 'red';
                                            }, 'he')) return get.color(card) == 'red';
                                            else return 8 - get.value(card);
                                        });
                                    }
                                    else event.goto(3);
                                    'step 2'
                                    if (result.cards) {
                                        event.cards.push(result.cards[0]);
                                    }
                                    else event.targetx.remove(event.targetx[event.num]);
                                    event.num++;
                                    event.goto(1);
                                    'step 3'
                                    //game.log(event.cards);
                                    if (event.cards.length) {
                                        for (var i = 0; i < event.targetx.length; i++) {
                                            event.targetx[i].recast(event.cards[i]);
                                        }
                                        event.tmp_bool = true;
                                        for (var i = 0; i < event.cards.length; i++) {
                                            if (i == 0) continue;
                                            if (get.color(event.cards[i]) != get.color(event.cards[i - 1])) {
                                                event.tmp_bool = false;
                                                break;
                                            }
                                        }
                                        if (targets.length < 2 || targets == undefined) event.tmp_bool = false;
                                    }
                                    //game.log(event.tmp_bool);
                                    'step 4'
                                    if (event.tmp_bool == true) {
                                        event.num2 = 0;
                                    }
                                    else event.finish();
                                    'step 5'
                                    //game.log(event.targetx);
                                    if (event.num2 < event.targetx.length) {
                                        var list = [], targety = event.targetx[event.num2], compare = ['手牌上限+1', '额定摸牌数+1', '使用【杀】的次数+1', '将手牌和体力值补至体力上限'];
                                        if (!targety.storage.xingtumrfz) targety.storage.xingtumrfz = [];
                                        for (var i = 0; i < compare.length; i++) {
                                            if (!targety.storage.xingtumrfz.includes(compare[i])) {
                                                list.push(compare[i]);
                                            }
                                        }
                                        if (list.length) targety.chooseControl().set('prompt', '【星途】：请选择一项').set('choiceList', list);
                                        else targety.chat('没有剩余选项！');
                                        event.list = list;
                                    }
                                    else event.finish();
                                    'step 6'
                                    if (result.control) {
                                        var targety = event.targetx[event.num2];
                                        //确定选择了哪个选项
                                        for (var i = 0; i < event.list.length; i++) {
                                            if (result.index == i) {
                                                targety.storage.xingtumrfz.add(event.list[i]);
                                                result.control = event.list[i];
                                            }
                                        }
                                        //执行对应效果
                                        game.log(targety, '选择了', result.control);
                                        if (result.control == '手牌上限+1') targety.addSkill('xingtumrfz_handlit');
                                        if (result.control == '使用【杀】的次数+1') targety.addSkill('xingtumrfz_sha');
                                        if (result.control == '额定摸牌数+1') targety.addSkill('xingtumrfz_draw');
                                        if (result.control == '将手牌和体力值补至体力上限') {
                                            targety.drawTo(targety.maxHp);
                                            targety.recoverTo();
                                        }
                                    }
                                    event.num2++;
                                    event.goto(5);
                                },
                                subSkill: {
                                    handlit: {
                                        charlotte: true,
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + 1;
                                            },
                                        },
                                    },
                                    draw: {
                                        charlotte: true,
                                        forced: true,
                                        lastDo: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        content: function () {
                                            trigger.num++;
                                        },
                                    },
                                    sha: {
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    order: 13,
                                    expose: 0.1,
                                    result: {
                                        player: 1,
                                        target: 1,
                                    },
                                },
                            },
                            poqiongmrfz: {
                                audio: 2,
                                derivation: ['xingyoumrfz', 'jiexiangmrfz'],
                                enable: "phaseUse",
                                limited: true,
                                skillAnimation: "epic",
                                animationColor: "thunder",
                                mark: true,
                                intro: {
                                    content: "limited",
                                },
                                init: (player, skill) => player.storage[skill] = false,
                                filter: function (event, player) {
                                    return player.storage.poqiongmrfz == false;
                                },
                                content: function () {
                                    'step 0'
                                    event.lose = 0;
                                    event.num = 0;
                                    event.showed = [];
                                    event.pd = [];
                                    player.storage.poqiongmrfz = true;
                                    'step 1'
                                    if (event.num < 6) {
                                        player.chooseCard('he', function (card) {
                                            return !event.showed.contains(card);
                                        });
                                    }
                                    else event.goto(3);
                                    'step 2'
                                    if (result.cards) {
                                        var cards1 = game.cardsGotoOrdering(get.cards(1)).cards;
                                        var cards2 = result.cards[0];
                                        player.showCards(cards2, get.translation(player) + '展示的牌</br>点数为:' + cards2.number);
                                        player.showCards(cards1, '牌堆顶的牌</br>点数为:' + cards1[0].number);
                                        event.showed.push(cards2);
                                        event.pd.push(cards1[0]);
                                        //game.log(event.pd);
                                        if (cards1[0].number > cards2.number) {
                                            player.loseMaxHp();
                                            event.lose++;
                                            player.popup('失败：' + event.lose);
                                        }
                                        game.cardsDiscard(cards1);
                                    }
                                    else {
                                        var cards1 = game.cardsGotoOrdering(get.cards(1)).cards;
                                        player.showCards(cards1, '牌堆顶的牌</br>点数为:' + cards1[0].number);
                                        game.cardsDiscard(cards1);
                                        player.loseMaxHp();
                                        event.lose++;
                                    }
                                    event.num++;
                                    event.goto(1);
                                    'step 3'
                                    if (event.lose < 3) {
                                        var num = Math.random();
                                        if (get.isLuckyStar(player)) num = 0.1;
                                        if (num < 0.2 && lib.config.FTLmrfz != true) {
                                            ui.backgroundMusic.src = lib.assetURL + 'extension/明日方舟/audio/BGM/fasterthanlight.mp3';
                                            mrfzfuc.ShowGetAch('FTLmrfz');
                                        }
                                        player.removeSkill('xingtumrfz');
                                        player.addSkill('xingyoumrfz');
                                        player.addSkill('jiexiangmrfz');
                                        player.gainMaxHp(3);
                                        player.recoverTo();
                                        player.gain(event.pd, 'gain2');
                                    }
                                    else player.popup('失败');
                                },
                                ai: {
                                    order: 12,
                                    result: {
                                        player: function (player, target, card) {
                                            var cards = player.getCards('he'), num = 0;
                                            for (var i = 0; i < cards.length; i++) {
                                                num += cards[i].number;
                                            }
                                            if (player.storage.xingtumrfz == undefined) return -1;
                                            if (player.storage.xingtumrfz.length < 3) return -1;
                                            return num - 42;
                                        },
                                    },
                                },
                            },
                            xingyoumrfz: {
                                intro: {
                                    content: '[其他角色/你]计算与[你/其他角色]的距离+#',
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return player.countCards('he', function (card) {
                                        for (var i = 0; i < player.storage.xingyoumrfz.length; i++) {
                                            var storage = player.storage.xingyoumrfz[i];
                                            if (get.suit(card) == storage) return false;
                                        }
                                        return true;
                                    }) > 0;
                                },
                                selectCard: 1,
                                filterCard: function (card) {
                                    var player = _status.event.player;
                                    for (var i = 0; i < player.storage.xingyoumrfz.length; i++) {
                                        var storage = player.storage.xingyoumrfz[i];
                                        if (get.suit(card) == storage) return false;
                                    }
                                    return true;
                                },
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                init: (player, skill) => player.storage[skill] = [],
                                content: function () {
                                    player.recast(cards[0]);
                                    player.storage.xingyoumrfz.add(cards[0].suit);
                                },
                                group: ['xingyoumrfz_del', 'xingyoumrfz_dis'],
                                subSkill: {
                                    del: {
                                        charlotte: true,
                                        forced: true,
                                        silent: true,
                                        lastDo: true,
                                        trigger: { player: 'phaseEnd' },
                                        content: function () {
                                            player.storage.xingyoumrfz = [];
                                        },
                                    },
                                    dis: {
                                        charlotte: true,
                                        forced: true,
                                        trigger: { global: 'roundStart' },
                                        content: function () {
                                            'step 0'
                                            player.addMark('xingyoumrfz_dis', false);
                                            'step 1'
                                            if (game.countPlayer(function (current) {
                                                return current != player && player.inRange(current);
                                            }) == 0) {
                                                player.loseMaxHp();
                                            }
                                        },
                                        mod: {
                                            globalTo: function (from, to, distance) {
                                                return distance += to.countMark('xingyoumrfz_dis');
                                            },
                                            globalFrom: function (from, to, distance) {
                                                return distance += from.countMark('xingyoumrfz_dis');
                                            },
                                        },
                                    },
                                },
                                ai: {
                                    order: 6,
                                },
                            },
                            jiexiangmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'die' },
                                forceDie: true,
                                content: function () {
                                    'step 0'
                                    var target = game.filterPlayer();
                                    event.targets = target.remove(player);
                                    player.draw(Math.max(event.targets.length + 1, player.recastCount()));
                                    'step 1'
                                    if (event.targets.length) {
                                        var num = player.countCards('he') - event.targets.length;
                                        player.chooseCard(true, '【揭相】:请选择至少一张牌将其分配给' + get.translation(event.targets[0]), [1, num + 1], 'he');
                                    }
                                    else event.goto(3);
                                    'step 2'
                                    if (result.cards) {
                                        var target = event.targets[0];
                                        target.gain(result.cards, 'gain2');
                                    }
                                    event.targets.remove(target);
                                    event.goto(1);
                                    'step 3'
                                    game.countPlayer(function (current) {
                                        if (current != player) {
                                            current.gainMaxHp();
                                            current.recover();
                                        }
                                    });
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.name == 'baocunzhemrfz';
                                    })) {
                                        var audio = new Audio('extension/明日方舟/audio/CN/caidankelisitengmrfz.mp3');
                                        audio.play();
                                    }
                                },
                            },
                            //芙兰卡
                            jifengmrfz: {
                                audio: 2,
                                trigger: {
                                    player: 'useCard2',
                                },
                                filter: function (event, player) {
                                    if (event.targets && event.targets.length > 1) return false;
                                    return event.cards && event.card.name == 'sha';
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.targets[0]) < 0;
                                },
                                prompt: function (event, player) {
                                    var target = event.targets[0], list = [];
                                    if (!target.hasEmptySlot(2)) list.push('无视防具');
                                    if (target.countCards('h') > 0) list.push('此【杀】需要两张闪才可抵消');
                                    if (target.hujia > 0) list.push('无视护甲');
                                    return '【极锋】:是否对' + get.translation(target) + '发动‘极锋’？（' + list + '）';
                                },
                                content: function () {
                                    var target = trigger.targets[0], num = 0;
                                    if (!target.hasEmptySlot(2)) {
                                        num++;
                                        target.addTempSkill('qinggang2');
                                        target.storage.qinggang2.add(trigger.card);
                                        target.markSkill('qinggang2');
                                    }
                                    if (target.countCards('h') > 0) {
                                        num++;
                                        player.addTempSkill('jifengmrfz_sha');
                                        player.storage.jifengmrfz = {
                                            card: trigger.card,
                                        }
                                    }
                                    if (target.hujia > 0) {
                                        target.addTempSkill('jifengmrfz_ighujia');
                                        target.storage.jifengmrfz_ighujia.add(trigger.card);
                                        target.markSkill('jifengmrfz_ighujia');
                                        num++;
                                    }
                                    if (!player.hasSkill('jifengmrfz_used')) {
                                        player.addTempSkill('jifengmrfz_used', 'phaseEnd');
                                        player.draw(3 - num);
                                    }
                                },
                                subSkill: {
                                    sha: {
                                        trigger: {
                                            player: "useCardToPlayered",
                                        },
                                        forced: true,
                                        silent: true,
                                        filter: function (event, player) {
                                            var info = player.storage.jifengmrfz;
                                            if (!event.card || event.card != info.card) return false;
                                            return event.card.name == 'sha' && !event.getParent().directHit.contains(event.target);
                                        },
                                        logTarget: "target",
                                        content: function () {
                                            var id = trigger.target.playerid;
                                            var map = trigger.getParent().customArgs;
                                            if (!map[id]) map[id] = {};
                                            if (typeof map[id].shanRequired == 'number') {
                                                map[id].shanRequired++;
                                            }
                                            else {
                                                map[id].shanRequired = 2;
                                            }
                                            delete player.storage.jifengmrfz;
                                            player.removeSkill('jifengmrfz_sha');
                                        },
                                        ai: {
                                            "directHit_ai": true,
                                            skillTagFilter: function (player, tag, arg) {
                                                if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1 || get.distance(player, arg.target) > 1) return false;
                                            },
                                        },
                                    },
                                    used: {
                                        charlotte: true,
                                    },
                                    ighujia: {
                                        ai: {
                                            nohujia: true,
                                        },
                                        init: function (player, skill) {
                                            if (!player.storage[skill]) player.storage[skill] = [];
                                        },
                                        onremove: true,
                                        trigger: {
                                            player: ["damage", "damageCancelled", "damageZero"],
                                            source: ["damage", "damageCancelled", "damageZero"],
                                            target: ["shaMiss", "useCardToExcluded", "useCardToEnd", "eventNeutralized"],
                                            global: ["useCardEnd"],
                                        },
                                        charlotte: true,
                                        firstDo: true,
                                        filter: function (event, player) {
                                            return player.storage.jifengmrfz_ighujia && event.card && player.storage.jifengmrfz_ighujia.contains(event.card) && (event.name != 'damage' || event.notLink());
                                        },
                                        silent: true,
                                        forced: true,
                                        popup: false,
                                        priority: 12,
                                        content: function () {
                                            player.storage.jifengmrfz_ighujia.remove(trigger.card);
                                            if (!player.storage.jifengmrfz_ighujia.length) player.removeSkill('jifengmrfz_ighujia');
                                        },
                                        marktext: "✘",
                                        intro: {
                                            name: '✘',
                                            content: "当前护甲已失效",
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.2,
                                },
                            },
                            xiqiaomrfz: {
                                audio: 2,
                                trigger: {
                                    player: ["chooseToRespondBegin", "chooseToUseBegin"],
                                },
                                filter: function (event, player) {
                                    if (player.hasSkill('xiqiaomrfz_used')) return false;
                                    if (event.responded) return false;
                                    if (!event.filterCard || !event.filterCard({ name: 'shan' }, player, event)) return false;
                                    if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({ name: 'shan' }, player, event)) return false;
                                    return true;
                                },
                                check: () => 1,
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('xiqiaomrfz_used', 'phaseEnd');
                                    var next = player.chooseToDiscard('he', true);
                                    next.set('prompt', '【细巧】:你可以弃置一张牌，然后摸一张牌并展示之，若类型不同，视为使用或打出一张【闪】');
                                    'step 1'
                                    if (result.cards) {
                                        event.card = result.cards[0];
                                        player.draw('visible');
                                    }
                                    else event.finish();
                                    'step 2'
                                    var card = result[0];
                                    var cardl = event.card;
                                    if (get.type2(card) != get.type2(cardl)) {
                                        trigger.untrigger();
                                        trigger.set('responded', true);
                                        trigger.result = { bool: true, card: { name: 'shan', isCard: true } }
                                    }
                                },
                                subSkill: {
                                    used: {
                                        charlotte: true,
                                    },
                                },
                                ai: {
                                    respondShan: true,
                                    threaten: 0.8,
                                },
                            },
                            //D32 星极
                            tianyimrfz: {
                                audio: 2,
                                mark: true,
                                locked: false,
                                zhuanhuanji: true,
                                marktext: '☯',
                                init: function (player, skill) {
                                    player.storage[skill] = true;
                                },
                                intro: {
                                    content: function (storage, player, skill) {
                                        if (player.storage.tianyimrfz == true) return '观看牌堆顶两张牌，并将其置于牌堆顶或牌堆底';//阳
                                        return '进行一次判定，并获得判定牌，本回合此牌视为【闪】，若判定结果为♣，你本局游戏使用【杀】的次数+1（至多+3）';//阴
                                    },
                                },
                                trigger: { global: 'phaseJudgeBegin' },
                                prompt: function (event, player) {
                                    if (player.storage.tianyimrfz == true) var str = '观看牌堆顶两张牌，并将其置于牌堆顶或牌堆底';//阳
                                    else var str = '进行一次判定，并获得判定牌，本回合此牌视为【闪】，若判定结果为♣，你本局游戏使用【杀】的次数+1（至多+3）';//阴
                                    return '【天仪】:你可以' + str;
                                },
                                callback: function () {
                                    if (event.judgeResult.suit == 'club') {
                                        if (player.countMark('tianyimrfz_shacount') < 3) player.addMark('tianyimrfz_shacount', false);
                                    }
                                    player.gain(card, 'gain2').gaintag.add('tianyimrfz');
                                    player.addTempSkill('tianyimrfz_remove', 'phaseEnd');
                                },
                                content: function () {
                                    if (player.storage.tianyimrfz) player.chooseToGuanxing(2);
                                    else player.judge(function (card) {
                                        if (get.suit(card) == 'club') return 0;
                                        return -4;
                                    }).set('callback', lib.skill.tianyimrfz.callback);
                                    player.changeZhuanhuanji('tianyimrfz');
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('tianyimrfz_shacount');
                                    },
                                },
                                subSkill: {
                                    shacount: {
                                        charlotte: true,
                                        intro: {
                                            content: '使用【杀】的次数+#',
                                        },
                                    },
                                    remove: {
                                        onremove: function (player) {
                                            player.removeGaintag('tianyimrfz');
                                        },
                                        charlotte: true,
                                        mod: {
                                            cardname: function (card, player, name) {
                                                if (card.hasGaintag('tianyimrfz')) return 'shan';
                                            },
                                        },
                                    },
                                },
                            },
                            huijianmrfz: {
                                audio: 2,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (!event.targets || event.targets.length > 1) return false;
                                    if (!player.canUseToAnyone(event.card, true, false)) return false;
                                    if (!player.isPhaseUsing()) return false;
                                    if (player.getCardUsable('sha') < 1) return false;
                                    return get.type(event.card) == 'trick' || get.type(event.card) == 'basic';
                                },
                                usable: 1,
                                direct: true,
                                content: function () {
                                    'step 0'
                                    player.chooseTarget([1, player.getCardUsable('sha')], get.prompt('huijianmrfz'), '为' + get.translation(trigger.card) + '增加至多' + player.getCardUsable('sha') + '个目标', function (card, player, target) {
                                        return !_status.event.sourcex.contains(target) && player.canUse(_status.event.card, target);
                                    }).set('sourcex', trigger.targets).set('ai', function (target) {
                                        var player = _status.event.player;
                                        return get.effect(target, _status.event.card, player, player);
                                    }).set('card', trigger.card).setHiddenSkill(event.name);
                                    'step 1'
                                    if (result.bool) {
                                        if (!event.isMine() && !event.isOnline()) game.delayx();
                                        for (var i = 0; i < result.targets.length; i++) {
                                            trigger.targets.push(result.targets[i]);
                                            player.line(result.targets[i]);
                                        }
                                        player.logSkill('huijianmrfz');
                                        player.addMark('huijianmrfz_minus', result.targets.length, false);
                                        player.addTempSkill('huijianmrfz_minus', 'phaseUseAfter');
                                    }
                                    else {
                                        player.storage.counttrigger.huijianmrfz--;
                                    }
                                },
                                subSkill: {
                                    minus: {
                                        onremove: function (player) {
                                            player.removeAllmark('huijuanmrfz_minus', false);
                                        },
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num - player.countMark('huijianmrfz_minus');
                                            },
                                        },
                                    },
                                },
                            },
                            bingmingmrfz: {
                                audio: 2,
                                trigger: { global: 'roundStart' },
                                filter: function (event, player) {
                                    if (!game.findPlayer(function (current) {
                                        current.name == 'xingyuanmrfz';
                                    })) return false;
                                    return game.roundNumber == 2;
                                },
                                forced: true,
                                content: function () {
                                    var target = game.findPlayer(function (current) {
                                        current.name == 'xingyuanmrfz';
                                    });
                                    var num1 = player.countCards('h') - target.countCards('h');
                                    var num2 = player.getHandcardLimit() - target.getHandcardLimit();
                                    if (num1 > 0) {
                                        player.chooseToDiscard(true, '【病鸣】:请将手牌调整至' + num1, num1);
                                    }
                                    else if (num1 < 0) player.drawTo(-num1);
                                    if (num2 != 0) {
                                        player.addMark('bingmingmrfz', false, Math.abs(num2));
                                    }
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('bingmingmrfz');
                                    },
                                },
                            },
                            //星源
                            daoliumrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 2,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                check: function (card) {
                                    return 6 - get.value(card);
                                },
                                filterCard: true,
                                selectCard: 1,
                                filterTarget: function (card, player, target) {
                                    return target != player;
                                },
                                selectTarget: 1,
                                lose: false,
                                discard: false,
                                content: function () {
                                    'step 0'
                                    event.targetx = target;
                                    event.target = [];
                                    event.discard = [];
                                    event.discard.push(target);
                                    event.target.push(target.getNext());
                                    event.target.push(target.getPrevious());
                                    if (event.target.contains(player)) event.target.remove(player);
                                    player.give(cards, target);
                                    'step 1'
                                    if (event.target.length && event.targetx.countCards('he') > 0) {
                                        event.targetx.chooseCard(true, '【导流】:请交给' + get.translation(event.target[0]) + '一张牌', 'he');
                                    }
                                    else event.goto(3)
                                    'step 2'
                                    if (result.cards) {
                                        var card = result.cards[0];
                                        event.targetx.give(card, event.target[0]);
                                        event.discard.push(event.target[0]);
                                    }
                                    event.target.remove(event.target[0]);
                                    event.goto(1);
                                    'step 3'
                                    if (event.discard.length) {
                                        if (event.discard[0].countCards('he') > 0) event.discard[0].chooseToDiscard(true, 'he', '【导流】:请弃置一张牌');
                                        event.discard.remove(event.discard[0]);
                                        event.redo();
                                    }
                                },
                                ai: {
                                    order: 4,
                                    expose: 0.1,
                                    result: {
                                        target: function (player, target) {
                                            var pre = target.getPrevious(), net = target.getNext(), num = 0;
                                            if (game.countPlayer() == 2) return 0;
                                            if (get.attitude(pre, player) > 2 && get.attitude(net, player) > 2) return 0;
                                            return -1;
                                        },
                                    },
                                },
                            },
                            gewumrfz: {
                                audio: 2,
                                trigger: {
                                    global: "gainEnd",
                                },
                                filter: function (event, player) {
                                    return event.source && event.source.isIn() && event.source == player && event.cards.length >= 1;
                                },
                                direct: true,
                                logTarget: "source",
                                content: function () {
                                    if (player.countMark('gewumrfz') < 5) {
                                        player.addMark('gewumrfz', false);
                                        player.logSkill('gewumrfz');
                                    }
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        if (!player.getStorage('gewumrfz_mark').contains(trigger.cards[i].name)) {
                                            player.markAuto('gewumrfz_mark', [trigger.cards[i].name]);
                                            if (player.storage.gewumrfz_mark.length % 2 == 0) {
                                                player.draw();
                                                player.logSkill('gewumrfz');
                                            }
                                            if (player.storage.gewumrfz_mark.length % 4 == 0) {
                                                player.addMark('gewumrfz_draw', false);
                                                player.logSkill('gewumrfz');
                                            }
                                        }
                                    }
                                },
                                mod: {
                                    maxHandcard: function (player, num) {
                                        return num + player.countMark('gewumrfz');
                                    },
                                },
                                group: ['gewumrfz_mark', 'gewumrfz_draw'],
                                subSkill: {
                                    mark: {
                                        intro: {
                                            content: function (event, player) {
                                                return '记录的牌名：' + get.translation(player.storage.gewumrfz_mark) + '</br>' + (player.countMark('gewumrfz_draw') > 0 ? ("额定摸牌数+" + player.countMark('gewumrfz_draw')) : (''));
                                            },
                                        },
                                        onremove: true,
                                        charlotte: true,
                                    },
                                    draw: {
                                        audio: 'gewumrfz',
                                        forced: true,
                                        charlotte: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return player.countMark('gewumrfz_draw') > 0;
                                        },
                                        content: function () {
                                            trigger.num += player.countMark('gewumrfz_draw');
                                        },
                                    },
                                },
                            },
                            //vvan薇薇安娜
                            zhanjumrfz: {
                                audio: 2,
                                trigger: {
                                    global: 'dying',
                                },
                                filter: function (event, player) {
                                    if (!game.checkMod({ name: 'tao', isCard: true }, player, event.player, 'unchanged', 'cardSavable', player)) return false;
                                    return player.countCards('h') > 0 && event.player.hp <= 0;
                                },
                                check: function (event, player) {
                                    if (get.attitude(player, event.player) < 0) return false;
                                    return player.countCards('h', function (card) {
                                        return card.name == 'tao';
                                    }) + event.player.hp < 0;
                                },
                                prompt: function (event, player) {
                                    return '【盏菊】:你可以将所有手牌当作【桃】对' + get.translation(event.player) + '使用';
                                },
                                content: function () {
                                    var cards = player.getCards('h');
                                    trigger.player.storage.zhanjumrfz = true;
                                    player.useCard({ name: 'tao' }, cards, trigger.player);
                                },
                                group: 'zhanjumrfz_recast',
                                subSkill: {
                                    recast: {
                                        silent: true,
                                        lastDo: true,
                                        trigger: { global: "dyingAfter" },
                                        filter: function (event, player) {
                                            return event.player.storage.zhanjumrfz;
                                        },
                                        content: function () {
                                            'step 0'
                                            delete trigger.player.storage.zhanjumrfz;
                                            if (player.countCards('hej') == 0) event.finish();
                                            else {
                                                player.chooseCard('【盏菊】:你可以重铸一张你区域内的牌', 'hej');
                                            }
                                            'step 1'
                                            if (result.cards) {
                                                player.recast(result.cards);
                                                player.logSkill('zhanjumrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            zhuhuomrfz: {
                                audio: 2,
                                enable: 'phaseUse',
                                usable: 1,
                                filterCard: function (card, player) {
                                    return player.canRecast(card);
                                },
                                selectCard: 1,
                                filter: function (event, player) {
                                    return player.countCards('he') > 0;
                                },
                                position: 'he',
                                discard: false,
                                lose: false,
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                content: function () {
                                    player.recast(cards);
                                },
                                group: 'zhuhuomrfz_draw',
                                ai: {
                                    order: 13,
                                    result: {
                                        player: 1,
                                    },
                                },
                                subSkill: {
                                    reget: {
                                        silent: true,
                                        popup: false,
                                        lastDo: true,
                                        trigger: {
                                            global: ['phaseZhunbeiAfter', 'phaseJudgeAfter', 'phaseUseAfter', 'phaseDiscardAfter', 'phaseJieshuAfter'],
                                        },
                                        content: function () {
                                            player.addSkill('zhuhuomrfz');
                                            player.removeSkill('zhuhuomrfz_reget');
                                        },
                                    },
                                    draw: {
                                        direct: true,
                                        trigger: { player: 'loseAfter' },
                                        filter: function (event, player) {
                                            if (!event.cards) return false;
                                            return event.getParent(2).name == 'recast';
                                        },
                                        content: function () {
                                            'step 0'
                                            if (trigger.cards.length > 1) {
                                                var num = 0;
                                                for (i of trigger.cards) {
                                                    num += get.cardNameLength(i);
                                                }
                                            }
                                            else var num = get.cardNameLength(trigger.cards[0]);
                                            event.num = num;
                                            var next = player.chooseControl('发牌', '摸牌', 'cancel2');
                                            next.set('prompt', '是否发动【烛火】？');
                                            next.set('ai', function () {
                                                var player = _status.event.player;
                                                var count = game.countPlayer(function (current) {
                                                    return current != player && get.attitude(current, player) > 2;
                                                });
                                                if (num == 1) return 0;
                                                if (count - num < 0) return 1;
                                                return 0;
                                            });
                                            'step 1'
                                            if (result.control == 'cancel2') event.finish();
                                            else {
                                                if (result.index == 1) {
                                                    player.draw(Math.min(event.num, 5));
                                                    player.logSkill('zhuhuo2mrfz');
                                                    player.addSkill('zhuhuomrfz_reget');
                                                    player.removeSkill('zhuhuomrfz');
                                                }
                                                else {
                                                    var num = event.num;
                                                    var next = player.chooseTarget(true, '【烛火】:你可以选择至多' + num + '名角色，令其各摸一张牌', [1, num]);
                                                    next.ai = function (target) {
                                                        return get.attitude(target, player) > 2;
                                                    };
                                                }
                                            }
                                            'step 2'
                                            if (result.targets) {
                                                var targets = result.targets;
                                                for (i of targets) {
                                                    i.draw();
                                                    player.line(i);
                                                }
                                                player.logSkill('zhuhuo2mrfz');
                                            }
                                        },
                                        ai: {
                                            expose: 0.1,
                                        },
                                    },
                                },
                            },
                            zhuhuo2mrfz: {
                                audio: 2,
                            },
                            yunjiaomrfz: {
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (typeof card == 'object' && !get.tag(card, 'norepeat')) {
                                            var history = player.getAllHistory('useCard');
                                            if (history.length > 0) {
                                                var cardx = history[history.length - 1].card;
                                                if (get.is.yayun(get.translation(cardx.name), get.translation(card.name))) return num + 20;
                                            }
                                        }
                                    },
                                },
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        var history = player.getAllHistory('useCard');
                                        var evt = history[history.length - 1];
                                        if (!evt) return '没有使用过牌';
                                        return '你上一张使用的牌是：' + get.translation(evt.card.name) + '(' + get.pinyin(get.translation(evt.card.name)) + ')';
                                    },
                                },
                                audio: 2,
                                forced: true,
                                trigger: { player: 'useCard' },
                                filter: function (event, player) {
                                    var history = player.getAllHistory('useCard'), index = history.indexOf(event);
                                    if (index < 1) return false;
                                    var evt = history[index - 1];
                                    return get.is.yayun(get.translation(event.card.name), get.translation(evt.card.name)) && player.isPhaseUsing();
                                },
                                content: function () {
                                    var skills = player.getStockSkills(true, true);
                                    game.expandSkills(skills);
                                    var resetSkills = [];
                                    var suffixs = ['used', 'round', 'block', 'blocker'];
                                    for (var skill of skills) {
                                        var info = get.info(skill);
                                        if (typeof info.usable == 'number') {
                                            if (player.hasSkill('counttrigger') && player.storage.counttrigger[skill] && player.storage.counttrigger[skill] >= 1) {
                                                delete player.storage.counttrigger[skill];
                                                resetSkills.add(skill);
                                            }
                                            if (typeof get.skillCount(skill) == 'number' && get.skillCount(skill) >= 1) {
                                                delete player.getStat('skill')[skill];
                                                resetSkills.add(skill);
                                            }
                                        }
                                        if (info.round && player.storage[skill + '_roundcount']) {
                                            delete player.storage[skill + '_roundcount'];
                                            resetSkills.add(skill);
                                        }
                                        if (player.awakenedSkills.contains(skill)) {
                                            player.restoreSkill(skill);
                                            resetSkills.add(skill);
                                        }
                                        for (var suffix of suffixs) {
                                            if (player.hasSkill(skill + '_' + suffix)) {
                                                player.removeSkill(skill + '_' + suffix);
                                                resetSkills.add(skill);
                                            }
                                        }
                                    }
                                    if (resetSkills.length) {
                                        var str = '';
                                        for (var i of resetSkills) {
                                            str += '【' + get.translation(i) + '】、';
                                        }
                                        game.log(player, '重置了技能', '#g' + str.slice(0, -1));
                                    }
                                },
                            },
                            //战车
                            jiqiangmrfz: {
                                audio: 2,
                                derivation: ['DP27mrfz'],
                                trigger: { global: 'roundStart' },
                                forced: true,
                                filter: function (event, player) {
                                    return !player.isDisabled(1) && (event.name != 'phase' || game.phaseNumber == 0);
                                },
                                content: function () {
                                    var card = game.createCard('DP27mrfz', 'diamond', 13);
                                    player.$gain2(card);
                                    game.delayx();
                                    player.equip(card);
                                },
                                group: 'jiqiangmrfz_get',
                                subSkill: {
                                    get: {
                                        audio: 'jiqiangmrfz',
                                        forced: true,
                                        trigger: { player: 'phaseZhunbeiBegin' },
                                        filter: function (event, player) {
                                            return !player.isDisabled(1) && player.getCards('e', function (card) {
                                                return get.name(card) == 'DP27mrfz';
                                            }).length == 0;
                                        },
                                        content: function () {
                                            var card = game.createCard('DP27mrfz', 'diamond', 13);
                                            player.$gain2(card);
                                            game.delayx();
                                            player.equip(card);
                                        },
                                    },
                                },
                            },
                            qingxiemrfz: {
                                audio: 2,
                                trigger: { player: 'phaseDrawEnd' },
                                firstDo: true,
                                filter: function (event, player) {
                                    if (player.skipList.contains('phaseUse')) return false;
                                    return game.countPlayer(function (current) {
                                        return player.inRangeOf(current) && current != player;
                                    }) > 0;
                                },
                                check: function (event, player) {
                                    if (get.value(player.getCards('h')) >= 10) return false;
                                    if (game.countPlayer(function (current) {
                                        return player.inRangeOf(current) && current != player && get.attitude(player, current) < 0;
                                    }) < 1) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    var next = player.chooseTarget('【倾泻】:请选择一名攻击范围内的其他角色', true, function (card, target, player) {
                                        return target != player && player.inRangeOf(target);
                                    });
                                    next.ai = function (target) {
                                        return get.effect(target, { name: 'sha' }, _status.event.player);
                                    };
                                    event.num = 0;
                                    event.skip = 0;
                                    'step 1'
                                    if (result.targets) {
                                        event.target = result.targets[0];
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (!event.target.isAlive()) {
                                        event.goto(4);
                                    }
                                    else player.judge(function (card) {
                                        var color = get.color(card);
                                        if (color == 'red') return 4;
                                        return -4;
                                    });
                                    'step 3'
                                    if (result.color == 'red') {
                                        player.useCard({ name: 'sha', isCard: true }, false, event.target);
                                        event.skip++;
                                    }
                                    event.num++;
                                    if (event.num < 3) event.goto(2);
                                    'step 4'
                                    if (event.skip > 1) {
                                        player.skip('phaseUse');
                                    }
                                },
                            },
                            //闪盾 闪击
                            shandunmrfz: {
                                mod: {
                                    globalFrom: function (from, to, distance) {
                                        if (from.isAction()) return distance - 1;
                                        return distance + 1;
                                    },
                                    globalTo: function (from, to, distance) {
                                        if (!to.isAction()) return distance + 1;
                                        return distance - 1;
                                    },
                                },
                            },
                            xuanmumrfz: {
                                audio: 2,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (player.storage.xuanmumrfz_roundcount >= 4) return false;
                                    if (!event.targets || event.targets.length > 1) return false;
                                    if (get.distance(player, event.targets[0]) > 1) return false;
                                    if (event.targets[0].countCards('h') < 1) return false;
                                    var type = get.type(event.card);
                                    return event.targets[0] != player && (type == 'basic' || type == 'trick');
                                },
                                check: function (event, player) {
                                    return get.attitude(player, event.target) < 0;
                                },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.xuanmumrfz_roundcount) player.storage.xuanmumrfz_roundcount = 0;
                                    player.storage.xuanmumrfz_roundcount++;
                                    player.choosePlayerCard(trigger.targets[0], true, 'h');
                                    'step 1'
                                    if (result.cards) {
                                        var card = result.cards[0];
                                        event.card = result.cards[0];
                                        player.showCards(card, get.translation(player) + '对' + get.translation(trigger.target) + '发动了【炫目】');
                                    }
                                    'step 2'
                                    if (!mrfzfuc.canRespond(trigger.card, event.card)) {
                                        trigger.directHit.addArray(game.filterPlayer(function (current) {
                                            return current != player && current == trigger.targets[0];
                                        }));
                                        if (trigger.targets[0].countGainableCards(player, 'h')) {
                                            player.gainPlayerCard('h', trigger.targets[0], true);
                                        }
                                        if (Math.random() < 0.25) trigger.targets[0].chat('有闪盾！');
                                    }
                                },
                                group: 'xuanmumrfz_roundcount',
                                subSkill: {
                                    roundcount: {
                                        mark: true,
                                        init: player => {
                                            player.storage.xuanmumrfz_roundcount = 0;
                                            player.markSkill('xuanmumrfz_roundcount');
                                        },
                                        onremove: true,
                                        intro: {
                                            content: function (event, player) {
                                                return player.storage.xuanmumrfz_roundcount + '/4';
                                            },
                                            markcount: function (event, player) {
                                                if (!player.storage.xuanmumrfz_roundcount) return 4;
                                                return 4 - player.storage.xuanmumrfz_roundcount;
                                            },
                                        },
                                        trigger: {
                                            global: "roundStart",
                                        },
                                        forced: true,
                                        popup: false,
                                        silent: true,
                                        content: () => {
                                            player.storage.xuanmumrfz_roundcount = 0;
                                        },
                                    },
                                },
                            },
                            chuandunmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'damageEnd' },
                                content: function () {
                                    'step 0'
                                    player.draw('visible');
                                    'step 1'
                                    if (result) {
                                        var card = result[0];
                                        if ((card.suit == 'heart' || card.suit == 'spade') && (card.number == 6)) {
                                            player.loseHp(player.hp);
                                        }
                                    }
                                },
                            },
                            //霜星
                            xuexingmrfz: {
                                audio: 2,
                                mod: {
                                    targetEnabled: function (card) {
                                        if (card.name == 'sha' && card.nature == 'ice') return false;
                                    },
                                },
                                enable: ["chooseToRespond", "chooseToUse"],
                                filterCard: function (card, player) {
                                    return get.color(card) == 'black';
                                },
                                position: "hes",
                                viewAs: {
                                    name: "sha",
                                    nature: 'ice',
                                },
                                viewAsFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                prompt: "将一张黑色牌当冰【杀】使用或打出",
                                check: function (card) {
                                    var val = get.value(card);
                                    if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                    return 5 - val;
                                },
                                ai: {
                                    skillTagFilter: function (player) {
                                        if (get.zhu(player, 'shouyue')) {
                                            if (!player.countCards('hes')) return false;
                                        }
                                        else {
                                            if (!player.countCards('hes', { color: 'red' })) return false;
                                        }
                                    },
                                    respondSha: true,
                                    yingbian: function (card, player, targets, viewer) {
                                        if (get.attitude(viewer, player) <= 0) return 0;
                                        var base = 0, hit = false;
                                        if (get.cardtag(card, 'yingbian_hit')) {
                                            hit = true;
                                            if (targets.filter(function (target) {
                                                return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                            })) base += 5;
                                        }
                                        if (get.cardtag(card, 'yingbian_all')) {
                                            if (game.hasPlayer(function (current) {
                                                return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                            })) base += 5;
                                        }
                                        if (get.cardtag(card, 'yingbian_damage')) {
                                            if (targets.filter(function (target) {
                                                return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })
                                            })) base += 5;
                                        }
                                        return base;
                                    },
                                    canLink: function (player, target, card) {
                                        if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                        if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return false;
                                        if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                        return true;
                                    },
                                    basic: {
                                        useful: [5, 3, 1],
                                        value: [5, 3, 1],
                                    },
                                    order: function (item, player) {
                                        if (player.hasSkillTag('presha', true, null, true)) return 10;
                                        if (game.hasNature(item, 'linked')) {
                                            if (game.hasPlayer(function (current) {
                                                return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                            }) && game.countPlayer(function (current) {
                                                return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                            }) > 1) return 3.1;
                                            return 3;
                                        }
                                        return 3.05;
                                    },
                                    result: {
                                        target: function (player, target, card, isLink) {
                                            var eff = function () {
                                                if (!isLink && player.hasSkill('jiu')) {
                                                    if (!target.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    })) {
                                                        if (get.attitude(player, target) > 0) {
                                                            return -7;
                                                        }
                                                        else {
                                                            return -4;
                                                        }
                                                    }
                                                    return -0.5;
                                                }
                                                return -1.5;
                                            }();
                                            if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) return eff / 1.2;
                                            return eff;
                                        },
                                    },
                                    tag: {
                                        respond: 1,
                                        respondShan: 1,
                                        damage: function (card) {
                                            if (game.hasNature(card, 'poison')) return;
                                            return 1;
                                        },
                                        natureDamage: function (card) {
                                            if (game.hasNature(card)) return 1;
                                        },
                                        fireDamage: function (card, nature) {
                                            if (game.hasNature(card, 'fire')) return 1;
                                        },
                                        thunderDamage: function (card, nature) {
                                            if (game.hasNature(card, 'thunder')) return 1;
                                        },
                                        poisonDamage: function (card, nature) {
                                            if (game.hasNature(card, 'poison')) return 1;
                                        },
                                    },
                                },
                                group: 'xuexingmrfz_draw',
                                subSkill: {
                                    draw: {
                                        audio: 'xuexingmrfz',
                                        forced: true,
                                        trigger: { player: 'loseAfter' },
                                        filter: function (event, player) {
                                            return !player.isPhaseUsing() && event.getParent().name == 'discard';
                                        },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                            },
                            chegumrfz: {
                                audio: 2,
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!event.targets || !event.cards) return false;
                                    if (event.targets.length == 1 && event.targets[0] == player) return false;
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    return game.hasPlayer(function (current) {
                                        return current != player && !current.hasSkill('chegumrfz_ban') && event.targets.contains(current);
                                    });
                                },
                                check: function (event, player) {
                                    return game.hasPlayer(function (current) {
                                        return current != player && get.attitude(current, player) < 0 && !current.hasSkill('chegumrfz_ban');
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    event.targets = trigger.targets.remove(player);
                                    if (event.targets.length > 1) {
                                        player.chooseTarget([1, Infinity], true, '【彻骨】：请选择任意名成为目标的其他角色', function (card, player, target) {
                                            return target != player && event.targets.contains(target) && !target.hasSkill('chegumrfz_ban');
                                        }).ai = function (target) {
                                            return get.attitude(player, target) < 0;
                                        };
                                    }
                                    'step 1'
                                    var disabledCardSkill = function (target) {
                                        var card = target.getCards('e', function (card) {
                                            return get.subtype(card) != 'equip5';
                                        });
                                        if (!card) return;
                                        for (var i = 0; i < card.length; i++) {
                                            var info = get.info(card[i]);
                                            var skills = info.skills;
                                            if (!info.skills) return;
                                            for (var j = 0; j < skills.length; j++) {
                                                target.disabledSkills[skills[j]] = true;
                                            }
                                        }
                                    };
                                    if (result.targets) {
                                        var targets = result.targets;
                                        for (i of targets) {
                                            i.addSkill('chegumrfz_ban');
                                            i.markSkill('chegumrfz_ban');
                                            player.line(i);
                                            disabledCardSkill(i);
                                        }
                                    }
                                    else {
                                        event.targets[0].addSkill('chegumrfz_ban');
                                        event.targets[0].markSkill('chegumrfz_ban');
                                        disabledCardSkill(event.targets[0]);
                                        player.line(event.targets[0]);
                                    }
                                },
                                subSkill: {
                                    ban2: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: ['loseEnd', 'useCardAfter'] },
                                        content: function () {
                                            var disabledCardSkill = function (player) {
                                                var card = player.getCards('e', function (card) {
                                                    return get.subtype(card) != 'equip5';
                                                });
                                                if (!card) return;
                                                for (var i = 0; i < card.length; i++) {
                                                    var info = get.info(card[i]);
                                                    var skills = info.skills;
                                                    if (!info.skills) return;
                                                    for (var j = 0; j < skills.length; j++) {
                                                        player.disabledSkills[skills[j]] = true;
                                                    }
                                                }
                                            };
                                            player.disabledSkills = {};
                                            disabledCardSkill(player);
                                        },
                                    },
                                    ban: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        init: function (player, skill) {
                                            player.addSkillBlocker(skill);
                                        },
                                        onremove: function (player, skill) {
                                            player.removeSkillBlocker(skill);
                                        },
                                        skillBlocker: function (skill, player) {
                                            var info = get.skillInfoTranslation(skill, player);
                                            var name = get.translation(skill)
                                            return !info.includes('冰') && !name.includes('冰') && skill != 'chegumrfz_ban' && skill != 'chegumrfz_ban2';
                                        },
                                        trigger: { player: 'phaseEnd' },
                                        content: () => {
                                            player.disabledSkills = {}
                                            player.removeSkill('chegumrfz_ban');
                                            player.unmarkSkill('chegumrfz_ban');
                                        },
                                        intro: {
                                            content: function (event, player) {
                                                var cards = player.getCards('e');
                                                var list = player.getSkills(null, false, false).filter(function (i) {
                                                    return lib.skill.chegumrfz_ban.skillBlocker(i, player);
                                                });
                                                var str = '彻骨极寒令你行动缓慢</br>';
                                                if (list.length) str = str + '失效的技能：' + get.translation(list) + '</br>';
                                                else str = str + '无失效的技能</br>';
                                                if (cards.length) str = str + '失效的装备:' + get.translation(cards);
                                                else str = str + '无失效的装备</br>';
                                                return str;
                                            },
                                        },
                                        group: 'chegumrfz_ban2',
                                        ai: {
                                            igequips: [1, 2, 3, 4, 5],
                                        },
                                    },
                                },
                            },
                            newchegumrfz: {
                                audio: 'chegumrfz',
                                trigger: { player: 'useCardToPlayered' },
                                filter: function (event, player) {
                                    if (!event.targets || !event.cards) return false;
                                    if (event.targets.length == 1 && event.targets[0] == player) return false;
                                    if (event.getParent().triggeredTargets3.length > 1) return false;
                                    var list = [];
                                    var listm = [];
                                    var listv = [];
                                    if (event.player.name1 != undefined) listm = lib.character[event.player.name1][3];
                                    else listm = lib.character[event.player.name][3];
                                    if (event.player.name2 != undefined) listv = lib.character[event.player.name2][3];
                                    listm = listm.concat(listv);
                                    var func = function (skill) {
                                        var info = get.info(skill);
                                        if (!info || info.charlotte) return false;
                                        return true;
                                    };
                                    for (var i = 0; i < listm.length; i++) {
                                        if (func(listm[i])) list.add(listm[i]);
                                    }
                                    return list.length > 0 && game.hasPlayer(function (current) {
                                        return current != player && !current.hasSkill('newchegumrfz_ban') && event.targets.contains(current);
                                    });
                                },
                                content: function () {
                                    'step 0'
                                    event.targets = trigger.targets.remove(player);
                                    if (event.targets.length > 1) {
                                        player.chooseTarget([1, Infinity], true, '【彻骨】：请选择任意名成为目标的其他角色', function (card, player, target) {
                                            return target != player && event.targets.contains(target) && !target.hasSkill('newchegumrfz_ban');
                                        }).ai = function (target) {
                                            return get.attitude(player, target) < 0;
                                        };
                                    }
                                    'step 1'
                                    var disabledCardSkill = function (target) {
                                        var card = target.getCards('e', function (card) {
                                            return get.subtype(card) != 'equip5';
                                        });
                                        if (!card) return;
                                        for (var i = 0; i < card.length; i++) {
                                            var info = get.info(card[i]);
                                            var skills = info.skills;
                                            if (!info.skills) return;
                                            for (var j = 0; j < skills.length; j++) {
                                                target.disableSkill('newchegumrfz_ban', skills[j]);
                                            }
                                        }
                                    };
                                    var func = function (skill, str) {
                                        var info = get.info(skill);
                                        var name = get.translation(skill);
                                        var intro = get.skillInfoTranslation(skill);
                                        if (name.includes(str) || intro.includes(str)) return false;
                                        if (!info || info.charlotte) return false;
                                        return true;
                                    };
                                    var func2 = function (player) {
                                        var list = [];
                                        var listm = [];
                                        var listv = [];
                                        if (player.name1 != undefined) listm = lib.character[player.name1][3];
                                        else listm = lib.character[player.name][3];
                                        if (player.name2 != undefined) listv = lib.character[player.name2][3];
                                        listm = listm.concat(listv);
                                        for (var i = 0; i < listm.length; i++) {
                                            if (func(listm[i], '冰')) list.add(listm[i]);
                                        }
                                        return list;
                                    };
                                    if (result.targets) {
                                        var targets = result.targets;
                                        for (i of targets) {
                                            var list = func2(i);
                                            for (j of list) {
                                                i.addTempSkill('newchegumrfz_ban', { player: 'phaseEnd' });
                                                i.disableSkill('newchegumrfz_ban', j);
                                            }
                                            player.line(i);
                                            disabledCardSkill(i);
                                        }
                                    }
                                    else {
                                        var list = func2(event.targets[0]);
                                        for (i of list) {
                                            event.targets[0].addTempSkill('newchegumrfz_ban', { player: 'phaseEnd' });
                                            event.targets[0].disableSkill('newchegumrfz_ban', i);
                                        }
                                        disabledCardSkill(event.targets[0]);
                                        player.line(event.targets[0]);
                                    }
                                },
                                subSkill: {
                                    ban: {
                                        ai: {
                                            igequips: [1, 2, 3, 4],
                                        },
                                        onremove: function (player, skill) {
                                            player.enableSkill(skill);
                                        },
                                        locked: true,
                                        mark: true,
                                        charlotte: true,
                                        intro: {
                                            content: function (storage, player, skill) {
                                                var list = [];
                                                var cards = player.getCards('e');
                                                for (var i in player.disabledSkills) {
                                                    if (player.disabledSkills[i].contains(skill)) list.push(i);
                                                };
                                                if (cards.length) {
                                                    var strC = '失效装备：';
                                                    for (var i = 0; i < cards.length; i++) {
                                                        strC += get.translation(cards[i]) + '、';
                                                    };
                                                    strC = strC.slice(0, strC.length - 1);
                                                }
                                                if (list.length) {
                                                    var strS = '失效技能：';
                                                    for (var i = 0; i < list.length; i++) {
                                                        if (lib.translate[list[i] + '_info']) strS += get.translation(list[i]) + '、';
                                                    };
                                                    strS = strS.slice(0, strS.length - 1);
                                                };
                                                if (strC === undefined) strC = '无失效装备';
                                                if (strS === undefined) strS = '无失效技能';
                                                var text = '<span style="font-family: yuanli"><font color=#8dc2f6>彻骨极寒令你行动缓慢</font></span></br>'
                                                return text + strC + '</br>' + strS;
                                            },
                                        },
                                    },
                                },
                            },
                            donghenmrfz: {
                                audio: 2,
                                skillAnimation: true,
                                animationColor: "blue",
                                derivation: ['ranmingmrfz'],
                                trigger: { player: 'dying' },
                                filter: function (event, player) {
                                    return player.hp <= 0;
                                },
                                check: function (event, player) {
                                    return player.hp + player.countCards('h', function (card) {
                                        return card.name == 'tao' || card.name == 'jiu';
                                    }) < 1;
                                },
                                content: function () {
                                    player.node.avatar.setBackgroundImage('extension/明日方舟/image/orther/donghenshuangxingmrfz.jpg');
                                    player.node.name.innerHTML = get.translation('donghenshuangxingmrfz');
                                    player.gainMaxHp();
                                    player.recoverTo(player.maxHp + 1);
                                    player.addSkill('ranmingmrfz');
                                    player.removeSkill('xuexingmrfz');
                                    player.removeSkill('donghenmrfz');
                                    player.addSkill('donghenmrfz_shacount');
                                },
                                subSkill: {
                                    shacount: {
                                        charlotte: true,
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num + 1;
                                            },
                                        },
                                    },
                                },
                            },
                            ranmingmrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { source: 'damageEnd' },
                                filter: function (event, player) {
                                    return event.source != undefined;
                                },
                                content: function () {
                                    player.loseHp();
                                },
                                group: ['ranmingmrfz_draw', 'ranmingmrfz_cancel', 'ranmingmrfz_sha'],
                                subSkill: {
                                    sha: {
                                        enable: ["chooseToRespond", "chooseToUse"],
                                        filterCard: true,
                                        position: "hes",
                                        viewAs: {
                                            name: "sha",
                                            nature: 'ice',
                                        },
                                        prompt: "将一张牌当冰【杀】使用或打出",
                                        check: function (card) {
                                            var val = get.value(card);
                                            if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                                            return 5 - val;
                                        },
                                        ai: {
                                            skillTagFilter: function (player) {
                                                if (get.zhu(player, 'shouyue')) {
                                                    if (!player.countCards('hes')) return false;
                                                }
                                                else {
                                                    if (!player.countCards('hes', { color: 'red' })) return false;
                                                }
                                            },
                                            respondSha: true,
                                            yingbian: function (card, player, targets, viewer) {
                                                if (get.attitude(viewer, player) <= 0) return 0;
                                                var base = 0, hit = false;
                                                if (get.cardtag(card, 'yingbian_hit')) {
                                                    hit = true;
                                                    if (targets.filter(function (target) {
                                                        return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                                    })) base += 5;
                                                }
                                                if (get.cardtag(card, 'yingbian_all')) {
                                                    if (game.hasPlayer(function (current) {
                                                        return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                                    })) base += 5;
                                                }
                                                if (get.cardtag(card, 'yingbian_damage')) {
                                                    if (targets.filter(function (target) {
                                                        return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                            target: target,
                                                            card: card,
                                                        }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                            player: player,
                                                            card: card,
                                                            jiu: true,
                                                        })
                                                    })) base += 5;
                                                }
                                                return base;
                                            },
                                            canLink: function (player, target, card) {
                                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) return false;
                                                if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                                return true;
                                            },
                                            basic: {
                                                useful: [5, 3, 1],
                                                value: [5, 3, 1],
                                            },
                                            order: function (item, player) {
                                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                                if (game.hasNature(item, 'linked')) {
                                                    if (game.hasPlayer(function (current) {
                                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                                    }) && game.countPlayer(function (current) {
                                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                                    }) > 1) return 3.1;
                                                    return 3;
                                                }
                                                return 3.05;
                                            },
                                            result: {
                                                target: function (player, target, card, isLink) {
                                                    var eff = function () {
                                                        if (!isLink && player.hasSkill('jiu')) {
                                                            if (!target.hasSkillTag('filterDamage', null, {
                                                                player: player,
                                                                card: card,
                                                                jiu: true,
                                                            })) {
                                                                if (get.attitude(player, target) > 0) {
                                                                    return -7;
                                                                }
                                                                else {
                                                                    return -4;
                                                                }
                                                            }
                                                            return -0.5;
                                                        }
                                                        return -1.5;
                                                    }();
                                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                        target: target,
                                                        card: card,
                                                    }, true)) return eff / 1.2;
                                                    return eff;
                                                },
                                            },
                                            tag: {
                                                respond: 1,
                                                respondShan: 1,
                                                damage: function (card) {
                                                    if (game.hasNature(card, 'poison')) return;
                                                    return 1;
                                                },
                                                natureDamage: function (card) {
                                                    if (game.hasNature(card)) return 1;
                                                },
                                                fireDamage: function (card, nature) {
                                                    if (game.hasNature(card, 'fire')) return 1;
                                                },
                                                thunderDamage: function (card, nature) {
                                                    if (game.hasNature(card, 'thunder')) return 1;
                                                },
                                                poisonDamage: function (card, nature) {
                                                    if (game.hasNature(card, 'poison')) return 1;
                                                },
                                            },
                                        },
                                    },
                                    cancel: {
                                        direct: true,
                                        trigger: { player: 'recoverBegin' },
                                        filter: function (event, player) {
                                            return event.getParent().name != 'donghenmrfz';
                                        },
                                        content: function () {
                                            trigger.cancel();
                                        },
                                    },
                                    draw: {
                                        direct: true,
                                        trigger: { player: 'loseEnd' },
                                        filter: function (event, player) {
                                            var evt = event.getl(player);
                                            for (var i of evt.hs) {
                                                if (get.position(i, true) == 'd') return true;
                                            }
                                            return false;
                                        },
                                        content: function () {
                                            player.draw();
                                        },
                                    },
                                },
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'recover')) return 'zerotarget';
                                        }
                                    }
                                }
                            },
                            //霜华 夹子妹
                            tadianmrfz: {
                                markimage: 'extension/明日方舟/image/orther/shuanghuajiazimrfz.png',
                                intro: {
                                    markcount: "expansion",
                                    mark: function (dialog, content, player) {
                                        var content = player.getExpansions('tadianmrfz');
                                        if (content && content.length) {
                                            if (player == game.me || player.isUnderControl()) {
                                                dialog.addAuto(content);
                                            }
                                            else {
                                                return '共有' + get.cnNumber(content.length) + '张踏垫';
                                            }
                                        }
                                    },
                                    content: function (content, player) {
                                        var content = player.getExpansions('tadianmrfz');
                                        if (content && content.length) {
                                            if (player == game.me || player.isUnderControl()) {
                                                return get.translation(content);
                                            }
                                            return '共有' + get.cnNumber(content.length) + '张踏垫';
                                        }
                                    },
                                },
                                onremove: function (player, skill) {
                                    var cards = player.getExpansions(skill);
                                    if (cards.length) player.loseToDiscardpile(cards);
                                },
                                audio: 2,
                                trigger: { global: 'roundStart' },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (player.getExpansions('tadianmrfz').length > 0) {
                                        player.gain(player.getExpansions('tadianmrfz'), 'gain2');
                                    }
                                    'step 1'
                                    player.draw(3);
                                    player.chooseCard(true, 3, '【踏垫】:请选择将三张手牌置于你武将牌上').set('ai', function (card) {
                                        return 8 - get.value(card);
                                    });
                                    'step 2'
                                    if (result.cards) {
                                        player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add('tadianmrfz');
                                    }
                                },
                                group: 'tadianmrfz_tri',
                                subSkill: {
                                    rec: {
                                        trigger: { player: 'dyingAfter' },
                                        silent: true,
                                        charlotte: true,
                                        content: function () {
                                            player.recover();
                                            player.removeSkill('tadianmrfz_rec');
                                        },
                                    },
                                    tri: {
                                        audio: 'tadianmrfz',
                                        trigger: {
                                            target: "useCardToTargeted",
                                        },
                                        filter: function (event, player) {
                                            if (!event.card || player.getExpansions('tadianmrfz').length < 1) return false;
                                            return player.getExpansions('tadianmrfz').filter(function (magic) {
                                                return magic.name == event.card.name;
                                            }).length;
                                        },
                                        check: function (event, player) {
                                            return get.attitude(player, event.player) < 0;
                                        },
                                        prompt: function (event, player) {
                                            return '【踏垫】:是否弃置一张‘踏垫’，令' + get.translation(event.player) + '流失所有体力？';
                                        },
                                        content: function () {
                                            'step 0'
                                            var cards = player.getExpansions('tadianmrfz').filter(function (magic) {
                                                return get.name(magic) == get.name(trigger.card);
                                            });
                                            if (cards.length) player.chooseButton(['你可以选择移去一张与其使用的牌的牌名相同的“踏垫”，令其流失所有体力', cards]);
                                            else event.finish();
                                            'step 1'
                                            if (result.bool) {
                                                player.loseToDiscardpile(result.links);
                                                player.draw(3);
                                                trigger.player.loseHp(trigger.player.hp);
                                                trigger.player.addSkill('tadianmrfz_rec');
                                            }
                                        },
                                    },
                                },
                            },
                            xinjimrfz: {
                                audio: 2,
                                trigger: {
                                    player: "phaseZhunbeiBegin",
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return player.getExpansions('tadianmrfz').length > 0 && player.countCards('h') > 0;
                                },
                                content: function () {
                                    "step 0"
                                    var cards = player.getExpansions('tadianmrfz');
                                    if (!cards.length || !player.countCards('h')) {
                                        event.finish();
                                        return;
                                    }
                                    var next = player.chooseToMove('【踏垫】：是否交换“踏垫”和手牌？');
                                    next.set('list', [
                                        [get.translation(player) + '（你）的‘踏垫’', cards],
                                        ['手牌区', player.getCards('h')],
                                    ]);
                                    next.set('filterMove', function (from, to) {
                                        return typeof to != 'number';
                                    });
                                    next.set('processAI', function (list) {
                                        var player = _status.event.player, cards = list[0][1].concat(list[1][1]).sort(function (a, b) {
                                            return get.value(a) - get.value(b);
                                        }), cards2 = cards.splice(0, player.getExpansions('tadianmrfz').length);
                                        return [cards2, cards];
                                    });
                                    "step 1"
                                    if (result.bool) {
                                        var pushs = result.moved[0], gains = result.moved[1];
                                        pushs.removeArray(player.getExpansions('tadianmrfz'));
                                        gains.removeArray(player.getCards('h'));
                                        if (!pushs.length || pushs.length != gains.length) return;
                                        player.logSkill('tadianmrfz');
                                        player.addToExpansion(pushs, player, 'giveAuto').gaintag.add('tadianmrfz');
                                        game.log(player, '交换了手牌区与‘踏垫’的牌');
                                        player.gain(gains, 'draw');
                                    }
                                },
                            },
                            //纯爱 纯烬艾雅法拉
                            lvmengmrfz: {
                                init: function (player) {
                                    player.storage.lvmengmrfz = {
                                        'beifeng': [],
                                        'zhongzi': [],
                                        'pimao': []
                                    };
                                },
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        var storage = player.storage.lvmengmrfz;
                                        var str = '北风：' + (storage['beifeng'].length > 0 ? get.translation(storage['beifeng']) : '无')
                                            + '</br>种子：' + (storage['zhongzi'].length > 0 ? get.translation(storage['zhongzi']) : '无')
                                            + '</br>皮毛：' + (storage['pimao'].length > 0 ? get.translation(storage['pimao']) : '无');
                                        return str;
                                    },
                                },
                                audio: 4,
                                forced: true,
                                trigger: { global: 'roundStart' },
                                content: function () {
                                    'step 0'
                                    if (!player.storage.lvmengmrfz) player.storage.lvmengmrfz = {
                                        'beifeng': [],
                                        'zhongzi': [],
                                        'pimao': []
                                    };
                                    var list = [
                                        ['未分配牌的类型（对话框较长，请下滑操作）', [['basic', 'trick', 'equip'], 'vcard']],
                                        ['北风（从牌堆中获得一张你手牌中没有的花色）', []],
                                        ['种子（此牌结算完毕后你可以将其交给一名其他角色）', []],
                                        ['皮毛（不可被其他角色响应）', []],
                                    ];
                                    var next = player.chooseToMove('【旅梦】：请分配牌的类型', true);
                                    next.set('list', list);
                                    next.set('filterMove', function (from, to, moved) {
                                        if (typeof to == 'number') {
                                            if (to == 0) return true;
                                        }
                                        return true;
                                    });
                                    next.set('processAI', function () {
                                        var player = _status.event.player;
                                        var moved = [[], [], [], []];
                                        var hasFriend = function (player) {
                                            return game.hasPlayer(current => {
                                                return get.attitude(player, current) > 2 && current != player;
                                            });
                                        };
                                        if (!hasFriend(player)) {
                                            moved[1].addArray(['equip']);
                                            if (Math.random() < 0.5) moved[1].addArray(['trick']);
                                            else moved[3].addArray(['trick']);
                                            moved[3].addArray(['basic']);
                                        }
                                        else {
                                            moved[1].addArray(['equip']);
                                            if (Math.random() < 0.5) {
                                                moved[2].addArray(['trick']);
                                                moved[3].addArray(['basic']);
                                            }
                                            else {
                                                moved[2].addArray(['trick', 'basic']);
                                            }
                                        }
                                        //console.log(moved);
                                        return moved;
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        game.broadcastAll(function (moved, player) {
                                            var transform = function (input) {
                                                return input.map(item => {
                                                    if (item.length === 0) {
                                                        return item;
                                                    } else if (typeof item[0] === 'string') {
                                                        return item;
                                                    } else {
                                                        return item.map(subItem => subItem[2]);
                                                    }
                                                });
                                            }
                                            var moved = moved.slice(1);
                                            moved = transform(moved);
                                            player.storage.lvmengmrfz = {
                                                'beifeng': [],
                                                'zhongzi': [],
                                                'pimao': []
                                            };
                                            //console.log(moved);
                                            var keys = Object.keys(player.storage.lvmengmrfz);
                                            for (var i = 0; i < moved.length; i++) {
                                                for (var j = 0; j < moved[i].length; j++) {
                                                    player.storage.lvmengmrfz[keys[i]].add(moved[i][j]);
                                                }
                                            }
                                        }, result.moved, player);
                                    }
                                },
                                group: ['lvmengmrfz_beifeng', 'lvmengmrfz_zhongzi', 'lvmengmrfz_pimao'],
                                subSkill: {
                                    //北风
                                    beifeng: {
                                        direct: true,
                                        usable: 4,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            var type = player.storage.lvmengmrfz['beifeng'], tmp_bool = false;
                                            if (!type || !event.card) return false;
                                            for (var i = 0; i < type.length; i++) {
                                                if (get.type(event.card, 'trick') == type[i]) {
                                                    tmp_bool = true;
                                                    break;
                                                }
                                            }
                                            var cards = player.getCards('h'), list = [];
                                            for (var i of cards) {
                                                list.add(get.suit(i, player));
                                            }
                                            return list.length < 4 && tmp_bool;
                                        },
                                        content: function () {
                                            var cards = player.getCards('h'), list = [];
                                            for (var i of cards) {
                                                list.add(get.suit(i, player));
                                            }
                                            var result = lib.suit.filter(item => !list.includes(item));
                                            var card = get.cardPile2(card => {
                                                for (var i = 0; i < result.length; i++) {
                                                    return get.suit(card) == result[i];
                                                }
                                            });
                                            if (card) player.gain(card, 'gain2');
                                            if (!trigger.audioed) {
                                                trigger.audioed = true;
                                                player.logSkill('lvmengmrfz');
                                            }
                                        },
                                    },
                                    //种子
                                    zhongzi: {
                                        direct: true,
                                        trigger: { player: 'useCardAfter' },
                                        filter: function (event, player) {
                                            var type = player.storage.lvmengmrfz['zhongzi'], tmp_bool = false;
                                            if (!type || !event.card) return false;
                                            for (var i = 0; i < type.length; i++) {
                                                if (get.type(event.card, 'trick') == type[i]) {
                                                    tmp_bool = true;
                                                    break;
                                                }
                                            }
                                            return event.cards.filterInD().length > 0 && tmp_bool;
                                        },
                                        content: function () {
                                            'step 0'
                                            player.chooseTarget('【旅梦】:将' + get.translation(trigger.cards) + '交给一名其他角色', function (card, player, target) {
                                                return target != player;
                                            }).set('ai', function (target) {
                                                if (target.hasJudge('lebu')) return 0;
                                                var att = get.attitude(_status.event.player, target);
                                                if (att < 3) return 0;
                                                if (target.hasSkillTag('nogain')) att /= 10;
                                                if (target.hasSha() && _status.event.sha) {
                                                    att /= 5;
                                                }
                                                if (event.wuxie && target.needsToDiscard(1)) {
                                                    att /= 5;
                                                }
                                                return att / (1 + get.distance(player, target, 'absolute'));
                                            }).set('sha', trigger.cards[0].name == 'sha').set('wuxie', trigger.cards[0].name == 'wuxie');
                                            'step 1'
                                            if (result.bool) {
                                                player.line(result.targets[0]);
                                                if (!trigger.audioed) {
                                                    trigger.audioed = true;
                                                    player.logSkill('lvmengmrfz');
                                                }
                                                result.targets[0].gain(trigger.cards.filterInD(), 'gain2');
                                            }
                                        },
                                    },
                                    //皮毛
                                    pimao: {
                                        direct: true,
                                        trigger: { player: 'useCard' },
                                        filter: function (event, player) {
                                            var type = player.storage.lvmengmrfz['pimao'], tmp_bool = false;
                                            if (!type || !event.card) return false;
                                            for (var i = 0; i < type.length; i++) {
                                                if (get.type(event.card, 'trick') == type[i]) {
                                                    tmp_bool = true;
                                                    break;
                                                }
                                            }
                                            return tmp_bool;
                                        },
                                        content: function () {
                                            if (!trigger.audioed) {
                                                trigger.audioed = true;
                                                player.logSkill('lvmengmrfz');
                                            }
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current != player;
                                            }));
                                        },
                                    },
                                },
                                ai: {
                                    threaten: 1.6,
                                },
                            },
                            rechenmrfz: {
                                mod: {
                                    aiOrder: function (player, card, num) {
                                        if (typeof card == 'object' && player.isPhaseUsing()) {
                                            var evt = player.getLastUsed();
                                            if (evt && evt.card && (get.suit(evt.card) && get.suit(evt.card) == get.suit(card))) {
                                                return num + 10;
                                            }
                                        }
                                    },
                                },
                                mark: true,
                                intro: {
                                    content: function (event, player) {
                                        if (!player.isPhaseUsing()) return '不是你的出牌阶段';
                                        if (!player.storage.rechenmrfz) return '本回合你未使用过牌';
                                        return '上一张你使用的牌的花色是：' + get.translation(player.storage.rechenmrfz);
                                    },
                                },
                                audio: 2,
                                trigger: { player: 'useCard' },
                                direct: true,
                                firstDo: true,
                                filter: function (event, player) {
                                    var evt = player.getLastUsed(1);
                                    if (!evt || !evt.card) return false;
                                    if (!player.isPhaseUsing()) return false;
                                    var evt2 = evt.getParent('phaseUse');
                                    if (!evt2 || evt2.name != 'phaseUse' || evt2.player != player) return false;
                                    return get.suit(evt.card) != 'none';
                                },
                                content: function () {
                                    var evt = player.getLastUsed(1);
                                    if (get.suit(evt.card) == get.suit(trigger.card)) player.logSkill('rechenmrfz');
                                    if (!player.storage.rechenmrfz) player.storage.rechenmrfz = [];
                                    player.storage.rechenmrfz = trigger.card.suit;
                                },
                                mod: {
                                    cardUsable: function (card, player) {
                                        var suit = get.suit(card) == player.storage.rechenmrfz;
                                        if (player.storage.rechenmrfz && suit) return Infinity;
                                    },
                                    targetInRange: function (card, player, target, now) {
                                        var suit = get.suit(card) == player.storage.rechenmrfz;
                                        if (player.storage.rechenmrfz && suit) return true;
                                    },
                                },
                                group: 'rechenmrfz_del',
                                subSkill: {
                                    del: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        content: function () {
                                            delete player.storage.rechenmrfz;
                                        },
                                    },
                                },
                            },
                            //塑心 阿尔图罗 2226
                            qinmingmrfz: {
                                audio: 2,
                                usable: 1,
                                enable: 'phaseUse',
                                filter: function (event, player) {
                                    return game.hasPlayer(current => {
                                        return current != player && current.countCards('h') > 0;
                                    });
                                },
                                filterTarget: function (card, player, target) {
                                    return target != player && target.countCards('h') > 0;
                                },
                                selectTarget: 1,
                                content: function () {
                                    'step 0'
                                    var tmp_cards = target.getCards('h');
                                    var cards = [];
                                    for (i of tmp_cards) {
                                        if (target.canRecast(i)) cards.push(i);
                                    }
                                    target.recast(cards);
                                    'step 1'
                                    var cards = target.getCards('h');
                                    event.cards = canCards;
                                    target.showCards(cards, '【琴鸣】:' + get.translation(target) + '的手牌');
                                    'step 2'
                                    var cards = target.getCards('h');
                                    var canCards = [];
                                    for (i of cards) {
                                        if (target.canUseToAnyone(i)) canCards.push(i);
                                    }
                                    event.cards = canCards;
                                    'step 3'
                                    if (event.cards.length > 0) {
                                        if (target.hasCard(event.cards[0].name, 'h')) target.chooseUseTarget(true, event.cards[0], false);
                                        event.goto(2);
                                    }
                                },
                                ai: {
                                    order: 8,
                                    expose: 0.1,
                                    result: {
                                        target: function (player, target) {
                                            var lowAtt = game.hasPlayer(current => {
                                                return current != player && current.inRange(target) && get.attitude(player, current) < 0;
                                            }) && get.attitude(player, target) < 0;
                                            var hightAtt = game.hasPlayer(current => {
                                                return current != player && current.inRange(target) && get.attitude(player, current) < 0;
                                            }) && get.attitude(player, target) > 0;
                                            if (lowAtt) return -1;
                                            if (hightAtt) return 1;
                                            return 0;
                                        },
                                    },
                                },
                            },
                            kongwomrfz: {
                                audio: 2,
                                forced: true,
                                trigger: { player: 'drawBegin' },
                                filter: function (event, player) {
                                    return event.num > 0;
                                },
                                content: function () {
                                    var num = trigger.num;
                                    trigger.cancel();
                                    var cards = [];
                                    while (cards.length < num) {
                                        var card = get.discardPile(card => { return !cards.contains(card); });
                                        if (card) cards.push(card);
                                        else break;
                                    }
                                    player.gain(cards, 'gain2');
                                },
                                group: ['kongwomrfz_get', 'kongwomrfz_clear'],
                                subSkill: {
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        direct: true,
                                        trigger: { player: 'phaseUseEnd' },
                                        content: function () {
                                            if (player.storage.kongwomrfz_get) delete player.storage.kongwomrfz_get;
                                        },
                                    },
                                    get: {
                                        audio: 'kongwomrfz',
                                        direct: true,
                                        trigger: { global: 'loseAfter' },
                                        filter: function (event, player) {
                                            if (event.player == player || !player.isPhaseUsing()) return false;
                                            if (event.getParent().name != 'useCard') return false;
                                            var cards = event.cards2.slice(0);
                                            for (var i = 0; i < cards.length; i++) {
                                                var type = get.type2(cards[i]);
                                                if (get.position(cards[i], true) == 'o' && type != 'equip') {
                                                    return true;
                                                }
                                            }
                                            return true;
                                        },
                                        content: function () {
                                            "step 0";
                                            if (trigger.delay == false) game.delay();
                                            if (!player.storage.kongwomrfz_get) player.storage.kongwomrfz_get = [];
                                            "step 1";
                                            var cards = [];
                                            for (var i = 0; i < trigger.cards2.length; i++) {
                                                var card = trigger.cards2[i];
                                                var type = get.type2(card);
                                                var name = player.storage.kongwomrfz_get, name2 = card.name;
                                                if (get.position(card, true) == 'o' && type != 'equip' && !name.contains(name2)) {
                                                    cards.push(card);
                                                }
                                            }
                                            if (cards.length) player.chooseButton(true, ['【空我】:请选择你要获得的牌', cards], [1, Infinity]).set('ai', button => {
                                                return cards;
                                            });
                                            else event.finish();
                                            'step 2'
                                            if (result.links) {
                                                var cards = result.links;
                                                for (i of cards) {
                                                    var name = get.name(i);
                                                    if (!player.storage.kongwomrfz_get.contains(name)) player.storage.kongwomrfz_get.add(name);
                                                }
                                                player.gain(cards, 'gain2');
                                                player.logSkill('kongwomrfz');
                                            }
                                        },
                                    },
                                },
                            },
                            //柏喙
                            yirenmrfz: {
                                audio: 4,
                                chargeGet: 1,
                                chargeSkill: true,
                                forced: true,
                                onremove: true,
                                trigger: {
                                    player: 'phaseJieshuBegin',
                                },
                                filter: function (event, player) {
                                    var num = 0;
                                    var history = player.getHistory('useCard');
                                    for (var i = 0; i < history.length; i++) {
                                        if (history[i].card.name == 'sha' && history[i].isPhaseUsing()) {
                                            num++;
                                        }
                                    }
                                    if (player.countMark('charge') + player.getCardUsable('sha') - num >= 15) return false;
                                    return player.getCardUsable('sha') - num > 0;
                                },
                                content: function () {
                                    var num = 0;
                                    var history = player.getHistory('useCard');
                                    for (var i = 0; i < history.length; i++) {
                                        if (history[i].card.name == 'sha' && history[i].isPhaseUsing()) {
                                            num++;
                                        }
                                    }
                                    num = player.getCardUsable('sha') - num;
                                    num = Math.min(num, (15 - player.countMark('charge')));
                                    player.addMark('charge', num);
                                },
                                group: 'yirenmrfz_use',
                                subSkill: {
                                    lim: {
                                        silent: true,
                                        charlotte: true,
                                        onremove: true,
                                        intro: {
                                            content: '下回合使用【杀】的次数-#',
                                        },
                                        mod: {
                                            cardUsable: function (card, player, num) {
                                                if (card.name == 'sha') return num - player.countMark('yirenmrfz_lim');
                                            },
                                        },
                                    },
                                    use: {
                                        init: (player, skill) => player.storage[skill] = 1,
                                        audio: 'yirenmrfz',
                                        enable: 'phaseUse',
                                        filter: function (event, player) {
                                            if (player.countMark('charge') < player.storage.yirenmrfz_use) return false;
                                            if (player.countCards('h') < 2) return false;
                                            return game.hasPlayer(function (current) {
                                                return current != player && player.canUse('sha', current);
                                            });
                                        },
                                        selectCard: 2,
                                        position: 'h',
                                        filterCard: true,
                                        selectTarget: [1, 2],
                                        filterTarget: function (card, player, target) {
                                            return player.canUse('sha', target) && target != player;
                                        },
                                        multitarget: true,
                                        multiline: true,
                                        check: function (card) {
                                            return 8 - get.value(card);
                                        },
                                        prompt: '【异刃】：请弃置两张手牌并选择至多两名角色',
                                        content: function () {
                                            for (i of targets) {
                                                if (player.canUse('sha', i)) player.useCard({ name: 'sha', isCard: true }, i, false);
                                                i.addTempSkill('yirenmrfz_lim', { player: "phaseEnd" });
                                                i.addMark('yirenmrfz_lim', false);
                                            }
                                            player.removeMark('charge', player.storage.yirenmrfz_use);
                                            player.storage.yirenmrfz_use++;
                                        },
                                        ai: {
                                            order: function (item, player) {
                                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                                if (game.hasNature(item, 'linked')) {
                                                    if (game.hasPlayer(function (current) {
                                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                                    }) && game.countPlayer(function (current) {
                                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                                    }) > 1) return 3.1;
                                                    return 3;
                                                }
                                                return 3.05;
                                            },
                                            result: {
                                                target: function (player, target) {
                                                    var enemyIR = game.filterPlayer(function (current) {
                                                        return current != player && get.attitude(player, current) < 0 && player.canUse('sha', current);
                                                    });
                                                    if (enemyIR.length < 1) return 0;
                                                    else if (enemyIR.length == 1) {
                                                        if (target.hp <= 2) return -4;
                                                    }
                                                    return -1;
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                            shehunmrfz: {
                                trigger: {
                                    source: 'damageEnd',
                                },
                                intro: {
                                    content: '使用【杀】的次数+#',
                                },
                                onremove: true,
                                forced: true,
                                popup: false,
                                filter: function (event, player) {
                                    return player.countMark('shehunmrfz') < 5;
                                },
                                content: function () {
                                    var mark = player.countMark('shehunmrfz');
                                    var num = trigger.num;
                                    if (mark + num > 5) var add = 5 - mark;
                                    else var add = num;
                                    player.addMark('shehunmrfz', add, false);
                                },
                                mod: {
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num + player.countMark('shehunmrfz');
                                    },
                                },
                            },
                            //白面鸮
                            jinaomrfz: {
                                audio: 2,
                                mark: true,
                                marktext: '机脑',
                                intro: {
                                    content: function (event, player) {
                                        var storage = player.storage.jinaomrfz;
                                        if (storage == true) return '递增';
                                        if (storage == false) return '递减';
                                        return '无限制';
                                    },
                                },
                                trigger: { player: 'useCardAfter' },
                                filter: function (event, player) {
                                    var history = player.getHistory('useCard');
                                    if (history.indexOf(event) != 1) return false;
                                    return history[0].card.number != undefined && history[1].card.number != undefined;
                                },
                                direct: true,
                                content: function () {
                                    var history = player.getHistory('useCard');
                                    if (history[0].card.number < history[1].card.number) {
                                        player.storage.jinaomrfz = true;
                                        player.marks.jinaomrfz.text.innerText = '递增';
                                    }
                                    else {
                                        player.storage.jinaomrfz = false;
                                        player.marks.jinaomrfz.text.innerText = '递减';
                                    }
                                    player.storage.jinaomrfz_lim = history[1].card.number;
                                    player.addTempSkill('jinaomrfz_lim', 'phaseEnd');
                                },
                                group: ['jinaomrfz_draw'],
                                subSkill: {
                                    handlit: {
                                        onremove: true,
                                        charlotte: true,
                                        intro: {
                                            content: '手牌上限+#',
                                        },
                                        mod: {
                                            maxHandcard: function (player, num) {
                                                return num + player.countMark('jinaomrfz_handlit');
                                            },
                                        },
                                    },
                                    draw: {
                                        trigger: { player: 'useCardAfter' },
                                        lastDo: true,
                                        forced: true,
                                        audio: 'jinaomrfz',
                                        filter: function (event, player) {
                                            var history = player.getHistory('useCard');
                                            if (history.length < 2) return false;
                                            if (!history[history.length - 2].card.color || get.color(event.card) == 'none') return false;
                                            //console.log(history[history.length-2].card.color);console.log(get.color(event.card));
                                            return history[history.length - 2].card.color == get.color(event.card);
                                        },
                                        content: function () {
                                            var color = get.color(trigger.card);
                                            if (color == 'red') player.draw(2);
                                            else {
                                                player.addTempSkill('jinaomrfz_handlit', 'phaseEnd');
                                                player.addMark('jinaomrfz_handlit', false);
                                            }
                                        },
                                    },
                                    lim: {
                                        onremove: function (player) {
                                            player.marks.jinaomrfz.text.innerText = '机脑';
                                            delete player.storage.jinaomrfz;
                                            delete player.storage.jinaomrfz_lim;
                                        },
                                        direct: true,
                                        charlotte: true,
                                        trigger: { player: 'useCardAfter' },
                                        firstDo: true,
                                        filter: function (event, player) {
                                            if (!event.card.number) return false;
                                            return true;
                                        },
                                        content: function () {
                                            player.storage.jinaomrfz_lim = trigger.card.number;
                                            var cards = player.getCards('h');
                                            var max, min;
                                            for (var i = 0; i < cards.length; i++) {
                                                var num = cards[i].number;
                                                if (i == 0) {
                                                    max = num;
                                                    min = num;
                                                    continue;
                                                }
                                                if (num > max) max = num;
                                                if (min > num) min = num;
                                            }
                                            if (trigger.card.number >= max) {
                                                player.storage.jinaomrfz = false;
                                                player.marks.jinaomrfz.text.innerText = '递减';
                                                player.draw();
                                                player.logSkill('jinaomrfz');
                                            }
                                            if (trigger.card.number <= min) {
                                                player.storage.jinaomrfz = true;
                                                player.marks.jinaomrfz.text.innerText = '递增';
                                                player.draw();
                                                player.logSkill('jinaomrfz');
                                            }
                                        },
                                        mod: {
                                            "cardEnabled2": function (card, player) {
                                                if (player.storage.jinaomrfz == true) {
                                                    if (card.number && card.number <= player.storage.jinaomrfz_lim) return false;
                                                }
                                                else {
                                                    if (card.number && card.number >= player.storage.jinaomrfz_lim) return false;
                                                }
                                            },
                                        },
                                    },
                                },
                            },
                            wutaimrfz: {
                                audio: 2,
                                trigger: { player: 'phaseEnd' },
                                direct: true,
                                filter: function (event, player) {
                                    var cards = player.getCards('h');
                                    if (cards.length < 2) return false;
                                    for (var i = 0; i < cards.length; i++) {
                                        if (i == 0) {
                                            var tmp_cards = cards[i];
                                            continue;
                                        }
                                        if (get.type2(tmp_cards) != get.type2(cards[i])) return true;
                                        if (get.color(tmp_cards) != get.color(cards[i])) return true;
                                        tmp_cards = cards[i];
                                    }
                                    return false;
                                },
                                content: function () {
                                    'step 0'
                                    player.chooseToDiscard(2, 'h', false, '【五肽】：你可以弃置两张类型或颜色不相同的手牌并选择一名角色，直到你的下个回合开始，其每回合第一次受到的伤害-1', function (card) {
                                        if (ui.selected.cards.length == 0) return true;
                                        if (ui.selected.cards.length) {
                                            return (get.type2(card, player) != get.type2(ui.selected.cards[0], player)) || (get.color(card, player) != get.color(ui.selected.cards[0], player));
                                        }
                                        return false;
                                    }).set('complexCard', true).set('ai', function (card) {
                                        return 10 - get.value(card);
                                    });
                                    'step 1'
                                    if (result.bool) {
                                        player.chooseTarget('【五肽】：请选择一名角色', true, function (card, player, target) {
                                            return !target.hasSkill('wutaimrfz_eff');
                                        }).ai = function (target) {
                                            var att = get.attitude(player, target);
                                            if (target.hp < 3) att /= 1.5;
                                            return att;
                                        };
                                    }
                                    else event.finish();
                                    'step 2'
                                    if (result.targets) {
                                        player.logSkill('wutaimrfz_eff', result.targets[0]);
                                        player.addTempSkill('wutaimrfz_eff', { player: 'phaseBegin' });
                                        player.storage.wutaimrfz_eff = result.targets[0];
                                    }
                                },
                                subSkill: {
                                    mark: {
                                        charlotte: true,
                                    },
                                    eff: {
                                        onremove: true,
                                        audio: "wutaimrfz",
                                        mark: true,
                                        intro: {
                                            content: function (event, player) {
                                                var char = get.translation(player.storage.wutaimrfz_eff);
                                                if (player.hasSkill('wutaimrfz_mark')) return '本回合' + char + '已触发过此效果';
                                                return char + '受到的伤害-1';
                                            },
                                        },
                                        trigger: {
                                            global: "damageBegin",
                                        },
                                        forced: true,
                                        charlotte: true,
                                        logTarget: "player",
                                        filter: function (event, player) {
                                            if (player.hasSkill('wutaimrfz_mark')) return false;
                                            return event.player == player.storage.wutaimrfz_eff;
                                        },
                                        content: function () {
                                            player.addTempSkill('wutaimrfz_mark', 'phaseEnd');
                                            trigger.num--;
                                        },
                                    },
                                },
                            },
                            //赫德雷
                            zhengrongmrfz: {
                                init: function (player) {
                                    player.storage.zhengrongmrfz = {
                                        'discard': false,
                                        'losedraw': false,
                                        'maxhp': false,
                                    };
                                },
                                audio: 2,
                                trigger: {
                                    global: 'damageEnd',
                                },
                                filter: function (event, player) {
                                    var list = [], storage = player.storage.zhengrongmrfz;
                                    if (player.countCards('h') > 0 && storage['discard'] == false) list.push('弃牌');
                                    if (storage['losedraw'] == false) list.push('摸牌阶段摸牌数-1');
                                    if (storage['maxhp'] == false) list.push('失去体力上限');
                                    if (list.length == 0) return false;
                                    if (event.player === undefined) return false;
                                    if (!event.player.isAlive()) return false;
                                    return event.player == player || (get.distance(player, event.player) <= 1);
                                },
                                prompt: function (event, player) {
                                    if (event.player == player) return '【征戎】：是否选择一项并回复一点体力？';
                                    return '【征戎】:是否选择一项并令' + get.translation(event.player) + '回复一点体力？';
                                },
                                check: function (event, player) {
                                    if (get.attitude(event.player, player) < 0) return false;
                                    return true;
                                },
                                content: function () {
                                    'step 0'
                                    var list = [], storage = player.storage.zhengrongmrfz;
                                    if (player.countCards('h') > 0 && storage['discard'] == false) list.push('弃牌');
                                    if (storage['losedraw'] == false) list.push('摸牌阶段摸牌数-1');
                                    if (storage['maxhp'] == false) list.push('失去体力上限');
                                    player.chooseControl(list)
                                        .set('ai', function () {
                                            return 0;
                                        })
                                        .set('prompt', '【征戎】:请选择一项');
                                    'step 1'
                                    if (result.control) {
                                        var control = result.control;
                                        game.log(control);
                                        if (control == '弃牌') {
                                            player.chooseToDiscard('he', true, '【征戎】:请弃置一张牌');
                                            player.storage.zhengrongmrfz['discard'] = true;
                                        }
                                        if (control == '摸牌阶段摸牌数-1') {
                                            player.addMark('zhengrongmrfz_losedraw', false);
                                            player.addTempSkill('zhengrongmrfz_losedraw', { player: 'phaseDrawAfter' });
                                            player.storage.zhengrongmrfz['losedraw'] = true;
                                        }
                                        if (control == '失去体力上限') {
                                            player.loseMaxHp();
                                            player.storage.zhengrongmrfz['maxhp'] = true;
                                        }
                                        trigger.player.recover();
                                    }
                                },
                                group: ['zhengrongmrfz_rec', 'zhengrongmrfz_draw'],
                                subSkill: {
                                    draw: {
                                        audio: 2,
                                        firstDo: true,
                                        trigger: { player: 'phaseBegin' },
                                        filter: function (event, player) {
                                            var allGone = Object.values(player.storage.zhengrongmrfz).every(function (value) {
                                                return value === true;
                                            });
                                            if (player.storage.zhengrongmrfz === undefined) return false;
                                            return allGone;
                                        },
                                        content: function () {
                                            player.drawTo(player.maxHp);
                                        },
                                    },
                                    rec: {
                                        silent: true,
                                        charlotte: true,
                                        lastDo: true,
                                        trigger: { player: 'phaseBegin' },
                                        content: function () {
                                            player.storage.zhengrongmrfz = {
                                                'discard': false,
                                                'losedraw': false,
                                                'maxhp': false,
                                            };
                                        },
                                    },
                                    losedraw: {
                                        silent: true,
                                        charlotte: true,
                                        lastDo: true,
                                        intro: {
                                            content: '下个摸牌阶段摸牌数-#',
                                        },
                                        onremove: true,
                                        trigger: { player: 'phaseDrawBegin2' },
                                        filter: function (event, player) {
                                            return event.num > 0;
                                        },
                                        content: function () {
                                            trigger.num -= player.countMark('zhengrongmrfz_losedraw');
                                        },
                                    },
                                },
                                ai: {
                                    expose: 0.1,
                                    threaten: 0.8,
                                },
                            },
                            siyanmrfz: {
                                audio: 2,
                                trigger: { player: 'useCard2' },
                                filter: function (event, player) {
                                    if (event.targets.length > 1) return false;
                                    if (event.targets[0] == player) return false;
                                    if (!event.card || event.card.name != 'sha') return false;
                                    var history = event.targets[0].getHistory('damage');
                                    for (var i = 0; i < history.length; i++) {
                                        if (!history[i].source) continue;
                                        if (history[i].source == player) return true;
                                    }
                                    var seatNum = event.targets[0].getSeatNum();
                                    console.log(seatNum in player.storage.siyanmrfz_tol);
                                    if (seatNum in player.storage.siyanmrfz_tol
                                        && player.storage.siyanmrfz_tol[seatNum] === true) return true;
                                },
                                check: function (event, player) {
                                    if (get.attitude(event.targets[0], player) > 0) return false;
                                    return player.hp > 1;
                                },
                                prompt: function (event, player) {
                                    return '【死烟】:是否失去一点体力并令' + get.translation(event.targets[0]) + '选择一项？';
                                },
                                content: function () {
                                    'step 0'
                                    player.addTempSkill('siyanmrfz_rec', { player: 'damageAfter' });
                                    player.storage.siyanmrfz_rec = {
                                        card: trigger.card,
                                    }
                                    var target = trigger.targets[0], list = ['无法响应' + get.translation(player) + '使用的【杀】'];
                                    if (target.countCards('h') > 1) list.push('弃置两张手牌');
                                    target.loseHp();
                                    player.loseHp();
                                    if (list.length < 2 && target.isAlive()) {
                                        trigger.directHit.addArray(game.filterPlayer(function (current) {
                                            return current == target;
                                        }));
                                        game.log(target, '选择了无法响应', player, '使用的【杀】');
                                        event.finish();
                                    }
                                    else if (target.isAlive()) {
                                        target.chooseControl()
                                            .set('choiceList', list)
                                            .set('prompt', '【死烟】:请选择一项')
                                            .set('ai', function () {
                                                var player = _status.event.player;
                                                if (player.countCards('h') < 3) return 0;
                                                if (!player.hasShan()) return 0;
                                                if (player.hp == 1 && player.countCards('h', card => { return get.name(card) == 'tao' || get.name(card) == 'jiu' }) > 0 && player.countCards('h') < 3) return 0;
                                                return 1;
                                            });
                                    }
                                    else event.finish();
                                    'step 1'
                                    if (result.control) {
                                        var target = trigger.targets[0];
                                        if (result.index == 1) {
                                            game.log(get.translation(target), '选择了弃置两张手牌');
                                            target.chooseToDiscard('h', true, 2);
                                        }
                                        else {
                                            trigger.directHit.addArray(game.filterPlayer(function (current) {
                                                return current == target;
                                            }));
                                            game.log(target, '选择了无法响应', player, '使用的【杀】');
                                        }
                                    }
                                },
                                group: ['siyanmrfz_tol', 'siyanmrfz_clear'],
                                subSkill: {
                                    rec: {
                                        onremove: function (player) {
                                            delete player.storage.siyanmrfz_rec;
                                        },
                                        trigger: {
                                            source: "damageEnd",
                                        },
                                        filter: function (event, player) {
                                            var info = player.storage.siyanmrfz_rec;
                                            return event.card && event.card == info.card;
                                        },
                                        silent: true,
                                        popup: false,
                                        forced: true,
                                        charlotte: true,
                                        firstDo: true,
                                        content: function () {
                                            if (get.suit(trigger.card) == 'diamond') player.recover();
                                        },
                                    },
                                    clear: {
                                        silent: true,
                                        charlotte: true,
                                        firstDo: true,
                                        trigger: { global: 'phaseBegin' },
                                        filter: function (event, player) {
                                            return event.player != player;
                                        },
                                        content: function () {
                                            var seatNum = trigger.player.getSeatNum();
                                            player.storage.siyanmrfz_tol[seatNum] = false;
                                        },
                                    },
                                    tol: {
                                        init: function (player) {
                                            player.storage.siyanmrfz_tol = {};
                                            for (var i = 0; i < game.players.length; i++) {
                                                if (game.players[i] == player) continue;
                                                player.storage.siyanmrfz_tol[i + 1] = false;
                                            }
                                        },
                                        silent: true,
                                        charlotte: true,
                                        lastDo: true,
                                        trigger: { player: 'damageEnd' },
                                        filter: function (event, player) {
                                            return event.source != undefined && player.isAlive();
                                        },
                                        content: function () {
                                            var seatNum = trigger.source.getSeatNum();
                                            if (seatNum in player.storage.siyanmrfz_tol && player.storage.siyanmrfz_tol[seatNum] === false) {
                                                player.storage.siyanmrfz_tol[seatNum] = true;
                                            }
                                        },
                                    },
                                },
                                ai: {
                                    "directHit_ai": true,
                                    skillTagFilter: function (player, tag, arg) {
                                        var seatNum = arg.target.getSeatNum(arg.target);
                                        if (!seatNum in player.storage.siyanmrfz_tol
                                            || player.storage.siyanmrfz_tol[seatNum] === false) return false;
                                        if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1) return false;
                                    },
                                },
                            },
                            //止颂
                            kuxiumrfz: {
                                mod: {
                                    //maxHandcard:function(player,num){
                                    //    return num+=player.getCards('j').length;
                                    //},
                                    cardUsable: function (card, player, num) {
                                        if (card.name == 'sha') return num += player.getCards('j').length;
                                    },
                                },
                                audio: 2,
                                enable: 'phaseUse',
                                check: function (card) {
                                    return 8 - get.value(card);
                                },
                                filter: function (event, player) {
                                    var cards = [];
                                    for (var i of lib.inpile) {
                                        if (get.type(i) == 'delay') cards.push(i);
                                    }
                                    for (var name of cards) {
                                        if (player.canAddJudge({ name: name })) return true;
                                    }
                                    if (player.countCards('he') < 1) return false;
                                    return false;
                                },
                                chooseButton: {
                                    dialog: function (event, player) {
                                        var cards = [];
                                        for (var i of lib.inpile) {
                                            if (get.type(i) == 'delay') cards.push(i);
                                        }
                                        var vcards = [];
                                        for (var name of cards) {
                                            var card = { name: name };
                                            if (player.canAddJudge({ name: name })) vcards.push(['延时锦囊', '', name]);
                                        }
                                        var dialog = ui.create.dialog('苦修', [vcards, 'vcard'], 'hidden');
                                        dialog.direct = true;
                                        return dialog;
                                    },
                                    backup: function (links, player) {
                                        return {
                                            filterCard: function (card, player, event) {
                                                return player.canAddJudge({ name: links[0][2], cards: [card] });
                                            },
                                            selectCard: 1,
                                            selectTarget: -1,
                                            filterTarget: function (card, player, target) {
                                                return player == target;
                                            },
                                            viewAs: {
                                                name: links[0][2],
                                            },
                                            popname: true,
                                            precontent: function () {
                                                var num = player.getCards('j').length;
                                                player.logSkill('kuxiumrfz');
                                                player.draw(num + 1);
                                            },
                                        }
                                    },
                                    prompt: function (links, player) {
                                        return '【苦修】：请选择一张牌将其当做一张【' + get.translation(links[0][2]) + '】对自己使用';
                                    },
                                },
                                ai:{
                                    order:13,
                                    result:{
                                        player:1,
                                    },
                                },
                            },
                            lirenmrfz: {
                                audio: 2,
                                trigger: { player: 'phaseZhunbeiBegin' },
                                filter: function (event, player) {
                                    return player.countCards('j') > 0;
                                },
                                check: function (event, player) {
                                    var cards = player.getCards('j');
                                    if (cards.length == 1 && cards[0] == 'shandian') return false;
                                    return player.hp > 1;
                                },
                                content: function () {
                                    var num = player.getCards('j').length;
                                    player.discardPlayerCard(player, num, 'j', true);
                                    player.loseHp();
                                },
                            },
                            //刺玫
                            huabumrfz:{
                                audio:2,
                                global:'huabumrfz_eff',
                                subSkill:{
                                    eff:{
                                        enable:'phaseUse',
                                        usable:1,
                                        filter:function(event,player){
                                            return !player.hasSkill('huabumrfz')&&game.hasPlayer(current=>{
                                                return current.hasSkill('huabumrfz');
                                            });
                                        },
                                        //prompt:function(event,player){
                                        //    var targets=game.filterPlayer(current=>{
                                        //        return current.hasSkill('huabumrfz');
                                        //    });
                                        //    var str,name=get.translation(targets);
                                        //    if(targets.length==1) str='令'+name+'摸一张牌，然后其猜测你手牌中是否有与此牌类型相同的牌';
                                        //    else str='令'+name+'其中一名角色摸一张牌，然后其猜测你手牌中是否有与此牌类型相同的牌';
                                        //    return str;
                                        //},
                                        content:function(){
                                            'step 0'
                                            var targets=game.filterPlayer(current=>{
                                                return current.hasSkill('huabumrfz');
                                            });
                                            if(targets.length==1){
                                                player.logSkill('huabumrfz',event.targets);
                                                event.targets=targets[0];
                                                event.goto(2);
                                            }
                                            else if(targets.length>1){
                                                player.chooseTarget(true,'选择【花卜】的目标',function(card,player,target){
                                                    return _status.event.list.contains(target);
                                                }).set('list',targets).set('ai',function(target){
                                                    var player=_status.event.player;
                                                    return get.attitude(player,target);
                                                });
                                            }
                                            else event.finish();
                                            'step 1'
                                            if(result.targets){
                                                player.logSkill('huabumrfz',event.targets);
                                                event.targets=result.targets[0];
                                            }
                                            else event.finish();
                                            'step 2'
                                            if(event.targets){
                                                event.targets.draw();
                                            }
                                            else event.finish();
                                            'step 3'
                                            if(result){
                                                var card=result[0];
                                                var cards=player.getCards('h');
                                                var bool=false;
                                                for( i of cards ){
                                                    //console.log(get.type2(i));
                                                    //console.log(get.type2(card));
                                                    if(get.type2(i)==get.type2(card)){ 
                                                        bool=true;
                                                        break;
                                                    }
                                                }
                                                event.is=bool;
                                                event.targets.chooseControl('有','没有')
                                                .set('prompt','【花卜】:'+get.translation(player)+'手牌中是否有与'+get.translation(card)+'('+get.translation(get.type2(card))+')'+'类型相同的牌？')
                                                .set('ai',function(){
                                                    var player=_status.event.player;
                                                    if(get.attitude(player,event.targets)>0&&event.targets.hasSkill('shixinmrfz')) return event.is;
                                                    else if(event.targets.hasSkill('shixinmrfz')) return !event.is;
                                                    return [0,1].randomGet();
                                                });
                                            }
                                            else event.finish();
                                            'step 4'
                                            if(result.control){
                                                var bool=(result.control=='有'?true:false);
                                                //console.log(event.is);console.log(bool);
                                                if(event.is==bool){
                                                    player.draw();
                                                    event.targets.draw();
                                                }
                                                else{
                                                    event.targets.chooseToDiscard(true,'【花卜】:请选择弃置一张牌');
                                                }
                                            }
                                        },
                                        ai:{
                                            order:13,
                                            threaten:1.5,
                                            result:{
                                                player:function(player,target){
                                                    var target=game.findPlayer(function(current){
                                                        return current.hasSkill('huabumrfz');
                                                    });
                                                    if(target){
                                                        return get.attitude(player,target);
                                                    }
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                            shixinmrfz:{
                                audio:2,
                                trigger:{player:'gainAfter'},
                                filter:function(event,player){
                                    if(player.hasSkill('shixinmrfz_ban')) return false;
                                    if(_status.currentPhase.countCards('h')==0) return false;
                                    return _status.currentPhase!=player;
                                },
                                prompt:'【识心】:是否观看当前回合角色的手牌？',
                                content:function(){
                                    player.viewHandcards(_status.currentPhase);
                                    player.addTempSkill('shixinmrfz_ban','phaseEnd');
                                },
                                subSkill:{
                                    ban:{
                                        charlotte:true,
                                    },
                                },
                            },
                            //红
                            qunlangmrfz:{
                                audio:2,
                                trigger:{
                                    player:"showCharacterAfter",
                                },
                                hiddenSkill:true,
                                filter:function(event,player){
                                    if(!event.toShow||!event.toShow.contains('hongmrfz')) return false;
                                    return game.hasPlayer(current=>{
                                        return current!=player&&player.inRangeOf(current);
                                    });
                                },
                                check:function(event,player){
                                    return game.hasPlayer(current=>{
                                        return current!=player&&player.inRangeOf(current)&&get.attitude(current,player)<0;
                                    });
                                },
                                prompt:'【群狼】:你可以对你攻击范围内的一名其他角色造成一点伤害',
                                content:function(){
                                    'step 0'
                                    player.chooseTarget(true,'【群狼】:请选择一名其他角色并对其造成一点伤害',function(card,player,target){
                                        return target!=player&&player.inRangeOf(target);
                                    })
                                    .set('ai',function(target){
                                        var player=_status.event.player;
                                        return get.damageEffect(target,player,player)<0;
                                    });
                                    'step 1'
                                    if(result.bool){
                                        var target=result.targets[0];
                                        target.damage('player');
                                    }
                                },
                            },
                            cigumrfz:{
                                mod:{
                                    cardnature: function (card, player) {
                                        if (!card.nature && card.name == 'sha') return 'stab';
                                    },
                                },
                                audio:2,
                                trigger:{
                                    global:["respond","useCard"],
                                },
                                frequent:true,
                                filter:function(event,player){
                                    if(!event.respondTo) return false;
                                    if(event.player==player) return false;
                                    if(player!=event.respondTo[0]) return false;
                                    else return event.cards.filterInD('od').length>0;
                                },
                                prompt:function(event,player){
                                    var cards=event.cards.filterInD('od');
                                    return '【刺骨】:是否获得'+ get.translation(cards) +'?';
                                },
                                content:function(){
                                    var cards=trigger.cards.filterInD('od');
                                    player.gain(cards,'log','gain2');
                                },
                            },
                            qingchumrfz:{
                                group:['qingchumrfz_sha','qingchumrfz_shan'],
                                audio:2,
                                trigger:{player:['useCard','respond']},
                                filter:function(event,player){
                                    var target=_status.currentPhase;
                                    if(!target||target.countCards('he')==0) return false;
                                    return event.card&&event.card.name=='sha'&&target!=player;
                                },
                                check:function(event,player){
                                    var target=_status.currentPhase;
                                    return get.attitude(target,player)<0;
                                },
                                prompt:function(event,player){
                                    var target=_status.currentPhase;
                                    return '【清处】:是否弃置当前回合角色（'+ get.translation(target) +'）一张牌？';
                                },
                                content:function(){
                                    'step 0'
                                    var target=_status.currentPhase;
                                    player.discardPlayerCard(target,'he',true);
                                    'step 1'
                                    if(result.cards){
                                        if(get.suit(result.cards[0])==get.suit(trigger.card)){
                                            event.goto(0);
                                        }
                                    }
                                },
                                subSkill:{
                                    shan:{
                                        audio:"qingchumrfz",
                                        enable:["chooseToRespond","chooseToUse"],
                                        filter:function(event,player){
                                            return _status.currentPhase!=player;
                                        },
                                        filterCard:{
                                            name:"sha",
                                        },
                                        viewAs:{
                                            name:"shan",
                                        },
                                        prompt:"将一张杀当闪使用或打出",
                                        check:function(){return 1},
                                        position:"hs",
                                        viewAsFilter:function(player){
                                            if(!player.countCards('hs','sha')) return false;
                                        },
                                        ai:{
                                            respondShan:true,
                                            skillTagFilter:function(player){
                                                if(!player.countCards('hs','sha')||_status.currentPhase!=player) return false;
                                            },
                                            effect:{
                                                target:function(card,player,target,current){
                                                    if(get.tag(card,'respondShan')&&current<0) return 0.6
                                                },
                                            },
                                            order:4,
                                            useful:-1,
                                            value:-1,
                                            basic:{
                                                useful:[7,5.1,2],
                                                value:[7,5.1,2],
                                            },
                                            result:{
                                                player:1,
                                            },
                                        },
                                    },
                                    sha:{
                                        audio:'qingchumrfz',
                                        enable:["chooseToUse","chooseToRespond"],
                                        filter:function(event,player){
                                            return _status.currentPhase!=player;
                                        },
                                        filterCard:{
                                            name:"shan",
                                        },
                                        viewAs:{
                                            name:"sha",
                                        },
                                        viewAsFilter:function(player){
                                            if(!player.countCards('hs','shan')) return false;
                                        },
                                        position:"hs",
                                        prompt:"将一张闪当杀使用或打出",
                                        check:function(){return 1},
                                        ai:{
                                            effect:{
                                                target:function(card,player,target,current){
                                                    if(get.tag(card,'respondSha')&&current<0) return 0.6
                                                },
                                            },
                                            respondSha:true,
                                            skillTagFilter:function(player){
                                                if(!player.countCards('hs','shan')||_status.currentPhase!=player) return false;
                                            },
                                            order:function(){
                                                return get.order({name:'sha'})+0.1;
                                            },
                                            useful:-1,
                                            value:-1,
                                            yingbian:function(card,player,targets,viewer){
                                                if(get.attitude(viewer,player)<=0) return 0;
                                                var base=0,hit=false;
                                                if(get.cardtag(card,'yingbian_hit')){
                                                    hit=true;
                                                    if(targets.filter(function(target){
                                                        return target.hasShan()&&get.attitude(viewer,target)<0&&get.damageEffect(target,player,viewer,get.nature(card))>0;
                                                    })) base+=5;
                                                }
                                                if(get.cardtag(card,'yingbian_all')){
                                                    if(game.hasPlayer(function(current){
                                                        return !targets.contains(current)&&lib.filter.targetEnabled2(card,player,current)&&get.effect(current,card,player,player)>0;
                                                    })) base+=5;
                                                }
                                                if(get.cardtag(card,'yingbian_damage')){
                                                    if(targets.filter(function(target){
                                                        return get.attitude(player,target)<0&&(hit||!target.mayHaveShan()||player.hasSkillTag('directHit_ai',true,{
                                                        target:target,
                                                        card:card,
                                                        },true))&&!target.hasSkillTag('filterDamage',null,{
                                                            player:player,
                                                            card:card,
                                                            jiu:true,
                                                        })
                                                    })) base+=5;
                                                }
                                                return base;
                                            },
                                            canLink:function(player,target,card){
                                                if(!target.isLinked()&&!player.hasSkill('wutiesuolian_skill')) return false;
                                                if(target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                                    target:target,
                                                    card:card,
                                                },true)) return false;
                                                if(player.hasSkill('jueqing')||player.hasSkill('gangzhi')||target.hasSkill('gangzhi')) return false;
                                                return true;
                                            },
                                            basic:{
                                                useful:[5,3,1],
                                                value:[5,3,1],
                                            },
                                            result:{
                                                target:function(player,target,card,isLink){
                                                    var eff=function(){
                                                        if(!isLink&&player.hasSkill('jiu')){
                                                            if(!target.hasSkillTag('filterDamage',null,{
                                                                player:player,
                                                                card:card,
                                                                jiu:true,
                                                            })){
                                                                if(get.attitude(player,target)>0){
                                                                    return -7;
                                                                }
                                                                else{
                                                                    return -4;
                                                                }
                                                            }
                                                            return -0.5;
                                                        }
                                                        return -1.5;
                                                    }();
                                                    if(!isLink&&target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                                        target:target,
                                                        card:card,
                                                    },true)) return eff/1.2;
                                                    return eff;
                                                },
                                            },
                                            tag:{
                                                respond:1,
                                                respondShan:1,
                                                damage:function(card){
                                                    if(game.hasNature(card,'poison')) return;
                                                    return 1;
                                                },
                                                natureDamage:function(card){
                                                    if(game.hasNature(card)) return 1;
                                                },
                                                fireDamage:function(card,nature){
                                                    if(game.hasNature(card,'fire')) return 1;
                                                },
                                                thunderDamage:function(card,nature){
                                                    if(game.hasNature(card,'thunder')) return 1;
                                                },
                                                poisonDamage:function(card,nature){
                                                    if(game.hasNature(card,'poison')) return 1;
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        translate: {
                            //————武将分组————//
                            mrfzgroup: '泰拉',
                            yibiliyamrfz: '伊比利亚',
                            luodedaomrfz: '罗德岛',
                            luodedaojymrfz: '罗德岛精英干员',
                            laitaniyamrfz: '莱塔尼亚',
                            xielagemrfz: '谢拉格',
                            xulagumrfz: '叙拉古',
                            babietamrfz: '巴别塔',
                            haisimrfz: '海嗣',
                            shenhailierenmrfz: '深海猎人',
                            qiewuliumrfz: '企鹅物流',
                            kaximiermrfz: '卡西米尔',
                            gelunbiyamrfz: '哥伦比亚',
                            heigangguojimrfz: '哥伦比亚-黑钢国际',
                            longmenmrfz: '龙门警卫司',
                            weiduoliyamrfz: '维多利亚',
                            latelanmrfz: '拉特兰',
                            shitumrfz: '使徒', //摩托车三人组
                            wusasimrfz: '乌萨斯',
                            saergongmrfz: '萨尔贡',
                            liandongmrfz: '联动干员',
                            yansuimrfz: '炎-岁兽',
                            lishimrfz: '鲤氏侦探事务所',
                            xisitamrfz: '汐斯塔',
                            hongsongqstmrfz: '红松骑士团',
                            dongguomrfz: '东',
                            yanguomrfz: '炎',
                            laiyinmrfz: '莱茵生命',
                            shenchimrfz: '深池',
                            qianwenmingmrfz: '前文明',
                            minuosimrfz: '米诺斯',
                            samigroupmrfz: '萨米',
                            SWEEPmrfz:'S.W.E.E.P',

                            //————干员翻译————//
                            ailinimrfz: '艾丽妮',
                            hongxuemrfz: '鸿雪',
                            xiaoyangmrfz: "艾雅法拉",
                            yinhuimrfz: "银灰",
                            lingzhimrfz: "灵知",
                            liumingmrfz: "流明",
                            chizuimrfz: "斥罪",
                            amiyamrfz: "阿米娅",
                            niyanmrfz: "泥岩",
                            chengshanmrfz: "澄闪",
                            wmrfz: "W",
                            spsikadimrfz: "浊心斯卡蒂",
                            spsikadimrfz_prefix: '浊心',
                            sikadimrfz: "斯卡蒂",
                            spdegoumrfz: "缄默德克萨斯",
                            spdegoumrfz_prefix: '缄默',
                            maennamrfz: "玛恩纳",
                            splinguangmrfz: '耀骑士临光',
                            splinguangmrfz_prefix: '耀骑士',
                            kaierximrfz: "凯尔希",
                            shanmrfz: "山",
                            geleidiyamrfz: "歌蕾蒂娅",
                            chenmrfz: "陈",
                            xingxiongmrfz: "星熊",
                            kanielianmrfz: "卡涅利安",
                            kuiyingmrfz: "傀影",
                            mositimamrfz: "莫斯提马",
                            keebomrfz: "刻俄柏",
                            feiyameitamrfz: "菲亚梅塔",
                            jicimrfz: "棘刺",
                            yeyingmrfz: "夜莺",
                            helagemrfz: "赫拉格",
                            wendimrfz: "温蒂",
                            senranmrfz: '森蚺',
                            senrantieyumrfz: '<font color=' + mrfzfuc.getRandomColor() + '>' + ['浪人', '帝王', '强力', '离子', '军团', '烈焰', '先锋'].randomGet() + '</font>森蚺',
                            ashmrfz: 'ASH',
                            kamimrfz: '异客',
                            nianmrfz: '年',
                            lingmrfz: "令",
                            fengdimrfz: "风笛",
                            qinliumrfz: "琴柳",
                            laolimrfz: '老鲤',
                            amrfz: '阿',
                            heimrfz: '黑',
                            chongyuemrfz: '重岳',
                            anjielinamrfz: '安洁莉娜',
                            haojiaomrfz: '号角',
                            yanweimrfz: '焰尾',
                            xigymrfz: '夕',
                            nengtianshimrfz: '能天使',
                            yuanyamrfz: '远牙',
                            midiexiangmrfz: '迷迭香',
                            spzzxpmrfz: '假日威龙陈',
                            spzzxpmrfz_prefix: '假日威龙',
                            shuiyuemrfz: '水月',
                            qiubaimrfz: '仇白',
                            spyoulingshamrfz: '归溟幽灵鲨',
                            spyoulingshamrfz_prefix: '归溟',
                            baitiemrfz: "白铁",
                            weinamrfz: '推进之王',
                            siyemrfz: '伺夜',
                            spjiaweiermrfz: '百炼嘉维尔',
                            spjiaweiermrfz_prefix: '百炼',
                            semrfz: '史尔特尔',
                            linmrfz: '林',
                            duoluoximrfz: '多萝西',
                            kongxianmrfz: '空弦',
                            spyedaomrfz: '麒麟R夜刀',
                            yineisimrfz: '伊内丝',
                            miumiumrfz: '缪尔赛思',
                            heijianmrfz: '黑键',
                            yifulitemrfz: '伊芙利特',
                            sphemomrfz: '淬羽赫默',
                            sphemomrfz_prefix: '淬羽',
                            saileiyamrfz: '塞雷娅',
                            spweicaomrfz: '焰影苇草',
                            spweicaomrfz_prefix: '焰影',
                            huoerhaiyamrfz: '霍尔海雅',
                            huangmrfz: '煌',
                            linglanmrfz: '铃兰',
                            shanlingmrfz: '闪灵',
                            maizhelunmrfz: '麦哲伦',
                            cuoemrfz: '嵯峨',
                            palasimrfz: '帕拉斯',
                            xiaguangmrfz: '瑕光',
                            spamiyamrfz: '近卫阿米娅',
                            spamiyamrfz_prefix: '近卫',
                            zaolumrfz: '早露',
                            spshihuaiyamrfz: '琳琅诗怀雅',
                            spshihuaiyamrfz_prefix: '琳琅',
                            spsongzangrenmrfz: '圣约送葬人',
                            spsongzangrenmrfz_prefix: '圣约',
                            spjiexikamrfz: '涤火杰西卡',
                            spjiexikamrfz_prefix: '涤火',
                            tifengmrfz: '提丰',
                            fulankamrfz: '芙兰卡',
                            xingjimrfz: '星极',
                            xingyuanmrfz: '星源',
                            weiweiannamrfz: '薇薇安娜',
                            zhanchemrfz: '战车',
                            shanjimrfz: '闪击',
                            shuanghuamrfz: '霜华',
                            spxiaoyanmrfz: '纯烬艾雅法拉',
                            spxiaoyanmrfz_prefix: '纯烬',
                            suxinmrfz: '塑心',
                            bohuimrfz: '柏喙',
                            baimianxiaomrfz: '白面鸮',
                            hedeleimrfz: '赫德雷',
                            zhisongmrfz: '止颂',
                            cimeimrfz:'刺玫',
                            hongmrfz:'红',
                            //剧情角色
                            acemrfz: "Ace",
                            baocunzhemrfz: '保存者',
                            yizumikemrfz: '伊祖米克',
                            kelisitengmrfz: '克丽斯腾',
                            shuangxingmrfz: '霜星',
                            donghenshuangxingmrfz: '<font color=#8dc2f6><b>冬痕</b></font>霜星',

                            //————杂七杂八————//
                            shixingmrfz_trick_backup: '逍遥', //令


                            //————技能翻译————//
                            //实装角色
                            zhidengmrfz: "执灯",
                            "zhidengmrfz_info": "准备阶段，你可以令至多X名体力值不大于你的角色摸一张牌，然后你摸一张牌。（X=你的体力值）",
                            shenpanmrfz: "审判",
                            "shenpanmrfz_info": "出牌阶段限一次，你可以与一名其他角色拼点，若你赢，则①本回合当其成为你使用的牌的目标时，其需弃置一张牌，然后当此牌进入弃牌堆时，你获得之；②本回合你与其的距离视为1。",
                            "shenpanmrfz2": "审判",
                            "shenpanmrfz2_info": "",
                            "shenpanmrfz3": "审判",
                            "shenpanmrfz3_info": "",
                            liechaomrfz: "裂潮",
                            "liechaomrfz_info": "当你造成伤害时，若其没有牌，则你可以令此伤害+1。",
                            "zhidengmrfz2": "执灯",
                            "zhidengmrfz2_info": "",
                            ruibimrfz: "锐笔",
                            "ruibimrfz_info": "锁定技，游戏开始时，你将【打字机】置入你的装备区；出牌阶段限一次，若你的装备区没有【打字机】，你可以弃置一张牌，然后将【打字机】置入你的装备区。",
                            dazijimrfzskill: "打字机",
                            "dazijimrfzskill_info": "当你使用【杀】指定目标时，你可以令此【杀】结算两次。（此装备离开你的装备区时，销毁之）",
                            "ruibimrfz2": "锐笔",
                            "ruibimrfz2_info": "",
                            sujimrfz: "速记",
                            "sujimrfz_info": "锁定技，出牌阶段，当你使用的【杀】对一名其他角色造成伤害后，你获得以下效果：1.你使用的【杀】无视该角色的防具；2.每回合限一次，当你使用的【杀】指定其为目标后，此杀伤害+1。",
                            "sujimrfz2": "速记",
                            "sujimrfz2_info": "",
                            "sujimrfz_damage": "速记",
                            "sujimrfz_damage_info": "",
                            "dazijimrfzskill2": "打字机",
                            "dazijimrfzskill2_info": "",
                            "sujimrfz_ban": "速记",
                            "sujimrfz_ban_info": "",
                            cuofengmrfz: "挫奋",
                            "cuofengmrfz_info": "本局游戏限X次，当你受到伤害时，你可以弃置一张牌，然后你选择令你摸牌阶段额外摸一张牌或结束阶段摸一张牌。（X=你的体力上限-1）",
                            "cuofengmrfz_mark1": "挫奋",
                            "cuofengmrfz_mark1_info": "摸牌",
                            "cuofengmrfz_mark2": "挫奋",
                            "cuofengmrfz_mark2_info": "结束",
                            chengzhimrfz: "承志",
                            "chengzhimrfz_info": "觉醒技，准备阶段，若你发动“挫奋”的次数等于你的体力上限-1，则你减少一点体力上限并获得“逐志”。",
                            zhuzhimrfz: "逐志",
                            "zhuzhimrfz_info": "准备阶段，你可以受到一点火焰伤害（若体力值为1则改为弃置一张牌）并摸X/2（向下取整）张牌，本回合你获得以下效果：①手牌上限+X；②你使用【杀】次数的基数改为X。（X=你发动“挫奋”的次数）",
                            "zhuzhimrfz_mark": "逐志",
                            "zhuzhimrfz_mark_info": "",
                            moucunmrfz: "谋存",
                            yingshimrfz: "鹰视",
                            "moucunmrfz_info": "每轮开始时，你可以选择一名与你势力不同的角色，你须交给其一至两张牌，然后本轮当其出牌阶段结束时，你摸X张牌，若其使用了三种类型的牌，则你令【鹰视】中的X+1（X=其本回合使用的牌的类型数+你本轮交给该角色的牌的数量）",
                            "yingshimrfz_info": "出牌阶段限一次，你可以观看一名角色的手牌，然后你获得其中的X张牌。（X=0）",
                            "moucunmrfz2": "谋存",
                            "moucunmrfz2_info": "",
                            "moucunmrfz3": "谋存",
                            "moucunmrfz3_info": "",
                            siyongmrfz: "思涌",
                            "siyongmrfz_info": "锁定技，出牌阶段，当你首次使用某种花色的牌时，你可以获得一名其他角色的一张牌（若除你以外的角色均没有牌，改为你摸一张牌）。",
                            "siyongmrfz2": "思涌",
                            "siyongmrfz2_info": "",
                            yijianmrfz: "毅坚",
                            "yijianmrfz_info": "锁定技，每回合第一次受到的伤害-1。",
                            "yijianmrfz2": "毅坚",
                            "yijianmrfz2_info": "",
                            weiguangmrfz: "微光",
                            "weiguangmrfz_info": "锁定技，拥有“火光”标记的角色获得如下效果：1.摸牌阶段摸牌数、出牌阶段使用【杀】的次数、手牌上限各+1；2.结束阶段，将手牌补至手牌上限（至多为5）并失去一个“火光”标记；锁定技，准备阶段，若你没有“火光”标记，你获得一个“火光”标记；出牌阶段限一次，你可以对自己造成一点伤害，然后令一名角色获得一个“火光”标记,若该角色为你，你流失一点体力。",
                            "weiguangmrfz_mark": "微光",
                            "weiguangmrfz_mark_info": "",
                            "weiguangmrfz_losemark": "微光",
                            "weiguangmrfz_losemark_info": "",
                            "weiguangmrfz2": "微光",
                            "weiguangmrfz2_info": "",
                            zhidianmrfz: "执典",
                            "zhidianmrfz_info": "锁定技，每轮开始时，你声明一张牌，然后若有角色使用了你声明的牌，其需交给你一张牌或流失一点体力，若该角色是你，则改为弃置一张牌（没牌则不弃）。",
                            "zhidianmrfz_use": "执典",
                            "zhidianmrfz_use_info": "",
                            pijimrfz: "披棘",
                            "pijimrfz_info": "锁定技，当其他角色对你造成伤害时，你对伤害来源造成X点伤害。（X=你已损失体力值，X∈[1，2]）",
                            tongganmrfz: "同感",
                            "tongganmrfz_info": "锁定技，每回合每项限三次：①当其他角色从牌堆摸牌后，你摸一张牌；②当其他角色有牌进入弃牌堆后，你弃置一张牌。",
                            "tonggan_discardmrfz": "同感",
                            qinghemrfz: '亲和',
                            'qinghemrfz_info': '主公技，每回合限一次，当你于回合外因弃置而失去牌时，当前回合角色可以让你获得你弃置的牌中的一张牌。',
                            sutumrfz: "塑土",
                            "sutumrfz_info": "当你使用非转化且非虚拟的牌后，若你的手牌数等于你的当前体力值，你可以视为使用一张基本牌或非延时锦囊牌。",
                            wotumrfz: "沃土",
                            'wotumrfz_info': '每轮限一次，当你使用虚拟牌后，你可以获得一点护甲。',
                            dianshanmrfz: "电闪",
                            "dianshanmrfz_info": "锁定技，转化技，当你成为其他角色使用的黑色牌的目标时，阳：你对一名其他角色造成一点雷属性伤害；阴：你弃置一名其他角色一张牌。",
                            shidemrfz: "失得",
                            "shidemrfz_info": "锁定技，当你使用或打出，或因弃置失去一张牌时，若你的武将牌没有被横置，则横置之，反之重置之；当你武将牌被重置时，你摸一张牌。",
                            fukemrfz: "伏客",
                            "fukemrfz_info": "当你不因【伏客】获得牌时，你可以选择至多X名其他角色并弃置等量的牌，然后获得这些角色各一张牌。（X=此次获得的牌的数量）",
                            zhumengmrfz: "筑梦",
                            "zhumengmrfz_info": "",
                            "zhumengmrfz2": "筑梦",
                            "zhumengmrfz2_info": "",
                            "zhumengmrfz3": "筑梦",
                            "zhumengmrfz3_info": "每轮开始时，你可以进行判定，然后当你本轮前X次使用或打出与判定牌类别一致的牌时，你可以摸一张牌。（X=判定牌的点数）",
                            qianximrfz: "迁徙",
                            "qianximrfz_info": "锁定技，游戏开始时，你至多获得场上武将的两个技能。",
                            "qianximrfz_ban": '禁止复制武将',
                            "qianximrfz_ban_info": '可在设置中开启或关闭禁用武将</br>阿米娅、保存者',
                            geyaomrfz: "歌谣",
                            "geyaomrfz_info": "准备阶段，你可以展示牌堆顶一张牌并获得之，根据牌的类别你获得如下效果直到回合结束：1.基本牌：当你使用【杀】指定目标后，你可以观看其手牌并获得与此杀颜色不同的牌；2.锦囊牌：你使用得【杀】不可响应；3.装备牌：你使用的【杀】无距离限制且可指定任意个目标。",
                            "geyaomrfz_e": "歌谣",
                            "geyaomrfz_e_info": "",
                            "geyaomrfz_t": "歌谣",
                            "geyaomrfz_t_info": "",
                            "geyaomrfz_b": "歌谣",
                            "geyaomrfz_b_info": "",
                            zhangenmrfz: "斩根",
                            "zhangenmrfz_info": "出牌阶段，当你使用的【杀】造成伤害后，你可以弃置一张手牌令此杀不计入次数限制。",
                            suwangmrfz: "溯往",
                            "suwangmrfz_info": "锁定技，摸牌阶段，若你上回合没有造成伤害，你的摸牌数-2；准备阶段，你摸6张牌，然后弃置6-X张牌。（X=当前轮次数且X至多为6）",
                            "suwangmrfz2": "溯往",
                            "suwangmrfz2_info": "",
                            "suwangmrfz3": "溯往",
                            "suwangmrfz3_info": "",
                            xunlumrfz: "寻路",
                            "xunlumrfz_info": "锁定技，摸牌阶段，你改为随机摸<span class=thundertext>1</span>至6张牌；准备阶段，你将本回合出牌阶段使用【杀】的次数随机改为<span class=firetext>0</span>至5次；你的手牌上限随机改为<span class=greentext>3</span>至8张。当你造成伤害时，你可以令一个有颜色的数字+1。（有颜色的数字的最大值至多为4，且本技能中的随机生成的随机数均符合正态分布）",
                            xunlumrfz_rewirte: "寻路·修改",
                            'xunlumrfz_rewirte_info': '锁定技，摸牌阶段，你改为随机摸<span class=thundertext>1</span>至6张牌；准备阶段，你将本回合出牌阶段使用【杀】的次数随机改为<span class=firetext>0</span>至5次；你的手牌上限随机改为<span class=greentext>3</span>至8张。当你造成伤害时，你可以令一个有颜色的数字+1。（有颜色的数字的最大值至多为4，且本技能中的随机生成的随机数小于区间均值的概率降低）',
                            kuanmrfz: '苦暗',
                            "kuanmrfz_info": "锁定技，游戏开始时，你废除所有装备栏和判定区并摸3张牌<span class=thundertext>；判定阶段，你依次进行【乐不思蜀】和【兵粮寸断】的判定</span>。你可以将装备牌当【杀】、【闪】或【酒】使用或打出，你的装备牌不计入手牌上限。",
                            "kuanmrfz2": '苦暗',
                            "kuanmrfz5": "苦暗",
                            zhuguangmrfz: '逐光',
                            "zhuguangmrfz_info": "准备阶段，你可以选择一名角色，视为对其使用【决斗】，当你因此牌对其他角色造成伤害时，你可以防止此伤害，然后选择一项：①删除【苦暗】描述中蓝色的文字；②修改【逐光】的描述；③摸一张牌。",
                            zhuguangmrfz2: '逐光',
                            zhuguangmrfz3: '逐光',
                            zhuguangmrfz_change: '逐光',
                            zhuguangmrfz_rewrite: '逐光·修改',
                            'zhuguangmrfz_rewrite_info': '准备阶段，你可以选择一名角色，视为对其使用【决斗】且此牌不可被其他角色响应，当你因此牌对其他角色造成伤害时，你可以选择一项：①删除【苦暗】描述中蓝色的文字；②摸两张牌。',
                            shuoguangmrfz: '烁光',
                            "shuoguangmrfz_info": "锁定技，你跳过你的第一个弃牌阶段。",
                            yuanlvemrfz: "远略",
                            "yuanlvemrfz_info": "锁定技，当你不因【远略】从牌堆获得牌时，你改为卜算X，然后摸X张牌，若此时是摸牌阶段，则令X+1。（X=此次摸牌数）",
                            chonggoumrfz: "重构",
                            "chonggoumrfz_info": "摸牌阶段开始时，若你的手牌数不小于你的体力值<span class=thundertext>且已受伤</span>，你可以弃置所有手牌，回复一点体力，然后摸X张牌。（X=弃置牌的数量<span class=thundertext>-已损失体力值</span>）",
                            yuanshimrfz: "渊识",
                            "yuanshimrfz_info": "①当你使用你的初始手牌时，若该牌是：基本牌：你可以令此牌不可响应；普通锦囊牌：你可令此牌目标+1/-1；延时锦囊牌或装备牌：你可以摸一张牌。②锁定技，当你失去了你的所有初始手牌时，若你没有发动过【渊识①】，则你令【远略】中的X+1，否则，你删除【重构】描述中的蓝色部分。",
                            m3mrfz: 'M3',
                            'm3mrfz_info': '主公技，限定技，当你进入濒死状态时，你可以弃置区域内所有牌并复原武将牌、失去【重构】、减少一点体力上限，将体力恢复至2点，然后其他所有角色选择是否弃置一张牌并令你摸一张牌。',
                            zhuangtimrfz: "壮体",
                            "zhuangtimrfz_info": "①锁定技，每当你累计造成两点伤害，你增加一点体力上限（体力上限至多为15）。②出牌阶段限一次，你可以减少一点体力上限，视为使用一张基本牌或普通锦囊牌。",
                            julimrfz: "巨力",
                            "julimrfz_info": "当你造成伤害时，若该角色的体力值不大于你已损失的体力值，则你可以令此伤害+1，若你的体力上限不小于该角色牌数之和，则你可失去2点体力上限，令此伤害再+1。",
                            xunxiangmrfz: "寻相",
                            "xunxiangmrfz_info": "出牌阶段限一次，你随机声明一种类型的牌，然后你令所有角色各展示一张手牌，然后你摸X张牌，若你没有因此摸牌，你选择与一名其他角色各流失一点体力，然后将此技能于此出牌阶段内修改为出牌阶段限两次。（X=与你声明的牌类型相同的牌）",
                            ronghangmrfz: '戎行',
                            'ronghangmrfz_info': '锁定技，当你使用的带有伤害类标签的牌时，若此牌的牌名字数大于你上一张使用的牌，此牌伤害基数+1，反之，此牌不可响应且不计入次数限制。',
                            caiganmrfz: "才干",
                            "caiganmrfz_info": "当你不因【才干】获得牌时，你可以弃置获得的任意数量的牌，然后摸等量的牌,若你本回合没有发动过【才干】，则你额外摸一张牌。",
                            jingsimrfz: "警司",
                            "jingsimrfz_info": "当你使用牌时，若你没有使用过该牌名的牌，你可以摸一张牌。",
                            banruomrfz: "般若",
                            "banruomrfz_info": "锁定技，①游戏开始时，你获得以下效果直到你造成了伤害或游戏轮次大于你的体力上限：1.摸牌阶段，你的摸牌数-1；2.当你受到伤害时，你可以取消之；3.你的手牌上限为你的体力上限。②当你首次造成伤害后，你本回合：1.你使用【杀】的次数+1；2.下次造成的伤害+1。",
                            banruomrfz2: "般若",
                            yizhongmrfz: "义重",
                            "yizhongmrfz_info": "当一名其他角色受到伤害时，若你至该角色的距离为1，你可以弃置一张牌，令此伤害取消之，然后你受到等量的伤害，若你因此受到伤害，你可以摸两张牌。",
                            shazhenmrfz: "沙阵",
                            "shazhenmrfz_info": "锁定技，若你本轮没有造成伤害或本轮为第一轮，则你本轮前两次受到的伤害-1且你的手牌上限+2。",
                            shacanmrfz: "沙喰",
                            "shacanmrfz_info": "①你对其他角色造成伤害时，你可以令其获得一个“噬”标记（每名角色至多拥有两个“噬”）。②当有“噬”的角色出牌阶段开始时，其选择一项：1.令你观看其两张牌，然后你获得其中一张牌；2.令你回复一点体力，移除一个“噬”。③锁定技，你对有“噬”的角色造成的伤害不计入【沙阵】；每当你累计获得有“噬”的角色的两张牌时，其移除一个“噬”。",
                            shahuanmrfz: "沙环",
                            "shahuanmrfz_info": "出牌阶段，你可以令一名没有‘噬’标记的其他角色获得一个‘噬’。",
                            danweimrfz: "胆威",
                            "danweimrfz_info": "每回合各限两次，当[①其他角色/②你]响应[①你/②其他角色]使用的牌时，你可以获得其[①响应你牌/②使用]的牌，然后你获得一个‘胆’标记。",
                            hechimrfz: "呵斥",
                            "hechimrfz_info": "出牌阶段限一次，你可以弃置一张牌或移去一个'胆'，然后选择一名角色，其摸两张牌，然后其手牌上限-1直到其回合结束，若其不为你，你摸一张牌。",
                            jueyingmrfz: "赤霄",
                            "jueyingmrfz_info": "准备阶段，你可以移去5个'胆'，然后你可以视为使用两张雷【杀】和一张【杀】（无距离限制）。",
                            newjingsimrfz: '警司',
                            'newjingsimrfz_info': '主公技，每回合限一次，你的回合外，当其他角色成为【杀】或【决斗】的唯一目标时且使用者不是你，其可以请求将目标转移至你，若你接受，你摸一张牌并获得一个‘胆’。',
                            qingyanmrfz: "勤研",
                            "qingyanmrfz_info": "每轮限一次，出牌阶段结束时，若你于本阶段使用过三种类型的牌，你可以在本回合结束后额外执行一个回合。",
                            luanhuomrfz: "乱火",
                            "luanhuomrfz_info": "①锁定技，你造成的伤害时改为你对其造成等量的火属性伤害；当你受到火属性伤害时，取消之。②准备阶段，你可以选择对X名其他角色造成一点伤害或对一名其他角色造成X点伤害（X=本轮你执行的回合数）。",
                            xuyingmrfz: "虚影",
                            "xuyingmrfz_info": "当有黑桃牌因弃置进入弃牌堆后，你可以将其置于你的武将牌上，称为‘影’（影的上限至多为3）；当你使用一张基本或非延时锦囊牌时，你可以移去一张与你使用的牌类别不同的‘影’，然后此牌结算两次。",
                            xuegemrfz: "血歌",
                            "xuegemrfz_info": "当你受到伤害后，你可以你攻击范围内的一名角色造成一点伤害，然后若该角色体力值不大于你，你可以将一张牌作为‘影’置于武将牌上。",
                            huanxiangmrfz: "幻象",
                            "huanxiangmrfz_info": "当你使用或打出一张【闪】或【无懈可击】结算完成后，你可以摸一张牌。",
                            huanshimrfz: "缓时",
                            "huanshimrfz_info": "回合结束阶段，你可以选择至多X名其他角色，令其每个回合内其使用的第一张【杀】指定目标时，取消之，然后其获得这张【杀】。（X=本回合因弃置进入弃牌堆的牌的数量）",
                            shishimrfz: "时匙",
                            "shishimrfz_info": "当你于你的出牌阶段或摸牌阶段摸牌时，你可以令此次摸牌数+X，然后你于弃牌阶段开始时弃X-1张牌。（X=本回合你发动此技能的次数+1）",
                            jiemimrfz: "捷敏",
                            "jiemimrfz_info": "锁定技，你的回合[外/内]，当你[成为牌的/使用单一目标的牌指定其他角色为]目标后，若这是你本回合第[偶数/奇数]次[成为/指定其他角色为]目标，你弃置X张手牌，反之，你摸X张牌。（X=本回合此技能发动次数+1）",
                            shihuangmrfz: "拾荒",
                            "shihuangmrfz_info": "每回合限一次，当你的牌因弃置而进入弃牌堆后，若你弃置的牌的点数之和大于你体力值的2倍，你可以获得你弃置的牌。",
                            baokemrfz: "剥壳",
                            "baokemrfz_info": "出牌阶段限一次，当你对一名其他角色造成伤害后，若此次伤害是属性伤害或该角色防具栏不为空，你可以额外对其造成一点伤害。",
                            shunanmrfz: "述难",
                            "shunanmrfz_info": "①锁定技，你的手牌数不小于你的体力值时，你造成的伤害+<span class=thundertext>1</span>且摸牌阶段额外摸<span class=thundertext>1</span>张牌，若你已损失的体力值不大于你体力上限的一半，有颜色的数字翻倍。②结束阶段，若你的体力值大于1，你失去一点体力。",
                            nanjiaomrfz: '难交',
                            'nanjiaomrfz_info': '锁定技，每轮开始时，若你的手牌上限是场上角色中最多的，你的手牌上限-X，场上手牌上限最少或之一的角色手牌上限+X，反之，你的手牌上限+X，场上手牌上限最多的其他角色手牌上限-X。（X=场上手牌上限最多的角色的手牌上限的一半，向下取整；上述效果持续一轮）',
                            lvwaimrfz: "律外",
                            "lvwaimrfz_info": "限定技，出牌阶段，你可以视为使用一张不可响应的杀（无距离限制），然后你回复X点体力，摸X张牌且本回合【述难②】失效。（X=因此【杀】造成的伤害）",
                            chaoshengmrfz: "潮声",
                            "chaoshengmrfz_info": "结束阶段，若你连续<span class=thundertext>3</span>个回合没有造成过伤害，你可以选择摸两张牌或回复一点体力。</br><span class=thundertext>【潮声●修改】</span>结束阶段，若你连续<span class=thundertext>3</span>个回合没有造成过伤害，你可以摸两张牌并回复一点体力。",
                            jianshumrfz: "剑术",
                            "jianshumrfz_info": "锁定技，每当你使用的牌指定的目标数累计达到5的整数倍时，你依次执行下列选项：①【潮声】中带颜色的数值-1；摸牌阶段摸牌数，【杀】的使用次数和攻击距离各+1。②出牌阶段开始时，你可以视为使用一张【杀】（不计入次数）；【杀】的使用次数和攻击距离各+1。③【潮声】中带颜色的数值-1；修改【潮声】",
                            qiulongmrfz: "囚笼",
                            "qiulongmrfz_info": "每轮开始时，你可以选择一名其他角色，令其获得‘笼’标记；锁定技，当有‘笼’的角色受到伤害后，其恢复等量体力，然后你受到等量无伤害来源的伤害并获得两倍伤害值的‘幻’标记。",
                            bihumrfz: "庇护",
                            "bihumrfz_info": "锁定技，当你受到属性伤害时，取消之；当你受到有来源的伤害时，你获得等量的‘幻’。",
                            shengyumrfz: "圣域",
                            "shengyumrfz_info": "每四轮限一次，出牌阶段，你可以选择至多3名角色令其获得【破笼】直到你发动此技能后的第三轮结束，然后你恢复两点体力。",
                            polongmrfz: "破笼",
                            "polongmrfz_info": "你可以按照如下规则使用场上的‘幻’：①出牌阶段限三次，你可以移除一个‘幻’，摸一张牌；②出牌阶段限三次，你可以移除一个‘幻’，恢复一点体力；③当你受到伤害时，你可以移除一个‘幻’，令此伤害-1。",
                            yingkuimrfz: "盈亏",
                            "yingkuimrfz_info": "锁定技，你的手牌上限+2；你的【桃】均视为【杀】，你以此法转换的【杀】不可响应。",
                            "yingkuimrfza": "盈亏",
                            cangfengmrfz: "藏锋",
                            "cangfengmrfz_info": "锁定技，每当你累计造成2点伤害时，你选择回复一点体力或摸一张牌。",
                            yuexiangmrfz: "月相",
                            "yuexiangmrfz_info": "锁定技，根据你已损失的体力值，获得以下效果：①大于等于1：你使用【杀】的次数+X（X=本阶段你使用杀的次数/2+1，向下取整）；出牌阶段限一次，你第一次使用【杀】造成的伤害+1；②大于等于2：出牌阶段使用的第一张【杀】结算两次；③大于等于3：出牌阶段你使用的第一张【杀】目标+1；攻击距离+2。",
                            danpaomrfz: "氮炮",
                            'danpaomrfz_info': "整局游戏限两次，出牌阶段限一次，你可以弃置所有的手牌（没有手牌则改为弃置所有的牌），选择一名其他角色并对其造成一点伤害，若你有‘蓄水’标记，则你于此技能结算完毕后移除之，然后直到其回合结束：其计算与其他角色的距离+<span class=thundertext>2</span>；其每累计使用<span class=firetext>两</span>张牌时，你对其造成一点伤害。",
                            shuipaomrfz: "水炮",
                            'shuipaomrfz_info': "①锁定技，当你不因【氮炮】而对其他角色造成伤害时，直到其回合结束其计算与其他角色的距离+1（不可叠加，若你有‘蓄水’标记，则改为+2）。②锁定技，当你你不因【氮炮】而造成伤害时，若你装备区有武器牌，则你本轮获得‘蓄水’标记；当你有‘蓄水’标记时，【氮炮】中蓝色数字翻倍，红色数字-1。",
                            jiepimrfz: "洁癖",
                            "jiepimrfz_info": "锁定技，其他角色不能弃置你装备区的牌；你的回合内，其他角色装备区的牌不能被弃置。",
                            juezhanmrfz: '决战',
                            'juezhanmrfz_info': '锁定技，你的多目标锦囊(【借刀杀人】除外)只能指定一个目标；当你成为其他角色的【杀】的目标时，其获得“单挑”标记直到你的回合结束；[若场上有“单挑”，你/拥有“单挑”的角色]使用牌仅能指定自己或[拥有“单挑”的角色/你]为目标，你与有“单挑”的角色互相视为在其攻击范围内。',
                            tieyimrfz: '铁意',
                            'tieyimrfz_info': '限定技，出牌阶段，你可以弃置至多三张牌并翻面，摸两倍于你弃置的牌的牌，回复两点体力，你可以令一名没有‘单挑’标记的其他角色获得‘单挑’标记，然后本回合你对有‘单挑’标记的角色使用牌无次数限制，且你于回合结束弃置所有牌。',
                            tieyimrfz_append: '<span style="font-family: yuanli">快看，是我方的一名铁驭，我们有救了！</span>',
                            shanxiemrfz: '擅械',
                            'shanxiemrfz_info': '①当其他角色弃置的装备牌进入弃牌堆时，你可以弃置X张牌，然后获得此牌。(X=本轮此技能发动的次数)②你可以将装备牌视为【杀】使用或打出，当你使用以此法转化的【杀】对有“单挑”的角色造成伤害时，此【杀】伤害+1；你使用的【杀】造成伤害后，你可以获得一点护甲。',
                            wusumrfz: "五速",
                            'wusumrfz_info': '锁定技，你的准备阶段、判断阶段、摸牌阶段和弃牌阶段均视为出牌阶段；出牌阶段开始时，你摸一张牌。',
                            wutoumrfz: "无头",
                            "wutoumrfz_info": "锁定技，每轮限一次，当你受到伤害时，若此伤害值等于你当前体力值，取消之。",
                            baigeimrfz: "白给",
                            "baigeimrfz_info": "锁定技，出牌阶段结束时，若你已执行了五个出牌阶段，你须将手牌弃置至手牌上限，然后你弃置两张牌。",
                            yushimrfz: '雨势',
                            'yushimrfz_info': '锁定技，摸牌阶段，你改为摸8-X张牌。（X=当前游戏轮数，X至多为6）',
                            laoyingmrfz: '烙印',
                            'laoyingmrfz_info': '出牌阶段限一次，当你使用的牌造成伤害后，你可以获得此牌，若此牌是基本牌，本回合你使用【杀】的次数+1，反之，本回合你使用的下一张普通锦囊牌不可响应。',
                            shazumrfz: "沙卒",
                            'shazumrfz_info': '①出牌阶段限一次，你可以选择一名有牌的其他角色，你与其同时选择自己的一张牌（其须优先选择装备区的牌）并交互之，然后手牌较少的角色摸一张牌。②当你受到其他角色造成的伤害时，你可以令其获得‘仇敌’标记（若场上有‘仇敌’标记则改为转移‘仇敌’标记至该角色）。',
                            dianlianmrfz: "电链",
                            'dianlianmrfz_info': '当你对其他角色造成伤害后，你可以对与受伤角色距离为1的角色造成X点伤害。（X=此次伤害数-1）；每轮限一次，你造成雷属性伤害时，你可以令此伤害+1',
                            leibaomrfz: '雷暴',
                            'leibaomrfz_info': '<span class=firetext>神将会降下神罚处罚冒犯神之人</span></br>出牌阶段限一次，你可以弃置[两张装备牌/一张【闪电】]，然后选择一名除你以外的角色中体力值最高或之一，或有‘仇敌’标记的其他角色并对其造成两点[伤害/雷电伤害]。',
                            zhujimrfz: "铸极",
                            'zhujimrfz_info': "摸牌阶段和回合结束阶段结束时，你可以重铸一张牌，若你重铸的是装备牌，你摸一张牌。",
                            tongyinmrfz: "铜印",
                            'tongyinmrfz_info': "每回合限一次，当你受到伤害后，你可以令伤害来源本回合所有非锁定技失效，然后其需要选择弃置X张基本牌或一张非基本牌。（X=你已损失的体力值，X至少为1）",
                            tieyumrfz: "铁御",
                            "tieyumrfz_info": "每轮限两次，当一名其他角色使用装备牌时，你可以令其回复一点体力（若其已损失体力值为0，则改为获得一点护甲），本轮获得以下效果:使用【杀】的次数+1;受到大于1的伤害时，将此伤害改为1。",
                            shixingmrfz: "诗形",
                            'shixingmrfz_info': '①准备阶段，你可以选择放置至多两张相同类别且与武将牌上已有的牌类别相同的牌于你的武将牌上，或弃置武将牌上因此技能放置的所有牌，然后选择至多两张相同类别的牌置于武将牌上，根据牌的类型称为:基本牌："清平";锦囊牌:"逍遥"；装备牌:"弦惊"，并获得不同的效果：</br><span class=firetext>清平</span>：当你受到伤害时，你可以移去一张‘清平’并令此伤害-1；</br><span class=thundertext>逍遥</span>：出牌阶段，你可以选择一个‘逍遥’并选择一名其他角色，然后视为对其使用一张不计入次数限制的【杀】，然后若此【杀】没有造成伤害，你获得你选择的‘逍遥’，反之，你弃置之；</br><span class=greentext>弦惊</span>：1个‘弦惊’:手牌上限+2；2个‘弦惊’:使用【杀】的次数和摸牌阶段摸牌数+2。</br>（‘清平’、‘弦惊’和‘逍遥’标记数量均最多为2）</br>②锁定技，当你移去最后一张[‘清平’/‘逍遥’/‘弦惊’]时，你[从牌堆中获得一张基本牌/回复一点体力，摸一张牌/弃置一名其他角色的一张牌]。',
                            zuimengmrfz: "醉梦",
                            'zuimengmrfz_info': "限定技，出牌阶段，你可以使用一张【酒】并获得场上至多X张牌（最多从同一名角色处获得两张牌），然后将手牌补至X张，结束出牌阶段和跳过弃牌阶段。（X=场上存活人数）",
                            haojiumrfz: "好酒",
                            'haojiumrfz_info': "锁定技，当你使用【酒】时，你回复一点体力；你使用【酒】无次数限制。",
                            juntongmrfz: "军统",
                            'juntongmrfz_info': '①锁定技 ，你跳过判定阶段和摸牌阶段，你的手牌上限－1，你每轮开始时摸三张牌。②你使用【杀】选择目标后，可以进行一次判定，若为：♦，此杀不记入次数；♥，此杀可额外指定一个目标（目标必须合法）；♠：摸一张牌。',
                            pochengmrfz: "破城",
                            'pochengmrfz_info': '每三轮限一次，出牌阶段当你使用【杀】且本轮不为第一轮时，你可以令此【杀】额外结算两次，然后你跳过出牌阶段且本回合手牌上限+1。',
                            junqimrfz: "军旗",
                            'junqimrfz_info': '①锁定技，游戏开始时，你选择获得‘军旗’标记；根据拥有‘军旗’标记角色的‘军旗’的类型获得不同的效果：</br><span class=thundertext>【支援之旗】</span>:与其距离不大于1的角色受到伤害后，其可摸一张牌，然后交给受伤角色一张牌；摸牌阶段摸牌数+1。</br><span class=greentext>【治愈之旗】</span>:出牌阶段开始时，其可弃置至多三张牌，然后其选择等量角色，然后其回复一点体力并令其中手牌数最少的角色摸至4张。</br><span class=firetext>【进攻之旗】</span>:当与你距离不大于2的角色受到伤害时，你可以弃置一张牌，令此伤害+1；使用【杀】的次数+1。</br>②锁定技，准备阶段，若[场上有‘军旗’且你没有军旗/场上没有‘军旗’]，你[将‘军旗’标记转移至你/你获得‘军旗’标记]，然后你可以改变‘军旗’的类型。',
                            zhiqimrfz: '掷旗',
                            'zhiqimrfz_info': '出牌阶段限一次，若你有‘军旗’标记，你可以将‘军旗’标记转移给一名其他角色。',
                            butuimrfz: '不退',
                            'butuimrfz_info': '拥有‘军旗’标记的角色回合开始时，其可以选择跳过本回合的判定阶段并弃两张牌或摸一张牌。',
                            linhuamrfz: '鳞滑',
                            'linhuamrfz_info': '①锁定技，当你造成伤害时，改为对其造成等量的无来源伤害。②当你受到属性伤害时，你可以弃置两张牌改为你对伤害来源造成等量伤害。③准备阶段，当你的判定区有牌时，你可以弃置两张手牌移动之。',
                            mingshimrfz: "明事",
                            'mingshimrfz_info': '出牌阶段限两次，每名角色每回合限一次，你可以交给一名其他角色一张牌，然后观看其手牌，若其手牌在交予牌后：①大于3：你弃置其至多三张手牌，其于下个结束阶段摸一张牌；②小于等于3：你可以令其摸[2/1]张牌，然后于下一个准备阶段弃置[1/2]张牌。发动该技能后，你于结束阶段摸一张牌。',
                            jixiongmrfz: '吉凶',
                            'jixiongmrfz_info': '当有其他角色获得你的牌的时候，你可以令其获得“符纸”标记；锁定技，有‘符纸’标记的角色的准备阶段开始时，其进行一次判定且移除一个‘符纸’标记，若判定结果为黑色，则其须弃置一张牌并流失一点体力，然后你获得其弃置的牌，若其仍有‘符纸’标记，重复此流程。',
                            jixiongmrfz2: '吉凶',
                            jixiongxmrfz: '符纸',
                            guaijiemrfz: '怪杰',
                            'guaijiemrfz_info': '①锁定技，每轮开始时，你失去一点体力。②锁定技，每轮限一次，当你造成伤害后，你令【怪杰①】下一轮失效，然后你弃置一名角色区域内一张牌。',
                            qizhenmrfz: '奇针',
                            'qizhenmrfz_info': "出牌阶段限一次，你可以选择一名角色并选择弃置其两张牌或对其造成一点伤害，然后其获得以下效果：①获得一点护盾；②使用的【杀】和【决斗】的伤害基数+1直到其回合结束。",
                            guaiyaomrfz: '怪药',
                            'guaiyaomrfz_info': '锁定技，当你对其他角色造成伤害时，你随机执行下列选项的一项:①回复两点体力（已损失体力值为0则改为获得一点护甲）；②受伤的角色弃置一张牌；③受伤的角色下个摸牌阶段摸牌数-1；④你摸一张牌；⑤受伤角色跳过下个出牌阶段和弃牌阶段（概率最低）。',
                            heishimrfz: '黑矢',
                            'heishimrfz_info': '锁定技，你的使用的【杀】仅能指定与你距离不大于2的角色为目标，你的【杀】无视防具；你对有防具的角色造成的伤害+1，对与你距离小于等于1的角色造成的伤害+1。</br><span class=thundertext>【黑矢·修改】</span></br>锁定技，你的【杀】无视防具；你对有防具的角色造成的伤害+1，对与你距离小于等于3的角色造成的伤害+1。',
                            ruitongmrfz: '锐曈',
                            'ruitongmrfz_info': '当有其他角色使用防具牌且其在你攻击范围内时，你可以视为对其使用一张【杀】。',
                            junumrfz: '巨弩',
                            'junumrfz_info': '限定技，准备阶段，你可以令你本回合获得如下效果：①使用的【杀】无距离限制、使用次数和目标+1；②修改【黑矢】。',
                            wubenmrfz: '武本',
                            'wubenmrfz_info': '锁定技，当你装备区没有武器牌时，你使用【杀】的次数+1；你的手牌上限+X（X=你装备区空余的装备栏数/2，向下取整）。出牌阶段开始时，若你装备区没有武器牌，你可以选择一张手牌并视其为【杀】使用之。',
                            wowumrfz: '我无',
                            'wowumrfz_info': '<span class=firetext>【劲发江潮落】</span></br>你的回合内，你每使用三张牌可视为使用一张不计入次数的【杀】，若此【杀】造成了伤害，你摸一张牌；锁定技，当你本局游戏累计发动5次【我无】时，修改此技能。',
                            wowumrfz_rewrite: '我无·修改',
                            'wowumrfz_rewrite_info': '<span class=firetext>【气收秋毫平】</span></br>每当你累计使用或打出三张牌时，你可以视为使用一张无距离限制且不计入次数的【杀】，然后你摸一张牌。',
                            shubianmrfz: '戍边',
                            'shubianmrfz_info': '①当你受到伤害后，若伤害来源没有‘息兵’标记，你可以令其本回合获得‘息兵’标记，若其装备区有武器牌，你可以将其置入弃牌堆；出牌阶段开始时，若你没有‘息兵’标记，你可以获得‘息兵’标记。②锁定技，拥有‘息兵’标记的角色不能使用带有伤害类标签的牌且手牌上限+2，若该角色是你，你可以重铸带有伤害类标签的牌，若你未以此法重铸过该牌名的牌，你摸一张牌。',
                            fanzhongmrfz: '反重',
                            'fanzhongmrfz_info': "①准备阶段，你可以令你攻击范围内的一名没有‘反重’标记的其他角色获得‘反重’标记。②锁定技，拥有‘反重’标记的角色获得如下效果：1.当你不因此效果获得牌时，将牌置于武将牌上，你每使用一张牌便选择获得一张武将牌上的牌；2.弃牌阶段开始时，移除所有的‘反重’标记，其获得因此置于在武将牌上的牌。",
                            fanzhongmrfz2: '紊乱',
                            xinshimrfz: '信使',
                            'xinshimrfz_info': '①当你累计获得来自其他角色的两张牌时，你可以从牌堆中获得一张你指定类型的牌；②出牌阶段，你可以选择一张手牌并交给一名其他角色（不能选择相同类型的牌且不能指定相同的角色），当你本回合因此：1.交出一张牌，摸一张牌：2.交出两张牌，获得你牌的角色交给你一张手牌，然后其摸一张牌；3.交出三张牌，你分配一个‘反重’标记给任意其他角色。③锁定技，你因【信使①】获得的牌本回合不计入手牌上限。',
                            dunpaomrfz: '盾炮',
                            'dunpaomrfz_info': '锁定技，你的攻击范围+5，你不能指定与你距离为1的角色为目标；当你使用【杀】对距离你大于1的角色造成伤害时，该角色进行判定，若不为红色，此伤害+1；回合开始时，你可以修改此技能。',
                            dunpaomrfz_rewrite: '盾炮·修改',
                            'dunpaomrfz_rewrite_info': '锁定技，你的手牌上限+2。',
                            biaohaomrfz: '飙号',
                            'biaohaomrfz_info': '蓄力技（0/4），出牌阶段限两次，你可以弃置一张带有伤害类标签的牌，然后你增加一点蓄力值；你可以按照下列规则消耗蓄力值：①你可以消耗1点蓄力值，视为使用一张【杀】；②出牌阶段，你可以消耗4点蓄力值，视为使用三张【杀】和一张【万箭齐发】，然后失去3点体力。',
                            xuezhanmrfz: '血战',
                            'xuezhanmrfz_info': '锁定技，当你首次即将死亡时，取消之，然后你将体力值和体力上限调整至2、弃置你的区域内所有牌、摸4张牌并重置你的武将牌。',
                            fengjianmrfz: '锋剑',
                            'fengjianmrfz_info': '锁定技，当你响应牌后，你获得如下效果：当你使用下一张非【闪】的基本牌后，你可以视为使用一张相同的基本牌（不计入使用次数）。',
                            hongsongmrfz: '红松',
                            'hongsongmrfz_info': '①锁定技，当你响应牌后，若场上‘红松’标记小于3，你获得一个‘红松’标记；拥有‘红松’标记的角色或你需要使用或打出【闪】时，其可以进行判定，若不为♥，其视为使用或打出一张【闪】并获得判定牌，然后若该角色不为你，其移除‘红松’标记。②回合开始时，若你有‘红松’标记，你可以将任意个‘红松’标记交给任意名其他角色。',
                            huijuanmrfz: '绘卷',
                            'huijuanmrfz_info': '①锁定技，你记录每轮第一张没有被记录过的被使用的普通锦囊牌、基本牌和非延时锦囊的牌名；你的回合结束时，你删除所有被记录的牌名。②你可以将一张手牌当做你记录的牌名的牌使用或打出（此牌不计入使用次数），然后删除你使用的牌的牌名。',
                            dianjingmrfz: '点睛',
                            'dianjingmrfz_info': '转化技，当你使用转化牌时，你可以从牌堆中获得与你使用的转化牌的阳:牌名相同;阴:类型相同的牌。',
                            cangjuanmrfz: '藏卷',
                            'cangjuanmrfz_info': '锁定技，你每轮前三次获得牌于本轮不计入手牌上限。',
                            guozaimrfz: '过载',
                            'guozaimrfz_info': '出牌阶段限一次，你可以展示牌堆顶X+1张牌，然后选择一名其他角色，对其使用其中的【杀】，你可以获得其中一张不是【杀】的牌，然后你弃置剩余的牌。（X=你的体力上限）',
                            lianshemrfz: '连射',
                            'lianshemrfz_info': '锁定技，你使用【杀】的次数改为X。（X=你的体力上限）',
                            yuanmengmrfz: '援盟',
                            'yuanmengmrfz_info': '当你的攻击范围外有角色A使用【杀】仅指定角色B时，你可以选择对[角色A/角色B]使用一张【杀】(若角色B为你，则你只能选择对角色A使用【杀】)，然后你与[角色B/角色A]各摸一张牌(若角色B为你，改为你摸一张牌)，若你的【杀】被【闪】抵消。',
                            ningshenmrfz: '凝神',
                            'ningshenmrfz_info': '锁定技，当你连续两个回合没有成为当前回合角色使用的牌（你自己使用的牌除外）的目标时，你选择摸一张牌或从牌堆中获得一张【杀】；每轮开始时，若你上一轮没有受到伤害或本轮为第一轮，你下一张伤害类标签的牌伤害基数+1。',
                            bingximrfz: '屏息',
                            'bingximrfz_info': '锁定技，你的回合外，若你手牌数不小于你的体力值，你的攻击范围视为0。',
                            nianshoumrfz: '念手',
                            nianshoumrfz2: '念手',
                            'nianshoumrfz_info': '①出牌阶段，你可以将一张武器牌置于你的武将牌上，称为‘巨剑’（上限为2），你视为装备了‘巨剑’。②当你使用【杀】指定目标后，若目标武将牌上的‘巨剑’小于等于1，你可以选择获得一张‘巨剑’并将其置于目标的武将牌上，使其摸牌阶段摸牌数和本回合第一次对你造成的伤害-X（X=其‘巨剑’标记数）。③锁定技，你的准备阶段，你随机获得所有有‘巨剑’标记角色的装备区和手牌的各一张牌，然后你获得其武将牌上的所有‘巨剑’牌；游戏开始时，你从牌堆中获得两张武器牌并废除你的武器栏。',
                            chongjimrfz: '冲击',
                            'chongjimrfz_info': '当你使用的【杀】造成伤害后，你可以对与受伤角色座次相邻的其他角色造成一点伤害，然后其弃置X张手牌。（X=本次你造成的伤害数）',
                            zhangyimrfz: '胀意',
                            'zhangyimrfz_info': '锁定技，若你有‘巨剑’标记，你的攻击范围+X。（X=你的‘巨剑’标记的数量）',
                            jianfengmrfz: '俭风',
                            'jianfengmrfz_info': '当你使用【杀】结算完成后，你可以进行判定，若为♠，你获得此杀且此杀不计入次数限制。',
                            shuiqiangmrfz: '水枪',
                            'shuiqiangmrfz_info': '当你使用【杀】指定目标后，你可以令你攻击范围内的任意不为此【杀】目标的其他角色都成为此【杀】的目标。',
                            yuyunmrfz: '余韵',
                            'yuyunmrfz_info': '你的回合结束时，若你本回合没有使用过【杀】，你可以摸X张牌然后下一回合使用【杀】的次数+X（最多为2）。（X=你本回合可以使用【杀】的次数，X最大为3）',
                            liqunmrfz: '离群',
                            'liqunmrfz_info': '每回合限一次，当你成为其他角色使用牌的目标时，若此牌目标为1或使用者与你距离大于1，取消之。',
                            chuangshangmrfz: '创伤',
                            'chuangshangmrfz_info': '当你不因【创伤】而对其他角色造成伤害后，每满足下列一项你便可以摸一张牌，若满足所有选项，你可以放弃摸牌，然后对受伤角色造成一点伤害：①目标是场上体力值最少的角色；②你的攻击范围内有生命值不大于一半的其他角色。',
                            jinghuamrfz: '镜花',
                            jinghuamrfz2: '镜花',
                            'jinghuamrfz_info': '每回合限一次，当你使用【杀】时，你可以额外指定至多两个目标（无距离限制），若你造成的伤害不大于2，你流失一点体力。',
                            ruximrfz: '入隙',
                            'ruximrfz_info': '当你使用的【杀】指定其他角色为目标后，你可以进行一次判定，若判定结果为黑色，则你横置该角色，若结果为♣，你本回合使用【杀】的次数+1；当你对横置的角色或判定区有牌的角色使用牌且此牌目标不大于1时，你可以弃置其区域内一张牌或者摸一张牌。',
                            wenxuemrfz: '问雪',
                            'wenxuemrfz_info': '当你使用【杀】选择目标后，你可以令至多2名被横置的角色或判定区内有牌的角色（目标必须合法）成为此【杀】的目标；同一回合，每当你对其他角色累计使用2的X倍张的非虚拟【杀】时，你可以视为使用X张【杀】（不计入次数限制）。',
                            yongwomrfz: '拥我',
                            'yongwomrfz_info': '①锁定技，当你武将牌背面朝上时，你获得如下效果:1.当你的上家或下家使用牌后，其须弃置一张牌，其每累计因此弃置两张牌，你对其造成一点伤害，然后你可以选择将你的武将牌翻面；2.其他角色计算与你的距离+1。当你的武将牌正面朝上时，你获得如下效果：1.当你于一轮内首次进入濒死状态时，你将体力值回复至1，然后将你的武将牌翻面；2.任意角色的回合结束阶段，若你本回合受到或造成了伤害，你可以将你的武将牌翻面。②锁定技，当你翻面至正面朝上时，你摸两张牌。',
                            jigongmrfz: '机工',
                            'jigongmrfz_info': '锁定技，游戏开始时或你的准备阶段，若你的装备区没有【支援装备】，你选择装备一个支援装备；回合结束时，若你的装备区有【支援装备】，你可以将其移动至一名其他角色的装备区（不可以替换原装备）。',
                            jigongmrfz_card: '支援装备',
                            'jigongmrfz_card_info': '锁定技，根据【支援装备】的类型获得对应的效果。</br>支援装备类型：</br>白铁多功能平台-攻击型：当你造成至少两点伤害时，你可以令此伤害+1.</br>白铁多功能平台-支援型：锁定技，弃牌阶段开始时，你摸一张牌并额外执行一个出牌阶段。</br>铁钳号原型机：出牌阶段你可以弃置X张带有伤害类标签的牌，然后选择一名你攻击范围内的其他角色，对其造成一点伤害（X=此技能本回合使用数+1）',
                            jiefeimrfz: '节费',
                            'jiefeimrfz_info': '①当【支援装备】被移出游戏时，你可以进行判定，若为红色，你摸一张牌并可令一名角色装备与此次被移出游戏的【支援装备】类型相同的【支援装备】。②锁定技，[任意角色的回合结束阶段，若其装备区有【支援装备】/【支援装备】进入弃牌堆时]，将此牌[置入弃牌堆/移出游戏]。',
                            fensuimrfz: '粉碎',
                            'fensuimrfz_info': '锁定技，当与你距离不大于1的其他角色进入濒死状态时，你摸一张牌。',
                            yuechuimrfz: '跃锤',
                            'yuechuimrfz_info': '①出牌阶段限两次，当你使用【杀】时，你可以摸<span class=thundertext>1</span>张牌。②当你使用的【杀】造成伤害后，你可以弃置<span class=thundertext>2</span>张类别不同的牌（必须有一张装备牌）令【跃锤】中蓝色数字的数值+1（蓝色数字数值最多为3），无论你是否选择弃牌，你都可以选择对一名与你距离为1且不是受伤角色的其他角色造成一点伤害。',
                            langqunmrfz: '狼群',
                            'langqunmrfz_info': '①锁定技，[游戏开始时/当你于此回合第一次失去牌时]，若你的‘狼群’标记数不大于2,你获得[2/1]个‘狼群’标记；你的弃牌阶段结束时，你摸X+1张牌（X=本阶段进入弃牌堆的牌的数量的一半，向下取整）；当你有‘狼群’标记时，你的手牌上限+1。②当你成为带有伤害类标签的牌的目标后，你可移去一个‘狼群’标记并取消之。',
                            qunxingmrfz: '群性',
                            'qunxingmrfz_info': '①锁定技，你对有‘群仇’标记的角色使用牌无距离限制且其无法响应你使用的牌；当你对有‘群仇’的角色造成伤害后，你摸X张牌，然后其移去所有‘群仇’标记（X=其‘群仇’标记数）。②当你成为其他角色使用牌的目标时，你可以令其获得一个‘群仇’标记（最多为6）。',
                            yixuemrfz: '医学',
                            'yixuemrfz_info': '锁定技，每轮限一次，当你回复体力时，回复值+1。',
                            conghunmrfz: '丛魂',
                            'conghunmrfz_info': '①每轮开始时，若你没有‘坚韧’标记且上轮没有使用过【丛魂①】，你可以令你本轮受到伤害时，令此伤害-1且你获得一个‘坚韧’标记。②锁定技，任意角色的回合开始阶段，若你本轮没有使用过【丛魂①】且你的‘坚韧’标记数大于1，你失去一点体力并移去一个‘坚韧’标记。',
                            juximrfz: '锯袭',
                            juximrfz2: '锯袭',
                            'juximrfz_info': '当你使用的【杀】指定目标后且目标数不大于1，你可以将目标角色的X张牌置于你的武将牌上，若此杀造成了伤害，你可以至多获得你武将牌上的两张牌，否则，目标角色至多获得你武将牌上的两张牌，然后弃置你武将牌上的牌。（X=目标角色区域内牌的花色数）',
                            mojianmrfz: '魔剑',
                            'mojianmrfz_info': '锁定技，你的非雷属性【杀】均视为火属性【杀】，你的雷属性【杀】均视为普通【杀】；出牌阶段限两次，当你造成火焰伤害后，你摸两张牌。',
                            yujinmrfz: '余烬',
                            'yujinmrfz_info': '①锁定技，限定技，每轮限一次，当你进入濒死状态时，你执行一个额外的回合。②锁定技，当你的武将牌从背面朝上翻面至正面朝上时，【余烬①】视为没有发动过。',
                            huanghunmrfz: '黄昏',
                            'huanghunmrfz_info': '准备阶段，你可以将你的武将牌翻面并可以弃置至多两张牌，你每弃置一张牌你的体力上限+1，然后本回合每使用一张带有伤害类标签的牌体力上限-1、攻击距离+2和你使用【杀】造成的伤害+1且可额外指定至多两个目标。',
                            fanyuanmrfz: '凡愿',
                            'fanyuanmrfz_info': '锁定技，本轮成为过【微光】目标的角色不能成为延时锦囊的目标。',
                            new_weiguangmrfz: '微光',
                            'new_weiguangmrfz_info': '每轮限五次，当有角色被横置、武将牌翻至背面朝上或成为延时锦囊的目标后，你可以令其执行满足条件的下列选项：1.被横置：解除横置状态；2.武将牌背面朝上：将武将牌翻面；3.成为延时锦囊的目标：取消之并弃置判定区内所有的牌。然后其摸X张牌。(X=没有执行的选项数)',
                            yingjimrfz: '应急',
                            'yingjimrfz_info': '每轮限一次，其他角色成为延时锦囊牌的唯一目标时，你可以令其恢复一点体力并摸一张牌。',
                            zhenzamrfz: '缜匝',
                            'zhenzamrfz_info': '①锁定技，游戏开始时你获得一个‘壁’标记；当有角色获得‘壁’标记时，若其没有护甲，其获得一点护甲；每轮各限两次，每名角色的准备阶段或有其他角色因你造成的伤害而进入濒死状态时，若你没有‘壁’标记，你获得一个‘壁’标记。②有‘壁’标记的角色受到伤害后，若其因此伤害触发过护甲且没有护甲，其可以随机获得攻击范围内一名其他角色的一张牌并对其造成一点伤害。',
                            zhenzamrfz_rewrite: '缜匝·修改',
                            'zhenzamrfz_rewrite_info': '①锁定技，游戏开始时你获得一个‘壁’标记；当有角色获得‘壁’标记时，若其没有护甲，其获得一点护甲；每轮各限两次，每名角色的准备阶段或有其他角色因你造成的伤害而进入濒死状态时，若你没有‘壁’标记，你获得一个‘壁’标记。②有‘壁’标记的角色受到伤害后，若其因此伤害触发过护甲且没有护甲，其可以随机获得攻击范围内一名其他角色的两张牌并对其造成一点伤害。',
                            yinbimrfz: '荫蔽',
                            'yinbimrfz_info': '每轮限一次，出牌阶段，你可以令至多两名没有‘壁’标记的角色各获得一个‘壁’标记，以此法获得的‘壁’标记和护甲最多持续一轮。',
                            liuliemrfz: '琉裂',
                            'liuliemrfz_info': '出牌阶段开始时，你可以修改【缜匝②】的描述直到本轮结束，然后你本轮【荫蔽】失效。',
                            gongzhenmrfz: '共振',
                            'gongzhenmrfz_info': '锁定技，出牌阶段，当你使用或打出非转换且非虚拟牌后，若你的手牌中没有与你使用或打出的牌花色相同的牌时，你摸一张牌，反之你弃置一张手牌。',
                            mengxiangmrfz: '梦想',
                            'mengxiangmrfz_info': '锁定技，出牌阶段限X次，你使用或打出的下一张牌无距离和次数限制。(X=本回合你因【共振】而摸牌的次数/2，向下取整)',
                            paizhangmrfz: '排障',
                            'paizhangmrfz_info': '①当你因【共振】弃置的牌进入弃牌堆后，你可以将此牌交给一名其他角色，[当该角色使用此牌/使用牌指定你为目标后]，[若此牌/因【共振】获得的牌的]点数大于8、没有点数或牌的数量大于1，其受到一点伤害，反之，其须弃置此牌点数除以3(向下取整)张牌，然后其使用的此牌无效，若该角色手牌中有你交给其的牌，将其置入弃牌堆，若其上家或下家手牌中有因【排障①】而获得的牌，其弃置因【排障①】而获得的牌，然后若其因【共振】获得的牌的点数大于8、没有点数或因【共振】获得的牌的数量大于1，受到一点伤害，反之，其须弃置此牌点数除以3(向下取整)张牌。②锁定技，其他角色不能弃置你因【排障①】交给其的牌。',
                            tiexianmrfz: '铁弦',
                            'tiexianmrfz_info': '锁定技，当你受到伤害后，若你的护甲因此减少，你摸三张牌；当你没有护甲时，你摸牌阶段摸牌数和手牌上限+1。',
                            lieshimrfz: '猎矢',
                            'lieshimrfz_info': '每回合限三次，当你使用【杀】指定唯一目标时，你可以弃置一张牌并视为对该角色距离为1的其他角色使用一张【杀】。',
                            guirenmrfz: '鬼人',
                            'guirenmrfz_info': '出牌阶段，若你的手牌上限大于0，当你使用【杀】指定目标后，你可以令自己本回合的手牌上限－1，然后令此【杀】的额外结算一次，若如此做，则你于出牌阶段结束时失去【鬼人】并获得【鬼强】。',
                            guiqiangmrfz: '鬼强',
                            'guiqiangmrfz_info': '准备阶段，你可以将手牌补至你的体力上限（至多补至4张），然后你可以弃置一张牌失去【鬼强】并获得【鬼人】。',
                            luanwumrfza: '乱舞',
                            luanwumrfz: '乱舞',
                            'luanwumrfz_info': '①准备阶段，若你拥有【鬼人】，你可以跳过你的判定、摸牌和出牌阶段，然后视为使用一张结算三次的【杀】，然后你下次受到的伤害+1（此效果不叠加）。②锁定技，出牌阶段开始时，你获得【鬼人】，然后失去【乱舞②】。',
                            yingzhimrfz: '影织',
                            'yingzhimrfz_info': '每名角色每项每轮限一次，①当你使用一张单一目标的非延时锦囊牌指定目标后，你可以令其下一个摸牌阶段摸牌数-1，你的摸牌阶段摸牌数+1（至多+2）；②当一名其他角色响应你使用或打出的牌时，你可以令其下一回合手牌上限－1，你的手牌上限+1（至多+3）；③当一名角色因你造成的伤害而进入濒死状态时，你可以使其下次造成的伤害－1，你下次造成的伤害+1（不可叠加）；④当你使用或打出牌响应一名其他角色的牌时，你可以使其下一个出牌阶段使用【杀】的次数－1，你的下个出牌阶段使用【杀】的次数+1。',
                            yingshaomrfz: '影哨',
                            'yingshaomrfz_info': '①当你脱离濒死状态时，若场上没有‘影哨’标记，你可以令使你进入濒死状态的角色获得一个‘影哨’标记；锁定技，拥有‘影哨’标记的角色手牌上限-1，每回合至多使用1张杀。②锁定技，当你进入濒死状态时，若场上有‘影哨’，你移去‘影哨’标记并对拥有‘影哨’标记的角色造成一点伤害，然后你将体力值回复至2并失去【影哨】。',
                            jingshuimrfz: '净水',
                            'jingshuimrfz_info': '每轮开始时，你可以选择一名其他角色，将你的手牌补至与其一致并将你的手牌上限、攻击距离和使用【杀】的次数调整至与其一致。',
                            kaiyuanmrfz: '源流',
                            'kaiyuanmrfz_info': '锁定技，第一轮游戏开始时，你令一名角色摸两张牌且其本局游戏使用【杀】的次数+1，若该角色为你，你额外摸一张牌。',
                            liuxingmrfz: '流形',
                            'liuxingmrfz_info': '锁定技，每回合限一次，当你受到非雷属性伤害时，若你的手牌不小于你的体力值，取消之。',
                            yiyinmrfz: '倚音',
                            'yiyinmrfz_info': '①蓄力技（1/3），出牌阶段，你可以弃置一张带有伤害类标签的牌，然后增加一点蓄力值。②当你使用【杀】的时，你可以消耗一点蓄力值并令此【杀】的伤害基数+1。',
                            huangxiangmrfz: '荒响',
                            huangxiangmrfzx: '残影',
                            'huangxiangmrfz_info': '弃牌阶段结束时，你可以减少一点蓄力值，然后标记一张手牌，此牌称之为‘残影’；当你失去‘残影’或当你受到伤害且手牌中有‘残影’时，你可以选择一项：①增加一点蓄力值并摸一张牌，若你手牌中没有‘残影’，你可以消耗一点蓄力值并将一张牌标记为‘残影’；②对上一名对你使用过牌的其他角色造成一点伤害。',
                            jiyinmrfz: '寂音',
                            'jiyinmrfz_info': '出牌阶段开始时，若你的蓄力值不为0，你可以令你本回合使用的单一目标的【杀】需要X张【闪】才可抵消且伤害基数改为Y，然后你本回合获得如下效果：①每当你使用的【杀】造成一点伤害时，你失去一点蓄力值；②你使用的【杀】只能指定满足下列条件中的任意个的角色：1.体力值最大或之一；2.手牌数最多或之一；3.装备区牌最多或之一，若均满足，则Y改为目标角色的体力值；③【倚音②】失效。（X=你使用【杀】的目标的体力值；Y=你使用【杀】的目标的体力值-1和你的蓄力值两者的最小值，Y至少为1）',
                            yanmomrfz: '炎魔',
                            'yanmomrfz_info': '①锁定技，你的攻击距离+2，你使用牌仅能指定你攻击范围内的角色；你的回合开始时，你选择一项：1.本回合你对其他角色使用牌只能指定本轮已进行回合的其他角色;2.本回合你对其他角色使用牌只能指定本轮未进行回合的其他角色。②你使用的非延时锦囊牌或基本牌可以增加你攻击范围内的所有的合法角色为目标。',
                            yanbaomrfz: '炎爆',
                            'yanbaomrfz_info': '每轮每名角色限一次，当你对一名其他角色造成伤害时，你可以令该角色本轮内下次受到【杀】的伤害+1（效果不可叠加）。',
                            huishenmrfz: '毁神',
                            'huishenmrfz_info': '出牌阶段限一次，当你使用的牌指定其他角色为目标时，你可以令成为此牌目标的角色选择令你摸一张牌或弃置一张手牌。',
                            dizhumrfz: '砥柱',
                            dizhumrfzx: '夜灯',
                            'dizhumrfz_info': '出牌阶段开始时，你可以选择至多两名角色，然后其获得一个“夜灯”标记直到你的下个回合开始；锁定技，拥有“夜灯”标记的角色受到伤害时，此伤害-1，若此伤害数不小于其体力值，则改为防止此次伤害，然后移除‘夜灯’标记。',
                            renbenmrfz: '人本',
                            renbenmrfz2: '人本',
                            renbenmrfz3: '人本',
                            'renbenmrfz_info': '锁定技，每轮开始时，每名角色各声明一张基本牌或普通锦囊牌，全部角色声明完毕后，你选择一张被声明最多或之一的牌，然后其他角色依次选择本轮内其是否不可弃置且不可使用或打出与声明的牌牌名相同的牌，选择‘是’的角色出牌阶段可以交给你与被声明的牌牌名相同的牌并摸一张牌，选择‘否’的角色本轮的攻击范围-X（X=本次选择‘是’的角色的数量）；你手牌中的与本次被声明的牌牌名相同的牌不计入手牌上限、不可弃置且不可使用或打出。',
                            fuyuanmrfz: '复元',
                            'fuyuanmrfz_info': '锁定技，当一名其他角色因你回复体力时，其摸一张牌。',
                            gaihuamrfz: '钙化',
                            'gaihuamrfz_info': '当你攻击范围内有其他角色受到属性伤害时，你可以弃置一张与造成伤害的牌类型不同的牌，然后此伤害+1。',
                            yaopeimrfz: '药配',
                            'yaopeimrfz_info': '出牌阶段限一次，若你本阶段还剩余使用【杀】的次数，你可以弃置一张牌并使你本回合使用【杀】的次数-1，然后选择以下一个选项：①选择一名与你距离为1点角色，令其回复一点体力，若其已损失的体力值大于等于3，额外为其回复一点体力；②令在你攻击范围内的角色各回复一点体力。',
                            zhuohenmrfz: '灼痕',
                            'zhuohenmrfz_info': '①每名角色每回合限一次，当你使用牌指定一名其他角色为目标后，你可以使其获得一个‘灼痕’标记（每名角色最多拥有一个‘灼痕’标记）并令其弃置一张手牌。②锁定技，拥有‘灼痕’标记的角色获得如下效果：手牌上限-1，受到伤害时需弃置一张手牌，回合结束时移除‘灼痕’标记；你的手牌上限+X；有‘灼痕’的角色回合开始时，若你的手牌数不是全场最多或之一，你摸一张牌。（X=场上有的‘灼痕’标记数）',
                            yingyaomrfz: '映耀',
                            'yingyaomrfz_info': '每轮限X次，当你对其他角色造成伤害后，你可以选择你攻击范围内的角色或者你，然后令其回复一点体力，若该角色为你，你摸一张牌。（X=场上的‘灼痕’标记数）',
                            minghuomrfz: '命火',
                            'minghuomrfz_info': '准备阶段，你可以选择获得一个效果直到你的下个准备阶段：①每回合当你使用的第一张单一目标的普通锦囊或【杀】选择目标后，你可以额外指定一个目标；②当有‘灼痕’标记的角色进入濒死状态时，你可以令其上家或下家（不能是你）获得一个‘灼痕’标记，然后其弃置一张手牌。',
                            kuangyumrfz: '狂语',
                            'kuangyumrfz_info': '每回合每名角色限一次，当你使用单一目标的普通锦囊牌或【杀】指定其他角色为目标后，若该角色没有‘风起’标志，你可以使其获得一个“风起”标记（持续到其回合结束），且令其下回合随机跳过两个阶段，若该角色在你的攻击范围内，其于此牌结算完成之前，你对有‘风起’标记的角色造成的伤害+1，然后若对其造成了伤害，你修改【狂语】直到下一轮开始。',
                            kuangyumrfz_rewirte: '修改·狂语',
                            'kuangyumrfz_rewirte_info': '每回合每名角色限一次，当你使用单一目标的锦囊牌指定其他角色为目标后，若该角色没有‘风起’标志，你可以使其获得一个“风起”标记（持续到其回合结束），且令其下回合随机跳过两个阶段，若该角色在你的攻击范围内，其于此牌结算完成之前，你对有‘风起’标记的角色造成的伤害+1。',
                            chuangzhongmrfz: '传终',
                            'chuangzhongmrfz_info': '锁定技，当你使用的牌指定目标后，若该角色有‘风起’标志，则其本回合所有非锁定技失效；拥有‘风起’标记的角色手牌上限为-X（X=其体力值）。',
                            jihumrfz: "棘护",
                            'jihumrfz_info': '准备阶段，你可以令本回合不能对其他角色使用牌，直到你下一个回合开始，你获得以下效果：每回合限一次，当你成为其他角色的基本或者非延时锦囊牌的目标后，你可以视为对该角色或与你距离为1的角色使用相同牌名的牌。',
                            re_jianshumrfz: '剑术',
                            're_jianshumrfz_info': "锁定技，每当你使用的牌指定的目标数累计达到10的整数倍时，你依次获得以下效果：①摸牌阶段摸牌数、【杀】的使用次数和攻击距离各+1，出牌阶段开始时，你可以视为使用一张【杀】（不计入次数）②【杀】的使用次数和攻击距离各+1，失去【棘护】并获得【潮声】。",
                            re_chaoshengmrfz: '潮声',
                            're_chaoshengmrfz_info': '结束阶段，若你本回合没有造成过伤害，你可以摸两张牌并恢复一点体力。',
                            yanxunmrfz: '严训',
                            'yanxunmrfz_info': '①锁定技，你的手牌上限+2；你因【铁锁连环】传导而受到伤害时，此伤害-1；当你于判定阶段受到伤害时，此伤害-2；每轮开始时，若你被横置，取消之。②[弃牌阶段/出牌阶段]开始时，若你的[出牌阶段/摸牌阶段]被跳过,你可以[至多使用两张手牌/摸一张牌];每轮开始时，若武将背面朝上，你可以翻面，然后你跳过你的出牌阶段。',
                            chuchanmrfz: '除颤',
                            'chuchanmrfz_info': '锁定技，限定技，当你体力值发生变化后，若你的体力值小于2，你将体力值恢复至两点且本轮当你受到伤害后你回复一点体力。',
                            feixuemrfz: '沸血',
                            'feixuemrfz_info': '每当你受到一点伤害或流失一点体力后，你可以从牌堆中获得一张火属性的【杀】（没有则改为摸一张牌），若有伤害来源且伤害来源装备区有牌，你可以弃置伤害来源一张装备区的牌，然后你下回合使用【杀】的次数+1。',
                            hualaomrfz: '画牢',
                            'hualaomrfz_info': '当你对其他角色造成伤害时，你可以令此伤害-X，然后其下次受到的伤害+X+1。（X=此次造成的伤害数）',
                            huhuomrfz: '狐火',
                            huhuomrfz2: '狐火',
                            'huhuomrfz_info': '当你造成伤害后，若此次造成的伤害为0，你可以令受伤角色获得以下效果直到其回合结束（效果可叠加）：摸牌阶段摸牌数-1；出牌阶段结束时摸一张牌。',
                            wuyuemrfz: '舞乐',
                            'wuyuemrfz_info': '锁定技，你红色的【杀】目标+1，黑色的【杀】无距离限制。',
                            lichangmrfz: '力场',
                            'lichangmrfz_info': '①出牌阶段每一名角色限一次，你可以选择一名角色，你将一张牌置于其武将牌上，称为“屏障”，然后其获得一点护盾值（至多为5），若此牌为装备牌，其额外获得一点护盾值（至多为5）；锁定技，有‘屏障’的角色受到后，若其护盾减少了，其获得其武将牌上的所有‘屏障’牌。②蓄力技（0/3），锁定技，场上的‘屏障’减少时，此技能增加一点蓄力值；一名角色回合开始时，若你有至少3点蓄力值，你可以消耗所有蓄力值并选择至多三名其他角色，然后被你选定的角色各从牌堆或弃牌堆中获得一张装备牌，其可以将此牌交给你并回复一点体力，否则其使用之。',
                            yubimrfz: '御庇',//ubisoft（划掉）ubishit
                            'yubimrfz_info': '锁定技，场上所有角色的手牌上限+X。（X为其的护盾值，X至多为5）',
                            jiushumrfz: '救赎',
                            'jiushumrfz_info': '一名角色的准备或者判定阶段，你可以将你的任意一张黑色牌当做【无懈可击】使用。',
                            kanchamrfz: '勘查',
                            'kanchamrfz_info': '出牌阶段限一次，你可以弃置一张手牌，然后你展示牌堆顶或牌堆底的X+3张牌，获得与你弃置的牌类别不同的牌。（X=你发动此技能的次数，X至多为3）',
                            longtengmrfz: '龙腾',
                            'longtengmrfz_info': '①当你不在弃牌阶段因弃置而失去牌时，你可以将其中一张牌置于一名武将牌上没有“龙腾”角色的武将牌上，此牌称之为“龙腾”；拥有“龙腾”的角色根据“龙腾”牌的类型获得对应的效果：</br>1.基本牌：锁定技，摸牌阶段摸牌数-1，出牌阶段结束时摸一张牌。</br>2.锦囊牌：当你使用一张单一目标的普通锦囊牌时，你可以令此牌的目标+1，若此牌带有伤害标签，你可以令此牌造成的伤害+1，然后本回合此技能失效。</br>3.装备牌：当你使用一张基本牌选择目标后，你可以令此牌的目标+2、伤害基数+1或此牌不计入使用次数。</br>②锁定技，你的准备阶段或你死亡时，你移除全场所有的“龙腾”。',
                            quanshanmrfz: '劝善',
                            'quanshanmrfz_info': '①每名其他角色的回合结束时，若该角色没有手牌，你可以令其将手牌补至体力上限（至多补至3张），然后其直到其回合结束阶段，其造成伤害后，获得一个‘恶’标记。②锁定技，有‘恶’标记角色的回合结束阶段，其移除其所有的‘恶’标记；拥有‘恶’标记的角色获得如下效果：1.手牌上限-X；2.出牌阶段，若你的手牌上限为0，你立刻结束出牌阶段。（X=你的‘恶’标记数量）',
                            chuemrfz: '除恶',
                            'chuemrfz_info': '出牌阶段限一次，你可以依次观看你攻击范围内或有‘恶’标记的至多两名其他角色的手牌，若其中有红色的牌，你可以选择弃置其手牌中所有♣或♠牌并令你摸等量的牌，反之，你可以弃置其所有手牌，然后若其没有‘恶’标记，你对其发动一次【劝善】，反之你移除其所有的‘恶’标记并对其造成等量的伤害。',
                            xuebianmrfz: '雪变',
                            'xuebianmrfz_info': '出牌阶段限一次，你可以至多选择两名其他角色，然后你与其各展示至多三张手牌，若展示牌的颜色中红色最多，你可以选择对其中一名角色造成一点伤害并令其弃置其展示的牌，反之，所有人各弃置自己展示的牌。',
                            tonghemrfz: '统合',
                            'tonghemrfz_info': '觉醒技，准备阶段，若你因【雪变】造成的伤害不少于2或游戏轮数大于2，你减少一点体力上限、失去【雪变】并获得【鹰视】和【兴邦】，然后将体力调整至体力上限。',
                            xinyingshimrfz: '鹰视',
                            'xinyingshimrfz_info': '出牌阶段限一次，你可以观看攻击范围内一名其他角色的手牌并弃置其中的X+1张牌。（X=你因【雪变】造成的伤害数）',
                            xinbangmrfz: '兴邦',
                            'xinbangmrfz_info': '摸牌阶段开始时，你可以少摸任意张牌并选择等量名的其他角色，令其选择让你从牌堆中获得一张一种类型的牌，然后你本回合使用这张牌造成伤害时，你与其各摸一张牌。',
                            new_xinbangmrfz: '兴邦',
                            'new_xinbangmrfz_info': '出牌阶段，当你使用的牌结算完毕后，若你是于此阶段第一次使用此种类型的牌，你可以摸一张牌，若你手牌中没有与你摸的牌的花色相同的牌，你摸一张牌。',
                            yingzhumrfz: '英祝',
                            'yingzhumrfz_info': '①回合开始时，你可以选择令自己在任一阶段结束后额外执行一次此阶段。②每轮开始时，你可以选择一名其他角色，然后你选择令其在任一阶段结束后额外执行一次此阶段，若此做，本轮【英祝①】失效。',
                            yingdanmrfz: '英诞',
                            'yingdanmrfz_info': '任意角色回合结束时，你可以令其摸X-6张牌。(X=其本回合执行的阶段数)',
                            yingfenmrfz: '英奋',
                            'yingfenmrfz_info': '每轮限一次，当你使用【桃】时，你可以令一名其他角色恢复一点体力。',
                            huiguangmrfz: '辉光',
                            'huiguangmrfz_info': '回合结束时，你可以令一名其他角色（不能是已经拥有此技能效果的角色）跳过其下个回合的第X个阶段。(X=本回合你使用的牌的数量)',
                            rencimrfz: '仁慈',
                            'rencimrfz_info': '一名其他角色的结束阶段开始时，若其本回合跳过了任一阶段，你可以对其使用一张【杀】，此杀造成的伤害+1。',
                            jiandunmrfz: '剑盾',
                            'jiandunmrfz_info': '你可以将锦囊牌当任意基本牌使用或打出。',
                            xinboremrfz: '般若',
                            'xinboremrfz_info': '①锁定技，游戏开始时，你选择一名其他角色，其获得“般若”标记，然后你与其废除各自的防具栏并且手牌上限+1。</br>②当有“般若”标记的角色成为非装备牌的唯一目标时，你可以令你的手牌上限-1，然后你成为此牌的目标。</br>③每回合每项限一次，你可以令你的手牌上限-1或废除一个装备栏，视为使用一张：1.【无懈可击】；2.【闪】；3.【杀】（不计入使用次数）。',
                            xinyizhongmrfz: '义重',
                            'xinyizhongmrfz_info': '①锁定技，准备阶段，若你的手牌上限不小于你的当前体力值，你的手牌上限+X。（X=你没有被废除的装备栏数-1）</br>②锁定技，当你受到来自于有“般若”标记的角色的伤害后，你失去【般若】。',
                            amy_qingyanmrfz: '青焱',
                            'amy_qingyanmrfz_info': '①锁定技，[你使用【杀】的次数+1]，{你每回合使用的第一张【杀】的伤害基数+1}，(你使用的【杀】需要两张【闪】才可抵消)。</br>②出牌阶段结束时，你可以删除【青焱①】中[]、{}或()的内容直到本轮结束，然后令一名其他角色获得你删除的内容的效果直到其回合结束。',
                            yingxiaomrfz: '影霄',
                            'yingxiaomrfz_info': '限定技，准备阶段，若你已经使用了至少5张【杀】，你可以依次使用1张雷【杀】、1张火【杀】和1张伤害基数+2且无视防具的【杀】（目标必须合法），结算完成后，你摸X张牌、手牌上限+X且接下来两轮内，你造成的伤害均为体力流失。（X=你因此技能使用的【杀】造成的伤害数）',
                            yuanliumrfz: '源流',
                            'yuanliumrfz_info': '①锁定技，游戏开始时，你选择一项：1.令一名角色摸2张牌；2.获得一个“流形”。②锁定技，出牌阶段结束时，你获得X个“流形”（至多为3）。（X=出牌阶段你使用牌的类型）③锁定技，你的手牌上限+X。（X=你的“流形”数）',
                            xinjingshuimrfz: '净水',
                            'xinjingshuimrfz_info': '当你于出牌阶段第一次使用非延时锦囊牌或基本牌指定唯一目标后，你可以令此牌额外结算X次，然后你移除你所有的“流形”。（X=你拥有的“流形”数）',
                            shuilingmrfz: '水灵',
                            'shuilingmrfz_info': '锁定技，每回合限一次，若你的手牌不大于你的体力值，你受到的非属性伤害-1。',
                            xinyongwomrfz: '拥我',
                            'xinyongwomrfz_info': '转化技，阳：当你进入濒死状态时，你可以回复至一点体力；阴：当你武将牌从正面朝上至背面朝上时，你可以摸两张牌，然后选择一项：1.弃置你攻击范围内一名其他角色区域内各一张牌；2.对你攻击范围内的一名其他角色造成一点伤害。',
                            douzhenmrfz: '斗争',
                            'douzhenmrfz_info': '其他角色的回合结束阶段，你可以失去所有体力并将武将牌翻面，然后你可以视为对当前回合角色使用一张【杀】。',
                            shensuimrfz: '深邃',
                            'shensuimrfz_info': '锁定技，当你流失至少两点体力后，你获得等量的护甲；每轮开始时，若你的【拥我】为阴，则你转化之',
                            zhongxiemrfz: '重械',
                            'zhongxiemrfz_info': '①锁定技，当你造成伤害时，此伤害+X。（X=受到伤害的角色的护甲值）</br>②锁定技，当你使用的【杀】指定目标后，若此杀的点数不小于其手牌数，此杀不可被【闪】响应；你使用的【杀】无视防具。</br>③锁定技，你的攻击距离+2。',
                            rusuimrfz: '入髓',
                            'rusuimrfz_info': '当你使用【杀】对一名其他角色造成伤害时，每满足下列一项你可令该角色弃置一张牌，若全部满足，则此【杀】伤害+1：</br>1.手牌数不小于体力值；</br>2.已损失体力不大于其体力值：</br>3.装备栏有牌。',
                            mianzaimrfz: '免灾',
                            'mianzaimrfz_info': '锁定技，当你进入濒死阶段时，你展示牌堆顶6张牌，若其点数之和不大于你累计使用的牌的点数之和，你将体力回复至3点，手牌补至3张，然后重置你累计使用的牌的点数之和。',
                            zhijinmrfz: '掷金',
                            'zhijinmrfz_info': '①锁定技，当你使用的牌与你上一张花色相同或每轮开始时，你获得一个“钱”。②出牌阶段，你可以移除与选项数字相同的“钱”将一张牌按照下述规则当作一张牌使用：1.：火【杀】；2.：决斗；3.：无中生有；4.：桃；5.万箭齐发。若你因此移除了所有的“钱”，你摸一张牌。',
                            chongdanmrfz: '铳弹',
                            'chongdanmrfz_info': '锁定技，每轮你至多能使用2X张牌；每轮每项限一次你第一次[造成/受到]伤害后，你摸等同于你体力值张牌或回复等同你手牌数点体力。（X=你的体力上限）',
                            tianxuanmrfz: '天选',
                            'tianxuanmrfz_info': '出牌阶段，每当你使用一张带有伤害类标签的牌时，你可以进行一次判定，若为[红桃]，此牌结算两次，然后你删除[]中的描述，反之你在[]内增加一种花色。',
                            shengcaimrfz: '圣裁',
                            'shengcaimrfz_info': '①出牌阶段限一次，当你使用一张带有伤害类标签的牌选择目标后，若你本回合使用过带有伤害类标签的牌，你可以令该牌的造成的伤害+1。</br>②回合结束时，你可以对本回合受到过伤害的角色造成一点伤害。',
                            dianyongmrfz: '电涌',
                            fuxiemrfzx: '浮标',
                            'dianyongmrfz_info': '出牌阶段开始时，若场上有四个“浮标”，你可以移除所有的“浮标”，然后将等量依次个“浮标”分配给任意名角色，然后你获得以下效果直到回合结束：1.当你使用【杀】或单一目标的非延时锦囊牌（【无中生有】除外）选择目标后，你可以令任意名有“浮标”的角色成为此牌的目标，然后若此牌是【杀】，则你移除场上的一个“浮标”标记；2.你对有“浮标”的角色使用【杀】无次数限制。',
                            fuxiemrfz: '浮械',
                            'fuxiemrfz_info': '①锁定技，游戏开始时，你获得两个“浮标”；你的手牌上限+X。（X=你的“浮标”数）；你对有‘浮标’的角色使用牌无距离限制；你对有“浮标”的其他角色造成的伤害均视为雷属性伤害。</br>②出牌阶段，当一名其他角色成为你使用牌的唯一目标时，你可以失去一个“浮标”并令其获得一个“浮标”。</br>③出牌阶段，若场上“浮标”总数不超过3，你可以弃置一张♦的牌，然后获得一个“浮标”。',
                            shizhunmrfz: '失准',
                            'shizhunmrfz_info': '锁定技，其他角色准备阶段，若其有“浮标”，则其进行判定，若判定结果为黑，则你对其造成一点雷电伤害，然后其失去一个“浮标”，反之，你获得判定牌。',
                            yijiemrfz: '义劫',
                            'yijiemrfz_info': '出牌阶段限一次，你可以先选择一名其他角色，称为A，再选择至多两名不为A的其他角色，后选择的角色和你称为B，然后B可以对A使用一张【杀】（不计入次数限制），若A因此受到过伤害，B获得A一张牌（A没有牌则改为对其造成一点伤害）。',
                            fuhuangmrfz: '赴荒',
                            'fuhuangmrfz_info': '觉醒技，当你获得牌后，若你不因摸牌阶段的额定摸牌而获得了至少2张牌，你失去【义劫】，获得【卫护】和【拓荒】，然后摸两张牌、获得1点护甲和失去一点体力上限。',
                            tuohuangmrfz: '拓荒',
                            'tuohuangmrfz_info': '出牌阶段限一次，你可以选择至多3名角色，展示牌堆顶4-你选择的角色数张牌，然后被选择的角色可以弃置任意张与其花色相同的手牌并摸等量+1张牌。',
                            weihumrfz: '卫护',
                            'weihumrfz_info': '①锁定技，每轮开始时，若你没有护甲，你获得一点护甲；当你有护甲时，手牌上限+1。②出牌阶段结束时，你可以失去至少一点护甲，然后令等量+1名没有护甲的其他角色获得一点护甲。',
                            ruiyamrfz: '锐牙',
                            'ruiyamrfz_info': '当一名其他角色成为你使用的【杀】的唯一目标后，若其是你上次使用【杀】的唯一目标，你可以令此杀伤害+1。',
                            shouliemrfz: '狩猎',
                            'shouliemrfz_info': '①出牌阶段，你可以将任意张带有伤害标签的牌置于你的武将牌上，称之为“矢”（至多为3）；每回合限一次，你可以将“矢”当做刺【杀】使用或打出。</br>②准备阶段，你可以跳过本回合的出牌阶段和弃牌阶段并选择一名其他角色，然后直到你下个回合开始阶段：其他角色的回合结束阶段，你可以对你选择的角色使用一张【杀】。',
                            jifengmrfz: '极锋',
                            'jifengmrfz_info': '当你使用【杀】选择唯一目标后，你可以执行所有符合条件的选项：1.若其防具栏不为空，你无视其防具；2.若其有护甲值，你无视此护甲；3.若其有手牌，此【杀】须要两张【闪】才可抵消，然后若你本回没有使用过此技能，你摸X张牌。（X=未执行的选项数）',
                            xiqiaomrfz: '细巧',
                            'xiqiaomrfz_info': '每回合限一次，当你需要使用或打出【闪】时，你可以弃置一张牌，然后摸一张牌并展示之，若与你弃置的牌类别不同，视为你使用或打出了一张【闪】。',
                            tianyimrfz: '天仪',
                            'tianyimrfz_info': '转换技，一名角色的判定阶段，你可以，阳：观看牌堆顶两张牌，并将其置于牌堆顶或牌堆底；阴：进行一次判定，并获得判定牌，本回合此牌视为【闪】，若判定结果为♣，你本局游戏使用【杀】的次数+1（至多+3）。',
                            huijianmrfz: '辉剑',
                            'huijianmrfz_info': '出牌阶段限一次，当你使用单一目标的基本和普通锦囊牌选择目标后，若【天仪】状态为阴，你可以令此牌额外指定任意名（至多为你本回合剩余使用【杀】的次数）其他角色为目标（目标必须合法），然后你本阶段减少等量使用【杀】的次数。',
                            bingmingmrfz: '病鸣',
                            'bingmingmrfz_info': '锁定技，第二轮开始时，若场上有星源，你将手牌和手牌上限调整至与其一致。',
                            daoliumrfz: '导流',
                            'daoliumrfz_info': '出牌阶段限两次，你可以选择一名其他角色并交给其一张牌，其须分别交给其上家和下家（你除外）各一张牌，然后因此获得牌的角色均须弃置一张牌。',
                            gewumrfz: '格物',
                            'gewumrfz_info': '锁定技，每当其他角色获得你的牌后，你的手牌上限+1（至多为5），然后你记录此牌的牌名（每种牌名的牌仅记录一次）；每当你【格物】记录的牌名的牌的数量是[2/4]的整数倍时，[你摸一张牌/你的摸牌阶段额定摸牌数+1]。',
                            zhanjumrfz: '盏菊',
                            'zhanjumrfz_info': '当有角色处于濒死状态时，你可以将所有手牌当做【桃】对其使用，若其脱离濒死状态，你可以重铸你区域内的一张牌。',
                            zhuhuomrfz: '烛火',
                            'zhuhuomrfz_info': '①出牌阶段限一次，你可以重铸一张牌。</br>②当你因重铸而失去牌后，你可以令至多X名角色摸一张牌，或令你摸X（至多为5）张牌并失去此技能直到本阶段结束。（X=此牌牌名的字数）',
                            yunjiaomrfz: '韵脚',
                            'yunjiaomrfz_info': '锁定技，出牌阶段，当你使用牌时，若此牌的牌名与你本局游戏使用的上一张牌的牌名押韵，你重置武将牌上的技能。',
                            jiqiangmrfz: '机枪',
                            'jiqiangmrfz_info': '锁定技，游戏开始时，你将【DP27】置入你的装备区；准备阶段，若你装备区没有【DP27】，你将【DP27】置入你的装备区',
                            qingxiemrfz: '倾泻',
                            'qingxiemrfz_info': '摸牌阶段结束后，若你的出牌阶段将不会被跳过，你可以选择攻击范围内的一名其他角色，然后你进行三次判定，你对其使用等同于判定结果为红色的次数张【杀】（不计入次数限制），若你因此使用了至少两张【杀】，你跳过出牌阶段。',
                            shandunmrfz: '闪盾',
                            'shandunmrfz_info': '锁定技，若你于本轮[有/没有]执行过回合，其他角色与你和你与其他角色计算的距离[-1/+1]。',
                            xuanmumrfz: '炫目',
                            'xuanmumrfz_info': '每轮限四次，当你使用单一目标的基本牌或普通锦囊牌选择了其他角色为目标后，且你与其的距离不大于1，你可以展示其一张手牌，若其展示的牌不能响应你对其使用的牌，则其不能响应此牌且你获得其一张手牌。',
                            chuandunmrfz: '穿盾',
                            'chuandunmrfz_info': '锁定技，当你受到伤害后，你摸一张牌并展示之，若此牌的花色和点数为♠6或♥6，你失去<span style="text-decoration:line-through">1145141919810点</span>所有体力。',
                            chuandunmrfz_append: 'THX,Ubi',
                            tadianmrfz: '踏垫',
                            'tadianmrfz_info': '①锁定技，每轮开始时，你摸三张牌并获得场上所有的‘踏垫’，然后将三张手牌置于你的武将牌（其他角色不可见）上，称之为‘踏垫’。②当你成为其他角色使用牌的目标后，你可以弃置一张与其使用的牌的牌名相同的‘踏垫’并摸三张牌，然后其流失所有体力，其脱离濒死状态后回复一点体力。',
                            xinjimrfz: '心机',
                            'xinjimrfz_info': '准备阶段，你可以用任意数量的手牌交换‘踏垫’。',
                            lvmengmrfz: '旅梦',
                            'lvmengmrfz_info': '锁定技，每轮开始时，你可以将基本牌、锦囊牌和装备牌分配给对应的标签；你使用对应标签的牌获得对应标签的效果。</br>北风：每阶段限四次，从牌堆中获得一张你手牌中没有的花色</br>种子：此牌结算完毕后你可以将其交给一名其他角色</br>皮毛：不可被其他角色响应',
                            rechenmrfz: '热忱',
                            'rechenmrfz_info': '锁定技，出牌阶段，当你使用的牌和你本回合上一张使用的牌的花色相同，则此牌无次数且无距离限制。',
                            qinmingmrfz: '琴鸣',
                            'qinmingmrfz_info': '出牌阶段限一次，你可以令一名其他角色重铸所有手牌，然后其展示所有手牌并须使用所有手牌（必须合法）。',
                            kongwomrfz: '空我',
                            'kongwomrfz_info': '锁定技，当你摸牌时，改为从弃牌堆中随机获得等量的牌；出牌阶段，当其他角色因使用而失去牌时，若此牌不是装备牌且你本阶段没有以此法获得过相同牌名的牌，你获得其中至少一张牌。',
                            shehunmrfz: '摄魂',
                            'shehunmrfz_info': '锁定技，你使用【杀】的次数+X。（X=你本局游戏造成伤害的数量，X至多为5）',
                            yirenmrfz: '异刃',
                            'yirenmrfz_info': '蓄力技（1/15）。①锁定技，回合结束时，你增加X点蓄力值。（X=本回合出牌阶段剩余使用【杀】的次数）②出牌阶段，你可以消耗[ 1 ]点蓄力值，弃置两张手牌并选择至多两名其他角色，视为你对其各使用一张【杀】（目标必须合法且不计入次数限制）且其下个回合使用【杀】的次数-1，然后令[ ]中的数字+1（至多为5）。',
                            jinaomrfz: '机脑',
                            'jinaomrfz_info': '锁定技。</br>①在一个回合内，当使用第二张牌后，若第二张牌的点数大于第一张牌的点数，则你本回合使用的牌的点数必须为 { 递增 } ，反之为 { 递减 } ，然后本回合当你使用手牌中点数[最大/最小]或之一的牌后，你调换两处{}内的描述并摸一张牌；每名角色的回合结束时，你将【机脑】的描述恢复至游戏开始时的描述。</br>②当你使用一张[黑色/红色]牌后，若此牌与你本回合上一张使用的牌颜色相同，你[本回合手牌上限+1/摸两张牌]。',
                            wutaimrfz: '五肽',
                            'wutaimrfz_info': '结束阶段，你可以弃置两张颜色或类型不同的手牌，然后令一名角色每回合第一次受到的伤害-1直到你的下个回合开始。',
                            zhengrongmrfz: '征戎',
                            'zhengrongmrfz_info': "①每<span id='clickableText' style='color:blue; cursor:pointer; text-decoration: underline;' onclick='mrfzfuc.showDiv(1)'>回合轮</span>每项限一次，当你或与你距离不大于1的其他角色受到伤害后，你可以选择并在本<span id='clickableText' style='color:blue; cursor:pointer; text-decoration: underline;' onclick='mrfzfuc.showDiv(1)'>回合轮</span>删除一项，然后其回复一点体力：1.体力上限-1；2.弃置一张牌；3.下个摸牌阶段摸牌数-1。</br>②你的回合开始时，若【征戎①】所有选项均被删除，你可以将手牌补至体力上限。",
                            siyanmrfz: '死烟',
                            'siyanmrfz_info': "出牌阶段，当你使用【杀】选择唯一目标后，若该角色上<span id='clickableText' style='color:blue; cursor:pointer; text-decoration: underline;' onclick='mrfzfuc.showDiv(1)'>回合轮</span>对你造成过伤害或你本回合对其造成过伤害，你可以流失一点体力，令其流失一点体力并选择一项：1.无法响应此【杀】；2.弃置两张手牌，然后若此牌造成了伤害且此牌花色为♦，你回复一点体力。",
                            kuxiumrfz: '苦修',
                            'kuxiumrfz_info': '①出牌阶段，你可以将一张牌当做任意延时锦囊牌置入你的判定区，然后摸X张牌。②锁定技，你使用【杀】的次数+X。（X=你判定区牌的数量+1）',
                            lirenmrfz: '砺刃',
                            'lirenmrfz_info': '准备阶段，你可以弃置你判定区的所有牌，然后流失一点体力。',
                            huabumrfz:'花卜',
                            'huabumrfz_info':'其他角色出牌阶段限一次，其可以令你摸一张牌，然后你猜测其手牌中是否有与此牌类型相同的牌，若你猜测正确，你与其各摸一张牌，反之你弃置一张牌。',
                            shixinmrfz:'识心',
                            'shixinmrfz_info':'每回合限一次，当你于回合外获得牌后，你可以观看当前回合角色的手牌。',
                            qunlangmrfz:'群狼',
                            'qunlangmrfz_info':'隐匿技，当你登场时，你可以对你攻击范围内的一名其他角色造成一点伤害。',
                            cigumrfz:'刺骨',
                            'cigumrfz_info':'①锁定技，你的非属性【杀】均视为刺【杀】。</br>②当其他角色响应你使用的牌后，你可以获得其响应的牌。',
                            qingchumrfz:'清处',
                            'qingchumrfz_info':'你的回合外，你获得如下效果：</br>1.你可以将【闪】当【杀】，【杀】当【闪】使用或打出;</br>2.当你使用或打出【杀】后，你可以弃置当前回合角色的一张牌，若此牌与你使用或打出的【杀】花色相同，你重复这个流程。',
                            
                            //剧情角色技能
                            xingtumrfz: '星途',
                            'xingtumrfz_info': '出牌阶段限一次，你可以与至多三名其他角色各重铸一张牌，然后若重铸的牌颜色均相同且你至少选择了一名其他角色，则你们各选择一项（所有角色整局游戏中每项只能选择一次）：1.手牌上限+1；2.摸牌阶段摸牌数+1；3.使用【杀】的次数+1；4.将体力和手牌补至体力上限。',
                            jiexiangmrfz: '揭相',
                            'jiexiangmrfz_info': '锁定技，当你死亡后，你摸X张牌并将你的牌依次分配给其他角色（每名角色至少分配一张牌），然后全场体力上限+1并回复一点体力。（X=你本局游戏因重铸获得的牌，X至少为存活角色数）',
                            poqiongmrfz: '破穹',
                            'poqiongmrfz_info': '限定技，出牌阶段，你可以展示自己未以此法展示过的牌和弃置并展示牌堆顶的一张牌，若你展示的牌的点数更小，则你失去一点体力上限，你循环6次这个流程，若你展示的牌的点数大的次数多于牌堆展示牌的次数，你获得所有以此法展示的牌、增加3点体力上限、失去【星途】、获得【揭相】和【星游】。',
                            poqiongmrfz_append: '<span style="font-family: yuanli">"如若此后百年千年，来人漫步于繁星身侧，人们便要称颂她的名。"</span>',
                            xingyoumrfz: '星游',
                            'xingyoumrfz_info': '①锁定技，每轮开始时，[其他角色/你]计算与[你/其他角色]的距离+1，若你不在任何一个其他角色的攻击范围内，你失去一点体力上限。②出牌阶段每种花色的牌限一次，你可以重铸一张牌。',
                            shouwangmrfz: '守望',
                            shouwangmrfz2: '保存',
                            'shouwangmrfz_info': '①锁定技，游戏开始时，你选择一名其他角色，然后其获得一个‘保存’标记；当你进入濒死状态时，你将体力恢复至一点；当有‘保存’标记的角色死亡时，你失去所有的体力上限。②当你不因【守望②】摸牌时，你可以令拥有‘保存’标记的角色摸一张牌；当拥有‘保存’标记的角色不因【守望②】摸牌的时，其可以令你摸一张牌。',
                            jingmomrfz: '静默',
                            'jingmomrfz_info': '锁定技，你的手牌上限视为5；每轮开始时，你失去一点体力上限。',
                            xijimrfz: '希冀',
                            'xijimrfz_info': '①出牌阶段，若你的体力上限不大于5，你可以失去所有体力上限并摸X张牌（X=你的体力上限的一半，向下取整，X∈[1,3]）。②当你死亡时，你可以将你区域内所有的牌交给一名其他角色，你每交给其一张牌，其下个回合使用【杀】的次数和攻击距离便+1。',
                            sizhanmrfz: "死战",
                            "sizhanmrfz_info": "限定技，锁定技，当你死亡时，你于主公回合结束时复活且插入一个回合且此回合你获得如下效果：①你的伤害基数改为2；②摸牌阶段，你额外摸X张牌；③你的基本牌均视为【杀】且使用杀无距离限制;④回合结束，你立刻死亡。（X=当前轮次数，X至多为5）",
                            guanyongmrfz: "冠勇",
                            "guanyongmrfz_info": "出牌阶段，当你使用的【杀】指定目标时，你弃置其一张牌，若此牌为基本牌，则此【杀】不可被【闪】响应，否则，你摸两张牌，然后本回合使用杀的次数+1（若不处于因【死战】而获得的回合，则至多+2）。",
                            chanshimrfz: '阐释',
                            'chanshimrfz_info': '每回合限一次，每轮开始时或你造成伤害后，你可以从两张武将牌中选择并获得其中一个技能。',
                            xuexingmrfz: '雪行',
                            'xuexingmrfz_info': '①锁定技，你不能成为冰【杀】的目标；当你于出牌阶段外因弃置而失去手牌后，你摸一张牌。②你可以将黑色牌当作冰【杀】使用或打出。',
                            chegumrfz: '彻骨',
                            'chegumrfz_info': '当你使用牌指定一名其他角色为目标后，你可以令其[装备区/武将牌上的技能]中所有[牌名/技能名]且描述中没有“冰”的[牌/技能]失效（宝物栏的牌除外）直到其下个回合结束。',
                            newchegumrfz: '彻骨',
                            'newchegumrfz_info': '当你使用牌指定一名其他角色为目标后，你可以令其[装备区/武将牌上的技能]中所有[牌名/技能名]且描述中没有“冰”的[牌/技能]失效（宝物栏的牌除外）直到其下个回合结束。',
                            donghenmrfz: '冬痕',
                            'donghenmrfz_info': '当你进入濒死状态时，你可以增加一点体力上限并将体力调整至体力上限，然后你失去【冬痕】和【雪行】，获得【燃命】且使用【杀】的次数+1。',
                            ranmingmrfz: '燃命',
                            'ranmingmrfz_info': '①锁定技，当你造成伤害后，你失去一点体力值；当你失去手牌时，你摸一张牌；当你回复体力值时，取消之。②你可以将一张牌当作冰【杀】使用或打出。',
                        },
                    };
                    if (lib.device || lib.node) {
                        for (var i in mrfz.character) { mrfz.character[i][4].push('ext:明日方舟/image/character/' + i + '.jpg'); }
                    } else {
                        for (var i in mrfz.character) { mrfz.character[i][4].push('db:extension-明日方舟/image/character/:' + i + '.jpg'); }
                    }
                    return mrfz;
                });
                lib.config.all.characters.push('mrfz');
                if (!lib.config.characters.contains('mrfz')) lib.config.characters.push('mrfz');
                lib.translate['mrfz_character_config'] = '明日方舟';

                //————禁用其他武将————//
                lib.config.mrfz_allCharacter = lib.config.group_mrfz_yibiliyamrfz.concat([...lib.config.group_mrfz_luodedaomrfz, ...lib.config.group_mrfz_luodedaojymrfz, ...lib.config.group_mrfz_laitaniyamrfz, ...lib.config.group_mrfz_xielagemrfz, ...lib.config.group_mrfz_xulagumrfz,
                ...lib.config.group_mrfz_babietamrfz, ...lib.config.group_mrfz_haisimrfz, ...lib.config.group_mrfz_shenhailierenmrfz, ...lib.config.group_mrfz_qiewuliumrfz, ...lib.config.group_mrfz_kaximiermrfz, ...lib.config.group_mrfz_gelunbiyamrfz, ...lib.config.group_mrfz_longmenmrfz,
                ...lib.config.group_mrfz_weiduoliyamrfz, ...lib.config.group_mrfz_latelanmrfz, ...lib.config.group_mrfz_shitumrfz, ...lib.config.group_mrfz_wusasimrfz, ...lib.config.group_mrfz_saergongmrfz, ...lib.config.group_mrfz_yansuimrfz, ...lib.config.group_mrfz_yanguomrfz,
                ...lib.config.group_mrfz_lishimrfz, ...lib.config.group_mrfz_xisitamrfz, ...lib.config.group_mrfz_hongsongqstmrfz, ...lib.config.group_mrfz_dongguomrfz, ...lib.config.group_mrfz_laiyinmrfz, ...lib.config.group_mrfz_shenchimrfz, ...lib.config.group_mrfz_liandongmrfz,
                ...lib.config.group_mrfz_qianmrfz, ...lib.config.group_mrfz_mimrfz, ...lib.config.group_mrfz_heigangguojimrfz, ...lib.config.group_mrfz_samimrfz,...lib.config.group_mrfz_SWEEPmrfz]);
                game.saveConfig('mrfz_allCharacter', lib.config.mrfz_allCharacter);
            };
        },
        editable: false,
        help: {}, config: {
            //分界线
            introtip: {
                name: '<a style="cursor: pointer;font-weight: bold;"><font color=#ffa10a><—欢迎游玩明日方舟扩展—></font></a>',
                clear: true,
            },

            //————分界线————//

            settip: {
                name: '<font color=#ed7e78><————设置————></font></a>',
                clear: true,
            },

            ChangeBgI_mrfz: {
                name: '切换背景图片',
                intro: '可以切换背景图片，立刻生效，所有图片均放置在‘明日方舟/image/background’',
                init: lib.config.ChangeBgI_mrfz !== undefined ? lib.config.ChangeBgI_mrfz : "noBgI",
                item: {
                    'noBgI': '默认',
                    '1': '生命之地',
                    '2': '照明',
                    '3': '朝露',
                    '4': '生态园',
                    '5': '空想花庭',
                },
                onclick: function (item) {
                    game.saveConfig('extension_明日方舟_ChangeBgI_mrfz', item);
                    game.saveConfig('ChangeBgI_mrfz', item);
                    mrfzfuc.setBgI();
                }
            },
            copySkin: {
                name: '自动导入皮肤',
                intro: '将皮肤导入至时装回廊扩展',
                init: false,
                onclick: function (bool) {
                    var copyDirectoryAndAlert = function (source, destination) {
                        return new Promise((resolve, reject) => {
                            mrfzfuc.copyFiles(source, destination);
                        });
                    }
                    var src = "是否导入至时装回廊？（需要扩展：时装回廊！）";
                    var d = confirm(src);
                    if (d == true) {
                        if (!lib.config.extension_时装回廊_enable) {
                            var str = [];
                            if (!lib.config.extension_时装回廊_enable) str.push('时装回廊');
                            //if(!(lib.config.extensions && lib.config.extensions.contains('UIPro') && lib.config['extension_UIPro_enable'])) str.push('UIPro');
                            alert('缺少或没有开启必要拓展：' + str);
                        }
                        else {
                            var ReloadAlert = function () {
                                var y = confirm('导入完毕，是否重启游戏？');
                                if (y == true) game.reload();
                            }
                            mrfzfuc.copyFiles('extension/明日方舟/image/skin', 'extension/时装回廊/sanguoskin');
                            //copyDirectoryAndAlert('extension/明日方舟/image2/decoration', 'extension/UIPro/image/decoration', '导入UIPro完毕!', '正在导入至UIPro，请稍等...')
                            //.then(() => copyDirectoryAndAlert('extension/明日方舟/image2/image', 'extension/时装回廊/image', '导入时装回廊（第一部分）完毕!', '正在导入至时装回廊（第一部分），请稍等...'))
                            //.then(() => copyDirectoryAndAlert('extension/明日方舟/image2/skin', 'extension/时装回廊/sanguoskin', '导入时装回廊（第二部分）完毕!', '正在导入至时装回廊（第二部分），请稍等...'))
                            //.then(ReloadAlert);
                        }
                    }
                }
            },
            isBanOther: {
                name: '禁选其他角色',
                intro: '开启后选将页面只会出现本扩展角色',
                init: false,
            },
            isBanSp: {
                name: '禁止同名角色同时上场',
                intro: '开启后异格、升变角色无法同时上场</br>例：场上不会同时出现陈和TheP',
                init: false,
            },
            // isOneGroup: {
            //     name: '所有本扩展角色同势力',
            //     intro: '如果你觉得本扩展势力过多，可开启此项，开启后所有本扩展的角色势力均会改为相同势力',
            //     init: false,
            // },
            isNoLimted: {
                name: '红蒂选择武将无限制',
                intro: '开启后红蒂选择武将将没有限制，这可能会影响到正常的游戏进程',
                init: false,
            },
            audiochoose: {
                name: '配音选择（重启生效）',
                intro: '选择角色对应的配音，需要重启方可生效',
                init: 'CN',
                item: {
                    'CN': '中配',
                    'JP': '日配',
                },
            },
        }, package: {
            intro: "",
            author:"角完",
            diskURL: "",
            forumURL: "",
            version: "v3.0.0",
        }, files: { "character": [], "card": [], "skill": [] }
    }
})